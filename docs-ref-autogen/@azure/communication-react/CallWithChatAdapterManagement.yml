### YamlMime:TSType
name: CallWithChatAdapterManagement
uid: '@azure/communication-react.CallWithChatAdapterManagement'
package: '@azure/communication-react'
summary: Functionality for managing the current call with chat.
fullName: CallWithChatAdapterManagement
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: askDevicePermission(PermissionConstraints)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.askDevicePermission
    package: '@azure/communication-react'
    summary: Ask for permissions of devices.
    remarks: Browser permission window will pop up if permissions are not granted yet.
    isDeprecated: false
    syntax:
      content: >-
        function askDevicePermission(constrain: PermissionConstraints):
        Promise<void>
      parameters:
        - id: constrain
          type: <xref uid="@azure/communication-calling.PermissionConstraints" />
          description: >-
            Define constraints for accessing local devices
            <xref:%40azure%2Fcommunication-calling%23PermissionConstraints>
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: createStreamView(string, VideoStreamOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.createStreamView'
    package: '@azure/communication-react'
    summary: Create the html view for a stream.
    remarks: This method is implemented for composite.
    isDeprecated: false
    syntax:
      content: >-
        function createStreamView(remoteUserId?: string, options?:
        VideoStreamOptions): Promise<void | CreateVideoStreamViewResult>
      parameters:
        - id: remoteUserId
          type: string
          description: >-
            Id of the participant to render, leave it undefined to create the
            local camera view
        - id: options
          type: <xref uid="@azure/communication-react.VideoStreamOptions" />
          description: >-
            Options to control how video streams are rendered
            <xref:%40azure%2Fcommunication-calling%23VideoStreamOptions>
      return:
        description: ''
        type: >-
          Promise&lt;void | <xref
          uid="@azure/communication-react.CreateVideoStreamViewResult" />&gt;
  - name: deleteMessage(string)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.deleteMessage'
    package: '@azure/communication-react'
    summary: Delete a message in the thread.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function deleteMessage(messageId: string): Promise<void>'
      parameters:
        - id: messageId
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: disposeStreamView(string, VideoStreamOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.disposeStreamView'
    package: '@azure/communication-react'
    summary: Dispose the html view for a stream.
    remarks: This method is implemented for composite.
    isDeprecated: false
    syntax:
      content: >-
        function disposeStreamView(remoteUserId?: string, options?:
        VideoStreamOptions): Promise<void>
      parameters:
        - id: remoteUserId
          type: string
          description: >-
            Id of the participant to render, leave it undefined to dispose the
            local camera view
        - id: options
          type: <xref uid="@azure/communication-react.VideoStreamOptions" />
          description: >-
            Options to control how video streams are rendered
            <xref:%40azure%2Fcommunication-calling%23VideoStreamOptions>
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: fetchInitialData()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.fetchInitialData'
    package: '@azure/communication-react'
    summary: |-
      Fetch initial state for the Chat adapter.

      Performs the minimal fetch necessary for ChatComposite and API methods.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function fetchInitialData(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: joinCall(boolean)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.joinCall'
    package: '@azure/communication-react'
    summary: Join the call with microphone initially on/off.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function joinCall(microphoneOn?: boolean): undefined | Call'
      parameters:
        - id: microphoneOn
          type: boolean
          description: Whether microphone is initially enabled
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-calling.Call" />
  - name: leaveCall(boolean)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.leaveCall'
    package: '@azure/communication-react'
    summary: Leave the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function leaveCall(forEveryone?: boolean): Promise<void>'
      parameters:
        - id: forEveryone
          type: boolean
          description: Whether to remove all participants when leaving
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: loadPreviousChatMessages(number)
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.loadPreviousChatMessages
    package: '@azure/communication-react'
    summary: Load more previous messages in the chat thread history.
    remarks: This method is usually used to control incremental fetch/infinite scroll.
    isDeprecated: false
    syntax:
      content: >-
        function loadPreviousChatMessages(messagesToLoad: number):
        Promise<boolean>
      parameters:
        - id: messagesToLoad
          type: number
          description: ''
      return:
        description: ''
        type: Promise&lt;boolean&gt;
  - name: mute()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.mute'
    package: '@azure/communication-react'
    summary: Mute the current user during the call or disable microphone locally.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function mute(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: queryCameras()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.queryCameras'
    package: '@azure/communication-react'
    summary: Query for available camera devices.
    remarks: This method should be called after askDevicePermission()
    isDeprecated: false
    syntax:
      content: 'function queryCameras(): Promise<VideoDeviceInfo[]>'
      return:
        description: >-
          An array of video device information entities
          <xref:%40azure%2Fcommunication-calling%23VideoDeviceInfo>
        type: >-
          Promise&lt;<xref uid="@azure/communication-calling.VideoDeviceInfo"
          />[]&gt;
  - name: queryMicrophones()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.queryMicrophones'
    package: '@azure/communication-react'
    summary: Query for available microphone devices.
    remarks: This method should be called after askDevicePermission()
    isDeprecated: false
    syntax:
      content: 'function queryMicrophones(): Promise<AudioDeviceInfo[]>'
      return:
        description: >-
          An array of audio device information entities
          <xref:%40azure%2Fcommunication-calling%23AudioDeviceInfo>
        type: >-
          Promise&lt;<xref uid="@azure/communication-calling.AudioDeviceInfo"
          />[]&gt;
  - name: querySpeakers()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.querySpeakers'
    package: '@azure/communication-react'
    summary: Query for available microphone devices.
    remarks: This method should be called after askDevicePermission()
    isDeprecated: false
    syntax:
      content: 'function querySpeakers(): Promise<AudioDeviceInfo[]>'
      return:
        description: >-
          An array of audio device information entities
          <xref:%40azure%2Fcommunication-calling%23AudioDeviceInfo>
        type: >-
          Promise&lt;<xref uid="@azure/communication-calling.AudioDeviceInfo"
          />[]&gt;
  - name: removeParticipant(string)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.removeParticipant'
    package: '@azure/communication-react'
    summary: Remove a participant from a Call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function removeParticipant(userId: string): Promise<void>'
      parameters:
        - id: userId
          type: string
          description: UserId of the participant to remove.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: sendMessage(string, SendMessageOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.sendMessage'
    package: '@azure/communication-react'
    summary: Send a message in the thread.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendMessage(content: string, options?: SendMessageOptions):
        Promise<void>
      parameters:
        - id: content
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/communication-chat.SendMessageOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: sendReadReceipt(string)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.sendReadReceipt'
    package: '@azure/communication-react'
    summary: Send a read receipt for a message.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function sendReadReceipt(chatMessageId: string): Promise<void>'
      parameters:
        - id: chatMessageId
          type: string
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: sendTypingIndicator()
    uid: >-
      @azure/communication-react.CallWithChatAdapterManagement.sendTypingIndicator
    package: '@azure/communication-react'
    summary: Send typing indicator in the thread.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function sendTypingIndicator(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: setCamera(VideoDeviceInfo, VideoStreamOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.setCamera'
    package: '@azure/communication-react'
    summary: Set the camera to use in the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function setCamera(sourceInfo: VideoDeviceInfo, options?:
        VideoStreamOptions): Promise<void>
      parameters:
        - id: sourceInfo
          type: <xref uid="@azure/communication-calling.VideoDeviceInfo" />
          description: >-
            Camera device to choose, pick one returned by 
            [queryCameras](xref:@azure/communication-react.CallAdapterDeviceManagement.queryCameras)
        - id: options
          type: <xref uid="@azure/communication-react.VideoStreamOptions" />
          description: >-
            Options to control how the camera stream is rendered
            <xref:%40azure%2Fcommunication-calling%23VideoStreamOptions>
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: setMicrophone(AudioDeviceInfo)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.setMicrophone'
    package: '@azure/communication-react'
    summary: Set the microphone to use in the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setMicrophone(sourceInfo: AudioDeviceInfo): Promise<void>'
      parameters:
        - id: sourceInfo
          type: <xref uid="@azure/communication-calling.AudioDeviceInfo" />
          description: >-
            Microphone device to choose, pick one returned by
            [queryMicrophones](xref:@azure/communication-react.CallAdapterDeviceManagement.queryMicrophones)
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: setSpeaker(AudioDeviceInfo)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.setSpeaker'
    package: '@azure/communication-react'
    summary: Set the speaker to use in the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function setSpeaker(sourceInfo: AudioDeviceInfo): Promise<void>'
      parameters:
        - id: sourceInfo
          type: <xref uid="@azure/communication-calling.AudioDeviceInfo" />
          description: >-
            Speaker device to choose, pick one returned by
            [querySpeakers](xref:@azure/communication-react.CallAdapterDeviceManagement.querySpeakers)
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: startCall(string[], StartCallOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.startCall'
    package: '@azure/communication-react'
    summary: Start the call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startCall(participants: string[], options?: StartCallOptions):
        undefined | Call
      parameters:
        - id: participants
          type: string[]
          description: An array of participant ids to join
        - id: options
          type: <xref uid="@azure/communication-calling.StartCallOptions" />
          description: ''
      return:
        description: ''
        type: undefined | <xref uid="@azure/communication-calling.Call" />
  - name: startCamera(VideoStreamOptions)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.startCamera'
    package: '@azure/communication-react'
    summary: >-
      Start the camera.


      This method will start rendering a local camera view when the call is not
      active.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function startCamera(options?: VideoStreamOptions): Promise<void>'
      parameters:
        - id: options
          type: <xref uid="@azure/communication-react.VideoStreamOptions" />
          description: >-
            Options to control how video streams are rendered
            <xref:%40azure%2Fcommunication-calling%23VideoStreamOptions>
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: startScreenShare()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.startScreenShare'
    package: '@azure/communication-react'
    summary: Start sharing the screen during a call.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function startScreenShare(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: stopCamera()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.stopCamera'
    package: '@azure/communication-react'
    summary: >-
      Stop the camera.


      This method will stop rendering a local camera view when the call is not
      active.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function stopCamera(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: stopScreenShare()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.stopScreenShare'
    package: '@azure/communication-react'
    summary: Stop sharing the screen.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function stopScreenShare(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: unmute()
    uid: '@azure/communication-react.CallWithChatAdapterManagement.unmute'
    package: '@azure/communication-react'
    summary: Unmute the current user during the call or enable microphone locally.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function unmute(): Promise<void>'
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: updateMessage(string, string, Record<string, string>)
    uid: '@azure/communication-react.CallWithChatAdapterManagement.updateMessage'
    package: '@azure/communication-react'
    summary: Update a message content.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateMessage(messageId: string, content: string, metadata?:
        Record<string, string>): Promise<void>
      parameters:
        - id: messageId
          type: string
          description: ''
        - id: content
          type: string
          description: ''
        - id: metadata
          type: Record&lt;string, string&gt;
          description: ''
      return:
        description: ''
        type: Promise&lt;void&gt;
