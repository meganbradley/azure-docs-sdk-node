### YamlMime:TSType
name: ServiceFabricClient
uid: '@azure/servicefabric.ServiceFabricClient'
package: '@azure/servicefabric'
summary: ''
fullName: ServiceFabricClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: ServiceFabricClient(ServiceFabricClientOptions)
    uid: '@azure/servicefabric.ServiceFabricClient.constructor'
    package: '@azure/servicefabric'
    summary: Initializes a new instance of the ServiceFabricClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new ServiceFabricClient(options?: ServiceFabricClientOptions)'
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientOptions"
            />
          description: The parameter options
properties:
  - name: meshApplication
    uid: '@azure/servicefabric.ServiceFabricClient.meshApplication'
    package: '@azure/servicefabric'
    summary: ''
    fullName: meshApplication
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'meshApplication: MeshApplication'
      return:
        description: ''
        type: <xref uid="@azure/servicefabric.MeshApplication" />
  - name: meshCodePackage
    uid: '@azure/servicefabric.ServiceFabricClient.meshCodePackage'
    package: '@azure/servicefabric'
    summary: ''
    fullName: meshCodePackage
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'meshCodePackage: MeshCodePackage'
      return:
        description: ''
        type: <xref uid="@azure/servicefabric.MeshCodePackage" />
  - name: meshGateway
    uid: '@azure/servicefabric.ServiceFabricClient.meshGateway'
    package: '@azure/servicefabric'
    summary: ''
    fullName: meshGateway
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'meshGateway: MeshGateway'
      return:
        description: ''
        type: <xref uid="@azure/servicefabric.MeshGateway" />
  - name: meshNetwork
    uid: '@azure/servicefabric.ServiceFabricClient.meshNetwork'
    package: '@azure/servicefabric'
    summary: ''
    fullName: meshNetwork
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'meshNetwork: MeshNetwork'
      return:
        description: ''
        type: <xref uid="@azure/servicefabric.MeshNetwork" />
  - name: meshSecret
    uid: '@azure/servicefabric.ServiceFabricClient.meshSecret'
    package: '@azure/servicefabric'
    summary: ''
    fullName: meshSecret
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'meshSecret: MeshSecret'
      return:
        description: ''
        type: <xref uid="@azure/servicefabric.MeshSecret" />
  - name: meshSecretValue
    uid: '@azure/servicefabric.ServiceFabricClient.meshSecretValue'
    package: '@azure/servicefabric'
    summary: ''
    fullName: meshSecretValue
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'meshSecretValue: MeshSecretValue'
      return:
        description: ''
        type: <xref uid="@azure/servicefabric.MeshSecretValue" />
  - name: meshService
    uid: '@azure/servicefabric.ServiceFabricClient.meshService'
    package: '@azure/servicefabric'
    summary: ''
    fullName: meshService
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'meshService: MeshService'
      return:
        description: ''
        type: <xref uid="@azure/servicefabric.MeshService" />
  - name: meshServiceReplica
    uid: '@azure/servicefabric.ServiceFabricClient.meshServiceReplica'
    package: '@azure/servicefabric'
    summary: ''
    fullName: meshServiceReplica
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'meshServiceReplica: MeshServiceReplica'
      return:
        description: ''
        type: <xref uid="@azure/servicefabric.MeshServiceReplica" />
  - name: meshVolume
    uid: '@azure/servicefabric.ServiceFabricClient.meshVolume'
    package: '@azure/servicefabric'
    summary: ''
    fullName: meshVolume
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'meshVolume: MeshVolume'
      return:
        description: ''
        type: <xref uid="@azure/servicefabric.MeshVolume" />
inheritedMethods:
  - name: >-
      sendOperationRequest(OperationArguments, OperationSpec,
      ServiceCallback<any>)
    uid: '@azure/servicefabric.ServiceFabricClient.sendOperationRequest'
    package: '@azure/servicefabric'
    summary: Send an HTTP request that is populated using the provided OperationSpec.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendOperationRequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, callback?: ServiceCallback<any>):
        Promise<RestResponse>
      parameters:
        - id: operationArguments
          type: <xref uid="@azure/ms-rest-js.OperationArguments" />
          description: >-
            The arguments that the HTTP request's templated values will be
            populated from.
        - id: operationSpec
          type: <xref uid="@azure/ms-rest-js.OperationSpec" />
          description: The OperationSpec to use to populate the httpRequest.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;any&gt;
          description: The callback to call when the response is received.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceFabricClientContext.sendOperationRequest](xref:@azure/servicefabric.ServiceFabricClientContext.sendOperationRequest)
  - name: sendRequest(RequestPrepareOptions | WebResourceLike)
    uid: '@azure/servicefabric.ServiceFabricClient.sendRequest'
    package: '@azure/servicefabric'
    summary: Send the provided httpRequest.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendRequest(options: RequestPrepareOptions | WebResourceLike):
        Promise<HttpOperationResponse>
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/ms-rest-js.RequestPrepareOptions" /> | <xref
            uid="@azure/ms-rest-js.WebResourceLike" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/ms-rest-js.HttpOperationResponse" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [ServiceFabricClientContext.sendRequest](xref:@azure/servicefabric.ServiceFabricClientContext.sendRequest)
methods:
  - name: >-
      addConfigurationParameterOverrides(string, ConfigParameterOverride[],
      ServiceCallback<void>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.addConfigurationParameterOverrides_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addConfigurationParameterOverrides(nodeName: string,
        configParameterOverrideList: ConfigParameterOverride[], callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: configParameterOverrideList
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ConfigParameterOverride"
            />[]
          description: Description for adding list of configuration overrides.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      addConfigurationParameterOverrides(string, ConfigParameterOverride[],
      ServiceFabricClientAddConfigurationParameterOverridesOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.addConfigurationParameterOverrides
    package: '@azure/servicefabric'
    summary: >-
      This api allows adding all existing configuration overrides on the
      specified node.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addConfigurationParameterOverrides(nodeName: string,
        configParameterOverrideList: ConfigParameterOverride[], options?:
        ServiceFabricClientAddConfigurationParameterOverridesOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: configParameterOverrideList
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ConfigParameterOverride"
            />[]
          description: Description for adding list of configuration overrides.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientAddConfigurationParameterOverridesOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      addConfigurationParameterOverrides(string, ConfigParameterOverride[],
      ServiceFabricClientAddConfigurationParameterOverridesOptionalParams,
      ServiceCallback<void>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.addConfigurationParameterOverrides_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addConfigurationParameterOverrides(nodeName: string,
        configParameterOverrideList: ConfigParameterOverride[], options:
        ServiceFabricClientAddConfigurationParameterOverridesOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: configParameterOverrideList
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ConfigParameterOverride"
            />[]
          description: Description for adding list of configuration overrides.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientAddConfigurationParameterOverridesOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: backupPartition(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.backupPartition_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupPartition(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: backupPartition(string, ServiceFabricClientBackupPartitionOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.backupPartition'
    package: '@azure/servicefabric'
    summary: >-
      Creates a backup of the stateful persisted partition's state. In case the
      partition is already

      being periodically backed up, then by default the new backup is created at
      the same backup

      storage. One can also override the same by specifying the backup storage
      details as part of the

      request body. Once the backup is initiated, its progress can be tracked
      using the

      GetBackupProgress operation.

      In case, the operation times out, specify a greater backup timeout value
      in the query parameter.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupPartition(partitionId: string, options?:
        ServiceFabricClientBackupPartitionOptionalParams): Promise<RestResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientBackupPartitionOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      backupPartition(string, ServiceFabricClientBackupPartitionOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.backupPartition_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function backupPartition(partitionId: string, options:
        ServiceFabricClientBackupPartitionOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientBackupPartitionOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: cancelOperation(string, boolean, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.cancelOperation_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function cancelOperation(operationId: string, force: boolean, callback:
        ServiceCallback<void>)
      parameters:
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: force
          type: boolean
          description: >-
            Indicates whether to gracefully roll back and clean up internal
            system state

            modified by executing the user-induced operation.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      cancelOperation(string, boolean,
      ServiceFabricClientCancelOperationOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.cancelOperation'
    package: '@azure/servicefabric'
    summary: >-
      The following APIs start fault operations that may be cancelled by using
      CancelOperation:

      StartDataLoss, StartQuorumLoss, StartPartitionRestart,
      StartNodeTransition.


      If force is false, then the specified user-induced operation will be
      gracefully stopped and

      cleaned up.  If force is true, the command will be aborted, and some
      internal state

      may be left behind.  Specifying force as true should be used with care. 
      Calling this API with

      force set to true is not allowed until this API has already

      been called on the same test command with force set to false first, or
      unless the test command

      already has an OperationState of OperationState.RollingBack.

      Clarification: OperationState.RollingBack means that the system will be/is
      cleaning up internal

      system state caused by executing the command.  It will not restore data if
      the

      test command was to cause data loss.  For example, if you call
      StartDataLoss then call this API,

      the system will only clean up internal state from running the command.

      It will not restore the target partition's data, if the command progressed
      far enough to cause

      data loss.


      Important note:  if this API is invoked with force==true, internal state
      may be left behind.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function cancelOperation(operationId: string, force: boolean, options?:
        ServiceFabricClientCancelOperationOptionalParams): Promise<RestResponse>
      parameters:
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: force
          type: boolean
          description: >-
            Indicates whether to gracefully roll back and clean up internal
            system state

            modified by executing the user-induced operation.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCancelOperationOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      cancelOperation(string, boolean,
      ServiceFabricClientCancelOperationOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.cancelOperation_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function cancelOperation(operationId: string, force: boolean, options:
        ServiceFabricClientCancelOperationOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: force
          type: boolean
          description: >-
            Indicates whether to gracefully roll back and clean up internal
            system state

            modified by executing the user-induced operation.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCancelOperationOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: cancelRepairTask(RepairTaskCancelDescription, RequestOptionsBase)
    uid: '@azure/servicefabric.ServiceFabricClient.cancelRepairTask'
    package: '@azure/servicefabric'
    summary: >-
      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function cancelRepairTask(repairTaskCancelDescription:
        RepairTaskCancelDescription, options?: RequestOptionsBase):
        Promise<CancelRepairTaskResponse>
      parameters:
        - id: repairTaskCancelDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskCancelDescription"
            />
          description: Describes the repair task to be cancelled.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
      return:
        description: Promise<Models.CancelRepairTaskResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.CancelRepairTaskResponse"
          />&gt;
  - name: >-
      cancelRepairTask(RepairTaskCancelDescription, RequestOptionsBase,
      ServiceCallback<RepairTaskUpdateInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.cancelRepairTask_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function cancelRepairTask(repairTaskCancelDescription:
        RepairTaskCancelDescription, options: RequestOptionsBase, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTaskCancelDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskCancelDescription"
            />
          description: Describes the repair task to be cancelled.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateInfo"
            />&gt;
          description: The callback
  - name: >-
      cancelRepairTask(RepairTaskCancelDescription,
      ServiceCallback<RepairTaskUpdateInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.cancelRepairTask_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function cancelRepairTask(repairTaskCancelDescription:
        RepairTaskCancelDescription, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTaskCancelDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskCancelDescription"
            />
          description: Describes the repair task to be cancelled.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateInfo"
            />&gt;
          description: The callback
  - name: commitImageStoreUploadSession(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function commitImageStoreUploadSession(sessionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: sessionId
          type: string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      commitImageStoreUploadSession(string,
      ServiceFabricClientCommitImageStoreUploadSessionOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession'
    package: '@azure/servicefabric'
    summary: >-
      When all file chunks have been uploaded, the upload session needs to be
      committed explicitly to

      complete the upload. Image store preserves the upload session until the
      expiration time, which

      is 30 minutes after the last chunk received.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function commitImageStoreUploadSession(sessionId: string, options?:
        ServiceFabricClientCommitImageStoreUploadSessionOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: sessionId
          type: string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      commitImageStoreUploadSession(string,
      ServiceFabricClientCommitImageStoreUploadSessionOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.commitImageStoreUploadSession_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function commitImageStoreUploadSession(sessionId: string, options:
        ServiceFabricClientCommitImageStoreUploadSessionOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: sessionId
          type: string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCommitImageStoreUploadSessionOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: copyImageStoreContent(ImageStoreCopyDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function copyImageStoreContent(imageStoreCopyDescription:
        ImageStoreCopyDescription, callback: ServiceCallback<void>)
      parameters:
        - id: imageStoreCopyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ImageStoreCopyDescription"
            />
          description: Describes the copy description for the image store.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      copyImageStoreContent(ImageStoreCopyDescription,
      ServiceFabricClientCopyImageStoreContentOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent'
    package: '@azure/servicefabric'
    summary: >-
      Copies the image store content from the source image store relative path
      to the destination

      image store relative path.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function copyImageStoreContent(imageStoreCopyDescription:
        ImageStoreCopyDescription, options?:
        ServiceFabricClientCopyImageStoreContentOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: imageStoreCopyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ImageStoreCopyDescription"
            />
          description: Describes the copy description for the image store.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCopyImageStoreContentOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      copyImageStoreContent(ImageStoreCopyDescription,
      ServiceFabricClientCopyImageStoreContentOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.copyImageStoreContent_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function copyImageStoreContent(imageStoreCopyDescription:
        ImageStoreCopyDescription, options:
        ServiceFabricClientCopyImageStoreContentOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: imageStoreCopyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ImageStoreCopyDescription"
            />
          description: Describes the copy description for the image store.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCopyImageStoreContentOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: createApplication(ApplicationDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.createApplication_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createApplication(applicationDescription:
        ApplicationDescription, callback: ServiceCallback<void>)
      parameters:
        - id: applicationDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationDescription"
            />
          description: Description for creating an application.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      createApplication(ApplicationDescription,
      ServiceFabricClientCreateApplicationOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.createApplication'
    package: '@azure/servicefabric'
    summary: Creates a Service Fabric application using the specified description.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createApplication(applicationDescription:
        ApplicationDescription, options?:
        ServiceFabricClientCreateApplicationOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationDescription"
            />
          description: Description for creating an application.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCreateApplicationOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      createApplication(ApplicationDescription,
      ServiceFabricClientCreateApplicationOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.createApplication_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createApplication(applicationDescription:
        ApplicationDescription, options:
        ServiceFabricClientCreateApplicationOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationDescription"
            />
          description: Description for creating an application.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCreateApplicationOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: createBackupPolicy(BackupPolicyDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.createBackupPolicy_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createBackupPolicy(backupPolicyDescription:
        BackupPolicyDescription, callback: ServiceCallback<void>)
      parameters:
        - id: backupPolicyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.BackupPolicyDescription"
            />
          description: Describes the backup policy.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      createBackupPolicy(BackupPolicyDescription,
      ServiceFabricClientCreateBackupPolicyOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.createBackupPolicy'
    package: '@azure/servicefabric'
    summary: >-
      Creates a backup policy which can be associated later with a Service
      Fabric application, service

      or a partition for periodic backup.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createBackupPolicy(backupPolicyDescription:
        BackupPolicyDescription, options?:
        ServiceFabricClientCreateBackupPolicyOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: backupPolicyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.BackupPolicyDescription"
            />
          description: Describes the backup policy.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCreateBackupPolicyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      createBackupPolicy(BackupPolicyDescription,
      ServiceFabricClientCreateBackupPolicyOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.createBackupPolicy_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createBackupPolicy(backupPolicyDescription:
        BackupPolicyDescription, options:
        ServiceFabricClientCreateBackupPolicyOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: backupPolicyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.BackupPolicyDescription"
            />
          description: Describes the backup policy.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCreateBackupPolicyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      createComposeDeployment(CreateComposeDeploymentDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.createComposeDeployment_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createComposeDeployment(createComposeDeploymentDescription:
        CreateComposeDeploymentDescription, callback: ServiceCallback<void>)
      parameters:
        - id: createComposeDeploymentDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.CreateComposeDeploymentDescription"
            />
          description: |-
            Describes the compose deployment that needs to be
            created.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      createComposeDeployment(CreateComposeDeploymentDescription,
      ServiceFabricClientCreateComposeDeploymentOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.createComposeDeployment'
    package: '@azure/servicefabric'
    summary: >-
      Compose is a file format that describes multi-container applications. This
      API allows deploying

      container based applications defined in compose format in a Service Fabric
      cluster. Once the

      deployment is created, its status can be tracked via the
      `GetComposeDeploymentStatus` API.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createComposeDeployment(createComposeDeploymentDescription:
        CreateComposeDeploymentDescription, options?:
        ServiceFabricClientCreateComposeDeploymentOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: createComposeDeploymentDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.CreateComposeDeploymentDescription"
            />
          description: |-
            Describes the compose deployment that needs to be
            created.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCreateComposeDeploymentOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      createComposeDeployment(CreateComposeDeploymentDescription,
      ServiceFabricClientCreateComposeDeploymentOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.createComposeDeployment_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createComposeDeployment(createComposeDeploymentDescription:
        CreateComposeDeploymentDescription, options:
        ServiceFabricClientCreateComposeDeploymentOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: createComposeDeploymentDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.CreateComposeDeploymentDescription"
            />
          description: |-
            Describes the compose deployment that needs to be
            created.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCreateComposeDeploymentOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: createName(NameDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.createName_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createName(nameDescription: NameDescription, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameDescription
          type: >-
            <xref uid="@azure/servicefabric.ServiceFabricModels.NameDescription"
            />
          description: Describes the Service Fabric name to be created.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: createName(NameDescription, ServiceFabricClientCreateNameOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.createName'
    package: '@azure/servicefabric'
    summary: Creates the specified Service Fabric name.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createName(nameDescription: NameDescription, options?:
        ServiceFabricClientCreateNameOptionalParams): Promise<RestResponse>
      parameters:
        - id: nameDescription
          type: >-
            <xref uid="@azure/servicefabric.ServiceFabricModels.NameDescription"
            />
          description: Describes the Service Fabric name to be created.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCreateNameOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      createName(NameDescription, ServiceFabricClientCreateNameOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.createName_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createName(nameDescription: NameDescription, options:
        ServiceFabricClientCreateNameOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameDescription
          type: >-
            <xref uid="@azure/servicefabric.ServiceFabricModels.NameDescription"
            />
          description: Describes the Service Fabric name to be created.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCreateNameOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: createRepairTask(RepairTask, RequestOptionsBase)
    uid: '@azure/servicefabric.ServiceFabricClient.createRepairTask'
    package: '@azure/servicefabric'
    summary: >-
      For clusters that have the Repair Manager Service configured,

      this API provides a way to create repair tasks that run automatically or
      manually.

      For repair tasks that run automatically, an appropriate repair executor

      must be running for each repair action to run automatically.

      These are currently only available in specially-configured Azure Cloud
      Services.


      To create a manual repair task, provide the set of impacted node names and
      the

      expected impact. When the state of the created repair task changes to
      approved,

      you can safely perform repair actions on those nodes.


      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createRepairTask(repairTask: RepairTask, options?:
        RequestOptionsBase): Promise<CreateRepairTaskResponse>
      parameters:
        - id: repairTask
          type: <xref uid="@azure/servicefabric.ServiceFabricModels.RepairTask" />
          description: Describes the repair task to be created or updated.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
      return:
        description: Promise<Models.CreateRepairTaskResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.CreateRepairTaskResponse"
          />&gt;
  - name: >-
      createRepairTask(RepairTask, RequestOptionsBase,
      ServiceCallback<RepairTaskUpdateInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.createRepairTask_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createRepairTask(repairTask: RepairTask, options:
        RequestOptionsBase, callback: ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTask
          type: <xref uid="@azure/servicefabric.ServiceFabricModels.RepairTask" />
          description: Describes the repair task to be created or updated.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateInfo"
            />&gt;
          description: The callback
  - name: createRepairTask(RepairTask, ServiceCallback<RepairTaskUpdateInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.createRepairTask_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createRepairTask(repairTask: RepairTask, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTask
          type: <xref uid="@azure/servicefabric.ServiceFabricModels.RepairTask" />
          description: Describes the repair task to be created or updated.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateInfo"
            />&gt;
          description: The callback
  - name: createService(string, ServiceDescriptionUnion, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.createService_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createService(applicationId: string, serviceDescription:
        ServiceDescriptionUnion, callback: ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceDescriptionUnion"
            />
          description: The information necessary to create a service.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      createService(string, ServiceDescriptionUnion,
      ServiceFabricClientCreateServiceOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.createService'
    package: '@azure/servicefabric'
    summary: >-
      This api allows creating a new Service Fabric stateless or stateful
      service under a specified

      Service Fabric application. The description for creating the service
      includes partitioning

      information and optional properties for placement and load balancing. Some
      of the properties can

      later be modified using `UpdateService` API.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createService(applicationId: string, serviceDescription:
        ServiceDescriptionUnion, options?:
        ServiceFabricClientCreateServiceOptionalParams): Promise<RestResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceDescriptionUnion"
            />
          description: The information necessary to create a service.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCreateServiceOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      createService(string, ServiceDescriptionUnion,
      ServiceFabricClientCreateServiceOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.createService_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createService(applicationId: string, serviceDescription:
        ServiceDescriptionUnion, options:
        ServiceFabricClientCreateServiceOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceDescriptionUnion"
            />
          description: The information necessary to create a service.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCreateServiceOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      createServiceFromTemplate(string, ServiceFromTemplateDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createServiceFromTemplate(applicationId: string,
        serviceFromTemplateDescription: ServiceFromTemplateDescription,
        callback: ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceFromTemplateDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFromTemplateDescription"
            />
          description: |-
            Describes the service that needs to be created from the
            template defined in the application manifest.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      createServiceFromTemplate(string, ServiceFromTemplateDescription,
      ServiceFabricClientCreateServiceFromTemplateOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate'
    package: '@azure/servicefabric'
    summary: >-
      Creates a Service Fabric service from the service template defined in the
      application manifest.

      A service template contains the properties that will be same for the
      service instance of the

      same type. The API allows overriding the properties that are usually
      different for different

      services of the same service type.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createServiceFromTemplate(applicationId: string,
        serviceFromTemplateDescription: ServiceFromTemplateDescription,
        options?: ServiceFabricClientCreateServiceFromTemplateOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceFromTemplateDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFromTemplateDescription"
            />
          description: |-
            Describes the service that needs to be created from the
            template defined in the application manifest.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCreateServiceFromTemplateOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      createServiceFromTemplate(string, ServiceFromTemplateDescription,
      ServiceFabricClientCreateServiceFromTemplateOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.createServiceFromTemplate_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createServiceFromTemplate(applicationId: string,
        serviceFromTemplateDescription: ServiceFromTemplateDescription, options:
        ServiceFabricClientCreateServiceFromTemplateOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceFromTemplateDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFromTemplateDescription"
            />
          description: |-
            Describes the service that needs to be created from the
            template defined in the application manifest.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientCreateServiceFromTemplateOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteApplication(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteApplication_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteApplication(applicationId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      deleteApplication(string,
      ServiceFabricClientDeleteApplicationOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteApplication'
    package: '@azure/servicefabric'
    summary: >-
      An application must be created before it can be deleted. Deleting an
      application will delete all

      services that are part of that application. By default, Service Fabric
      will try to close service

      replicas in a graceful manner and then delete the service. However, if a
      service is having

      issues closing the replica gracefully, the delete operation may take a
      long time or get stuck.

      Use the optional ForceRemove flag to skip the graceful close sequence and
      forcefully delete the

      application and all of its services.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteApplication(applicationId: string, options?:
        ServiceFabricClientDeleteApplicationOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeleteApplicationOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      deleteApplication(string,
      ServiceFabricClientDeleteApplicationOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteApplication_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteApplication(applicationId: string, options:
        ServiceFabricClientDeleteApplicationOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeleteApplicationOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteBackupPolicy(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteBackupPolicy(backupPolicyName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: backupPolicyName
          type: string
          description: The name of the backup policy.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      deleteBackupPolicy(string,
      ServiceFabricClientDeleteBackupPolicyOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy'
    package: '@azure/servicefabric'
    summary: >-
      Deletes an existing backup policy. A backup policy must be created before
      it can be deleted. A

      currently active backup policy, associated with any Service Fabric
      application, service or

      partition, cannot be deleted without first deleting the mapping.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteBackupPolicy(backupPolicyName: string, options?:
        ServiceFabricClientDeleteBackupPolicyOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: backupPolicyName
          type: string
          description: The name of the backup policy.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeleteBackupPolicyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      deleteBackupPolicy(string,
      ServiceFabricClientDeleteBackupPolicyOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteBackupPolicy_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteBackupPolicy(backupPolicyName: string, options:
        ServiceFabricClientDeleteBackupPolicyOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: backupPolicyName
          type: string
          description: The name of the backup policy.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeleteBackupPolicyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteImageStoreContent(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteImageStoreContent(contentPath: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      deleteImageStoreContent(string,
      ServiceFabricClientDeleteImageStoreContentOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent'
    package: '@azure/servicefabric'
    summary: >-
      Deletes existing image store content being found within the given image
      store relative path.

      This command can be used to delete uploaded application packages once they
      are provisioned.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteImageStoreContent(contentPath: string, options?:
        ServiceFabricClientDeleteImageStoreContentOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeleteImageStoreContentOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      deleteImageStoreContent(string,
      ServiceFabricClientDeleteImageStoreContentOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreContent_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteImageStoreContent(contentPath: string, options:
        ServiceFabricClientDeleteImageStoreContentOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeleteImageStoreContentOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteImageStoreUploadSession(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteImageStoreUploadSession(sessionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: sessionId
          type: string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      deleteImageStoreUploadSession(string,
      ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession'
    package: '@azure/servicefabric'
    summary: >-
      The DELETE request will cause the existing upload session to expire and
      remove any previously

      uploaded file chunks.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteImageStoreUploadSession(sessionId: string, options?:
        ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: sessionId
          type: string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      deleteImageStoreUploadSession(string,
      ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteImageStoreUploadSession_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteImageStoreUploadSession(sessionId: string, options:
        ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: sessionId
          type: string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeleteImageStoreUploadSessionOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteName(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteName_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function deleteName(nameId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteName(string, ServiceFabricClientDeleteNameOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteName'
    package: '@azure/servicefabric'
    summary: >-
      Deletes the specified Service Fabric name. A name must be created before
      it can be deleted.

      Deleting a name with child properties will fail.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteName(nameId: string, options?:
        ServiceFabricClientDeleteNameOptionalParams): Promise<RestResponse>
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeleteNameOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      deleteName(string, ServiceFabricClientDeleteNameOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteName_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteName(nameId: string, options:
        ServiceFabricClientDeleteNameOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeleteNameOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteProperty(string, string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteProperty_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteProperty(nameId: string, propertyName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: propertyName
          type: string
          description: Specifies the name of the property to get.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      deleteProperty(string, string,
      ServiceFabricClientDeletePropertyOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteProperty'
    package: '@azure/servicefabric'
    summary: >-
      Deletes the specified Service Fabric property under a given name. A
      property must be created

      before it can be deleted.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteProperty(nameId: string, propertyName: string, options?:
        ServiceFabricClientDeletePropertyOptionalParams): Promise<RestResponse>
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: propertyName
          type: string
          description: Specifies the name of the property to get.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeletePropertyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      deleteProperty(string, string,
      ServiceFabricClientDeletePropertyOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteProperty_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteProperty(nameId: string, propertyName: string, options:
        ServiceFabricClientDeletePropertyOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: propertyName
          type: string
          description: Specifies the name of the property to get.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeletePropertyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteRepairTask(RepairTaskDeleteDescription, RequestOptionsBase)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteRepairTask'
    package: '@azure/servicefabric'
    summary: >-
      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteRepairTask(repairTaskDeleteDescription:
        RepairTaskDeleteDescription, options?: RequestOptionsBase):
        Promise<RestResponse>
      parameters:
        - id: repairTaskDeleteDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskDeleteDescription"
            />
          description: Describes the repair task to be deleted.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      deleteRepairTask(RepairTaskDeleteDescription, RequestOptionsBase,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteRepairTask_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteRepairTask(repairTaskDeleteDescription:
        RepairTaskDeleteDescription, options: RequestOptionsBase, callback:
        ServiceCallback<void>)
      parameters:
        - id: repairTaskDeleteDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskDeleteDescription"
            />
          description: Describes the repair task to be deleted.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteRepairTask(RepairTaskDeleteDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteRepairTask_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteRepairTask(repairTaskDeleteDescription:
        RepairTaskDeleteDescription, callback: ServiceCallback<void>)
      parameters:
        - id: repairTaskDeleteDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskDeleteDescription"
            />
          description: Describes the repair task to be deleted.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteService(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteService_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteService(serviceId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteService(string, ServiceFabricClientDeleteServiceOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteService'
    package: '@azure/servicefabric'
    summary: >-
      A service must be created before it can be deleted. By default, Service
      Fabric will try to close

      service replicas in a graceful manner and then delete the service.
      However, if the service is

      having issues closing the replica gracefully, the delete operation may
      take a long time or get

      stuck. Use the optional ForceRemove flag to skip the graceful close
      sequence and forcefully

      delete the service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteService(serviceId: string, options?:
        ServiceFabricClientDeleteServiceOptionalParams): Promise<RestResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeleteServiceOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      deleteService(string, ServiceFabricClientDeleteServiceOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deleteService_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteService(serviceId: string, options:
        ServiceFabricClientDeleteServiceOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeleteServiceOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      deployServicePackageToNode(string, DeployServicePackageToNodeDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deployServicePackageToNode(nodeName: string,
        deployServicePackageToNodeDescription:
        DeployServicePackageToNodeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: deployServicePackageToNodeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployServicePackageToNodeDescription"
            />
          description: |-
            Describes information for deploying a service
            package to a Service Fabric node.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      deployServicePackageToNode(string, DeployServicePackageToNodeDescription,
      ServiceFabricClientDeployServicePackageToNodeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode'
    package: '@azure/servicefabric'
    summary: >-
      This API provides a way to download code packages including the container
      images on a specific

      node outside of the normal application deployment and upgrade path. This
      is useful for the large

      code packages and container images to be present on the node before the
      actual application

      deployment and upgrade, thus significantly reducing the total time
      required for the deployment

      or upgrade.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deployServicePackageToNode(nodeName: string,
        deployServicePackageToNodeDescription:
        DeployServicePackageToNodeDescription, options?:
        ServiceFabricClientDeployServicePackageToNodeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: deployServicePackageToNodeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployServicePackageToNodeDescription"
            />
          description: |-
            Describes information for deploying a service
            package to a Service Fabric node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeployServicePackageToNodeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      deployServicePackageToNode(string, DeployServicePackageToNodeDescription,
      ServiceFabricClientDeployServicePackageToNodeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.deployServicePackageToNode_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deployServicePackageToNode(nodeName: string,
        deployServicePackageToNodeDescription:
        DeployServicePackageToNodeDescription, options:
        ServiceFabricClientDeployServicePackageToNodeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: deployServicePackageToNodeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployServicePackageToNodeDescription"
            />
          description: |-
            Describes information for deploying a service
            package to a Service Fabric node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDeployServicePackageToNodeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: disableApplicationBackup(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableApplicationBackup(applicationId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      disableApplicationBackup(string,
      ServiceFabricClientDisableApplicationBackupOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup'
    package: '@azure/servicefabric'
    summary: >-
      Disables periodic backup of Service Fabric application which was
      previously enabled.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableApplicationBackup(applicationId: string, options?:
        ServiceFabricClientDisableApplicationBackupOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDisableApplicationBackupOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      disableApplicationBackup(string,
      ServiceFabricClientDisableApplicationBackupOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.disableApplicationBackup_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableApplicationBackup(applicationId: string, options:
        ServiceFabricClientDisableApplicationBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDisableApplicationBackupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: disableNode(string, DeactivationIntentDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.disableNode_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableNode(nodeName: string, deactivationIntentDescription:
        DeactivationIntentDescription, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: deactivationIntentDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.DeactivationIntentDescription"
            />
          description: Describes the intent or reason for deactivating the node.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      disableNode(string, DeactivationIntentDescription,
      ServiceFabricClientDisableNodeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.disableNode'
    package: '@azure/servicefabric'
    summary: >-
      Deactivate a Service Fabric cluster node with the specified deactivation
      intent. Once the

      deactivation is in progress, the deactivation intent can be increased, but
      not decreased (for

      example, a node that is deactivated with the Pause intent can be
      deactivated further with

      Restart, but not the other way around. Nodes may be reactivated using the
      Activate a node

      operation any time after they are deactivated. If the deactivation is not
      complete, this will

      cancel the deactivation. A node that goes down and comes back up while
      deactivated will still

      need to be reactivated before services will be placed on that node.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableNode(nodeName: string, deactivationIntentDescription:
        DeactivationIntentDescription, options?:
        ServiceFabricClientDisableNodeOptionalParams): Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: deactivationIntentDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.DeactivationIntentDescription"
            />
          description: Describes the intent or reason for deactivating the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDisableNodeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      disableNode(string, DeactivationIntentDescription,
      ServiceFabricClientDisableNodeOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.disableNode_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableNode(nodeName: string, deactivationIntentDescription:
        DeactivationIntentDescription, options:
        ServiceFabricClientDisableNodeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: deactivationIntentDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.DeactivationIntentDescription"
            />
          description: Describes the intent or reason for deactivating the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDisableNodeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: disablePartitionBackup(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disablePartitionBackup(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      disablePartitionBackup(string,
      ServiceFabricClientDisablePartitionBackupOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup'
    package: '@azure/servicefabric'
    summary: >-
      Disables periodic backup of partition which was previously enabled. Backup
      must be explicitly

      enabled before it can be disabled.

      In case the backup is enabled for the Service Fabric application or
      service, which this

      partition is part of, this partition would continue to be periodically
      backed up as per the

      policy mapped at the higher level entity.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disablePartitionBackup(partitionId: string, options?:
        ServiceFabricClientDisablePartitionBackupOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDisablePartitionBackupOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      disablePartitionBackup(string,
      ServiceFabricClientDisablePartitionBackupOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.disablePartitionBackup_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disablePartitionBackup(partitionId: string, options:
        ServiceFabricClientDisablePartitionBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDisablePartitionBackupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: disableServiceBackup(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.disableServiceBackup_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableServiceBackup(serviceId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      disableServiceBackup(string,
      ServiceFabricClientDisableServiceBackupOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.disableServiceBackup'
    package: '@azure/servicefabric'
    summary: >-
      Disables periodic backup of Service Fabric service which was previously
      enabled. Backup must be

      explicitly enabled before it can be disabled.

      In case the backup is enabled for the Service Fabric application, which
      this service is part of,

      this service would continue to be periodically backed up as per the policy
      mapped at the

      application level.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableServiceBackup(serviceId: string, options?:
        ServiceFabricClientDisableServiceBackupOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDisableServiceBackupOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      disableServiceBackup(string,
      ServiceFabricClientDisableServiceBackupOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.disableServiceBackup_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableServiceBackup(serviceId: string, options:
        ServiceFabricClientDisableServiceBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientDisableServiceBackupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      enableApplicationBackup(string, EnableBackupDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enableApplicationBackup(applicationId: string,
        enableBackupDescription: EnableBackupDescription, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: enableBackupDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.EnableBackupDescription"
            />
          description: Specifies the parameters for enabling backup.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      enableApplicationBackup(string, EnableBackupDescription,
      ServiceFabricClientEnableApplicationBackupOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup'
    package: '@azure/servicefabric'
    summary: >-
      Enables periodic backup of stateful partitions which are part of this
      Service Fabric

      application. Each partition is backed up individually as per the specified
      backup policy

      description.

      Note only C# based Reliable Actor and Reliable Stateful services are
      currently supported for

      periodic backup.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enableApplicationBackup(applicationId: string,
        enableBackupDescription: EnableBackupDescription, options?:
        ServiceFabricClientEnableApplicationBackupOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: enableBackupDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.EnableBackupDescription"
            />
          description: Specifies the parameters for enabling backup.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientEnableApplicationBackupOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      enableApplicationBackup(string, EnableBackupDescription,
      ServiceFabricClientEnableApplicationBackupOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.enableApplicationBackup_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enableApplicationBackup(applicationId: string,
        enableBackupDescription: EnableBackupDescription, options:
        ServiceFabricClientEnableApplicationBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: enableBackupDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.EnableBackupDescription"
            />
          description: Specifies the parameters for enabling backup.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientEnableApplicationBackupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: enableNode(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.enableNode_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function enableNode(nodeName: string, callback: ServiceCallback<void>)'
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: enableNode(string, ServiceFabricClientEnableNodeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.enableNode'
    package: '@azure/servicefabric'
    summary: >-
      Activates a Service Fabric cluster node that is currently deactivated.
      Once activated, the node

      will again become a viable target for placing new replicas, and any
      deactivated replicas

      remaining on the node will be reactivated.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enableNode(nodeName: string, options?:
        ServiceFabricClientEnableNodeOptionalParams): Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientEnableNodeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      enableNode(string, ServiceFabricClientEnableNodeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.enableNode_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enableNode(nodeName: string, options:
        ServiceFabricClientEnableNodeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientEnableNodeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      enablePartitionBackup(string, EnableBackupDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enablePartitionBackup(partitionId: string,
        enableBackupDescription: EnableBackupDescription, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: enableBackupDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.EnableBackupDescription"
            />
          description: Specifies the parameters for enabling backup.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      enablePartitionBackup(string, EnableBackupDescription,
      ServiceFabricClientEnablePartitionBackupOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup'
    package: '@azure/servicefabric'
    summary: >-
      Enables periodic backup of stateful persisted partition. Each partition is
      backed up as per the

      specified backup policy description. In case the application or service,
      which is partition is

      part of, is already enabled for backup then this operation would override
      the policy being used

      to take the periodic backup of this partition.

      Note only C# based Reliable Actor and Reliable Stateful services are
      currently supported for

      periodic backup.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enablePartitionBackup(partitionId: string,
        enableBackupDescription: EnableBackupDescription, options?:
        ServiceFabricClientEnablePartitionBackupOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: enableBackupDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.EnableBackupDescription"
            />
          description: Specifies the parameters for enabling backup.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientEnablePartitionBackupOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      enablePartitionBackup(string, EnableBackupDescription,
      ServiceFabricClientEnablePartitionBackupOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.enablePartitionBackup_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enablePartitionBackup(partitionId: string,
        enableBackupDescription: EnableBackupDescription, options:
        ServiceFabricClientEnablePartitionBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: enableBackupDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.EnableBackupDescription"
            />
          description: Specifies the parameters for enabling backup.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientEnablePartitionBackupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      enableServiceBackup(string, EnableBackupDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.enableServiceBackup_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enableServiceBackup(serviceId: string, enableBackupDescription:
        EnableBackupDescription, callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: enableBackupDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.EnableBackupDescription"
            />
          description: Specifies the parameters for enabling backup.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      enableServiceBackup(string, EnableBackupDescription,
      ServiceFabricClientEnableServiceBackupOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.enableServiceBackup'
    package: '@azure/servicefabric'
    summary: >-
      Enables periodic backup of stateful partitions which are part of this
      Service Fabric service.

      Each partition is backed up individually as per the specified backup
      policy description. In case

      the application, which the service is part of, is already enabled for
      backup then this operation

      would override the policy being used to take the periodic backup for this
      service and its

      partitions (unless explicitly overridden at the partition level).

      Note only C# based Reliable Actor and Reliable Stateful services are
      currently supported for

      periodic backup.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enableServiceBackup(serviceId: string, enableBackupDescription:
        EnableBackupDescription, options?:
        ServiceFabricClientEnableServiceBackupOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: enableBackupDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.EnableBackupDescription"
            />
          description: Specifies the parameters for enabling backup.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientEnableServiceBackupOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      enableServiceBackup(string, EnableBackupDescription,
      ServiceFabricClientEnableServiceBackupOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.enableServiceBackup_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enableServiceBackup(serviceId: string, enableBackupDescription:
        EnableBackupDescription, options:
        ServiceFabricClientEnableServiceBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: enableBackupDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.EnableBackupDescription"
            />
          description: Specifies the parameters for enabling backup.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientEnableServiceBackupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: forceApproveRepairTask(RepairTaskApproveDescription, RequestOptionsBase)
    uid: '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask'
    package: '@azure/servicefabric'
    summary: >-
      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function forceApproveRepairTask(repairTaskApproveDescription:
        RepairTaskApproveDescription, options?: RequestOptionsBase):
        Promise<ForceApproveRepairTaskResponse>
      parameters:
        - id: repairTaskApproveDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskApproveDescription"
            />
          description: Describes the repair task to be approved.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
      return:
        description: Promise<Models.ForceApproveRepairTaskResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.ForceApproveRepairTaskResponse"
          />&gt;
  - name: >-
      forceApproveRepairTask(RepairTaskApproveDescription, RequestOptionsBase,
      ServiceCallback<RepairTaskUpdateInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function forceApproveRepairTask(repairTaskApproveDescription:
        RepairTaskApproveDescription, options: RequestOptionsBase, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTaskApproveDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskApproveDescription"
            />
          description: Describes the repair task to be approved.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateInfo"
            />&gt;
          description: The callback
  - name: >-
      forceApproveRepairTask(RepairTaskApproveDescription,
      ServiceCallback<RepairTaskUpdateInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.forceApproveRepairTask_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function forceApproveRepairTask(repairTaskApproveDescription:
        RepairTaskApproveDescription, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTaskApproveDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskApproveDescription"
            />
          description: Describes the repair task to be approved.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateInfo"
            />&gt;
          description: The callback
  - name: getAadMetadata(ServiceCallback<AadMetadataObject>)
    uid: '@azure/servicefabric.ServiceFabricClient.getAadMetadata_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getAadMetadata(callback: ServiceCallback<AadMetadataObject>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.AadMetadataObject"
            />&gt;
          description: The callback
  - name: getAadMetadata(ServiceFabricClientGetAadMetadataOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getAadMetadata'
    package: '@azure/servicefabric'
    summary: >-
      Gets the Azure Active Directory metadata used for secured connection to
      cluster.

      This API is not supposed to be called separately. It provides information
      needed to set up an

      Azure Active Directory secured connection with a Service Fabric cluster.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAadMetadata(options?:
        ServiceFabricClientGetAadMetadataOptionalParams):
        Promise<GetAadMetadataResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetAadMetadataOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetAadMetadataResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetAadMetadataResponse"
          />&gt;
  - name: >-
      getAadMetadata(ServiceFabricClientGetAadMetadataOptionalParams,
      ServiceCallback<AadMetadataObject>)
    uid: '@azure/servicefabric.ServiceFabricClient.getAadMetadata_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAadMetadata(options:
        ServiceFabricClientGetAadMetadataOptionalParams, callback:
        ServiceCallback<AadMetadataObject>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetAadMetadataOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.AadMetadataObject"
            />&gt;
          description: The callback
  - name: >-
      getAllEntitiesBackedUpByPolicy(string,
      ServiceCallback<PagedBackupEntityList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAllEntitiesBackedUpByPolicy(backupPolicyName: string,
        callback: ServiceCallback<PagedBackupEntityList>)
      parameters:
        - id: backupPolicyName
          type: string
          description: The name of the backup policy.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupEntityList"
            />&gt;
          description: The callback
  - name: >-
      getAllEntitiesBackedUpByPolicy(string,
      ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy'
    package: '@azure/servicefabric'
    summary: >-
      Returns a list of Service Fabric application, service or partition which
      are associated with

      this backup policy.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAllEntitiesBackedUpByPolicy(backupPolicyName: string,
        options?:
        ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams):
        Promise<GetAllEntitiesBackedUpByPolicyResponse>
      parameters:
        - id: backupPolicyName
          type: string
          description: The name of the backup policy.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetAllEntitiesBackedUpByPolicyResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetAllEntitiesBackedUpByPolicyResponse"
          />&gt;
  - name: >-
      getAllEntitiesBackedUpByPolicy(string,
      ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams,
      ServiceCallback<PagedBackupEntityList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getAllEntitiesBackedUpByPolicy_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAllEntitiesBackedUpByPolicy(backupPolicyName: string,
        options:
        ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams,
        callback: ServiceCallback<PagedBackupEntityList>)
      parameters:
        - id: backupPolicyName
          type: string
          description: The name of the backup policy.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetAllEntitiesBackedUpByPolicyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupEntityList"
            />&gt;
          description: The callback
  - name: >-
      getApplicationBackupConfigurationInfo(string,
      ServiceCallback<PagedBackupConfigurationInfoList>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationBackupConfigurationInfo(applicationId: string,
        callback: ServiceCallback<PagedBackupConfigurationInfoList>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupConfigurationInfoList"
            />&gt;
          description: The callback
  - name: >-
      getApplicationBackupConfigurationInfo(string,
      ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo
    package: '@azure/servicefabric'
    summary: >-
      Gets the Service Fabric backup configuration information for the
      application and the services

      and partitions under this application.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationBackupConfigurationInfo(applicationId: string,
        options?:
        ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams):
        Promise<GetApplicationBackupConfigurationInfoResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationBackupConfigurationInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationBackupConfigurationInfoResponse"
          />&gt;
  - name: >-
      getApplicationBackupConfigurationInfo(string,
      ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams,
      ServiceCallback<PagedBackupConfigurationInfoList>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getApplicationBackupConfigurationInfo_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationBackupConfigurationInfo(applicationId: string,
        options:
        ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams,
        callback: ServiceCallback<PagedBackupConfigurationInfoList>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationBackupConfigurationInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupConfigurationInfoList"
            />&gt;
          description: The callback
  - name: getApplicationBackupList(string, ServiceCallback<PagedBackupInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationBackupList(applicationId: string, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupInfoList"
            />&gt;
          description: The callback
  - name: >-
      getApplicationBackupList(string,
      ServiceFabricClientGetApplicationBackupListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList'
    package: '@azure/servicefabric'
    summary: >-
      Returns a list of backups available for every partition in this Service
      Fabric application. The

      server enumerates all the backups available at the backup location
      configured in the backup

      policy. It also allows filtering of the result based on start and end
      datetime or just fetching

      the latest available backup for every partition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationBackupList(applicationId: string, options?:
        ServiceFabricClientGetApplicationBackupListOptionalParams):
        Promise<GetApplicationBackupListResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationBackupListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationBackupListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationBackupListResponse"
          />&gt;
  - name: >-
      getApplicationBackupList(string,
      ServiceFabricClientGetApplicationBackupListOptionalParams,
      ServiceCallback<PagedBackupInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationBackupList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationBackupList(applicationId: string, options:
        ServiceFabricClientGetApplicationBackupListOptionalParams, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationBackupListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupInfoList"
            />&gt;
          description: The callback
  - name: >-
      getApplicationEventList(string, string, string,
      ServiceCallback<ApplicationEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationEventList(applicationId: string, startTimeUtc:
        string, endTimeUtc: string, callback:
        ServiceCallback<ApplicationEventUnion[]>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getApplicationEventList(string, string, string,
      ServiceFabricClientGetApplicationEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationEventList'
    package: '@azure/servicefabric'
    summary: The response is list of ApplicationEvent objects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationEventList(applicationId: string, startTimeUtc:
        string, endTimeUtc: string, options?:
        ServiceFabricClientGetApplicationEventListOptionalParams):
        Promise<GetApplicationEventListResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationEventListResponse"
          />&gt;
  - name: >-
      getApplicationEventList(string, string, string,
      ServiceFabricClientGetApplicationEventListOptionalParams,
      ServiceCallback<ApplicationEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationEventList(applicationId: string, startTimeUtc:
        string, endTimeUtc: string, options:
        ServiceFabricClientGetApplicationEventListOptionalParams, callback:
        ServiceCallback<ApplicationEventUnion[]>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationEventUnion"
            />[]&gt;
          description: The callback
  - name: getApplicationHealth(string, ServiceCallback<ApplicationHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationHealth(applicationId: string, callback:
        ServiceCallback<ApplicationHealth>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationHealth"
            />&gt;
          description: The callback
  - name: >-
      getApplicationHealth(string,
      ServiceFabricClientGetApplicationHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealth'
    package: '@azure/servicefabric'
    summary: >-
      Returns the heath state of the service fabric application. The response
      reports either Ok, Error

      or Warning health state. If the entity is not found in the health store,
      it will return Error.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationHealth(applicationId: string, options?:
        ServiceFabricClientGetApplicationHealthOptionalParams):
        Promise<GetApplicationHealthResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationHealthResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationHealthResponse"
          />&gt;
  - name: >-
      getApplicationHealth(string,
      ServiceFabricClientGetApplicationHealthOptionalParams,
      ServiceCallback<ApplicationHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationHealth(applicationId: string, options:
        ServiceFabricClientGetApplicationHealthOptionalParams, callback:
        ServiceCallback<ApplicationHealth>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationHealth"
            />&gt;
          description: The callback
  - name: >-
      getApplicationHealthUsingPolicy(string,
      ServiceCallback<ApplicationHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationHealthUsingPolicy(applicationId: string,
        callback: ServiceCallback<ApplicationHealth>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationHealth"
            />&gt;
          description: The callback
  - name: >-
      getApplicationHealthUsingPolicy(string,
      ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy'
    package: '@azure/servicefabric'
    summary: >-
      Gets the health of a Service Fabric application. Use
      EventsHealthStateFilter to filter the

      collection of health events reported on the node based on the health
      state. Use

      ClusterHealthPolicies to override the health policies used to evaluate the
      health.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationHealthUsingPolicy(applicationId: string,
        options?:
        ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams):
        Promise<GetApplicationHealthUsingPolicyResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationHealthUsingPolicyResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationHealthUsingPolicyResponse"
          />&gt;
  - name: >-
      getApplicationHealthUsingPolicy(string,
      ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams,
      ServiceCallback<ApplicationHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationHealthUsingPolicy_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationHealthUsingPolicy(applicationId: string, options:
        ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams,
        callback: ServiceCallback<ApplicationHealth>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationHealth"
            />&gt;
          description: The callback
  - name: getApplicationInfo(string, ServiceCallback<ApplicationInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationInfo(applicationId: string, callback:
        ServiceCallback<ApplicationInfo>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationInfo"
            />&gt;
          description: The callback
  - name: >-
      getApplicationInfo(string,
      ServiceFabricClientGetApplicationInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfo'
    package: '@azure/servicefabric'
    summary: >-
      Returns the information about the application that was created or in the
      process of being

      created in the Service Fabric cluster and whose name matches the one
      specified as the parameter.

      The response includes the name, type, status, parameters, and other
      details about the

      application.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationInfo(applicationId: string, options?:
        ServiceFabricClientGetApplicationInfoOptionalParams):
        Promise<GetApplicationInfoResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationInfoResponse"
          />&gt;
  - name: >-
      getApplicationInfo(string,
      ServiceFabricClientGetApplicationInfoOptionalParams,
      ServiceCallback<ApplicationInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationInfo(applicationId: string, options:
        ServiceFabricClientGetApplicationInfoOptionalParams, callback:
        ServiceCallback<ApplicationInfo>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationInfo"
            />&gt;
          description: The callback
  - name: getApplicationInfoList(ServiceCallback<PagedApplicationInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationInfoList(callback:
        ServiceCallback<PagedApplicationInfoList>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedApplicationInfoList"
            />&gt;
          description: The callback
  - name: >-
      getApplicationInfoList(ServiceFabricClientGetApplicationInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList'
    package: '@azure/servicefabric'
    summary: >-
      Gets the information about the applications that were created or in the
      process of being created

      in the Service Fabric cluster and match the specified filters. The
      response includes the name,

      type, status, parameters, and other details about the application. If the
      applications do not

      fit in a page, one page of results is returned as well as a continuation
      token, which can be

      used to get the next page. Filters ApplicationTypeName and
      ApplicationDefinitionKindFilter

      cannot be specified at the same time.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationInfoList(options?:
        ServiceFabricClientGetApplicationInfoListOptionalParams):
        Promise<GetApplicationInfoListResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationInfoListResponse"
          />&gt;
  - name: >-
      getApplicationInfoList(ServiceFabricClientGetApplicationInfoListOptionalParams,
      ServiceCallback<PagedApplicationInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationInfoList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationInfoList(options:
        ServiceFabricClientGetApplicationInfoListOptionalParams, callback:
        ServiceCallback<PagedApplicationInfoList>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedApplicationInfoList"
            />&gt;
          description: The callback
  - name: getApplicationLoadInfo(string, ServiceCallback<ApplicationLoadInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationLoadInfo(applicationId: string, callback:
        ServiceCallback<ApplicationLoadInfo>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationLoadInfo"
            />&gt;
          description: The callback
  - name: >-
      getApplicationLoadInfo(string,
      ServiceFabricClientGetApplicationLoadInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo'
    package: '@azure/servicefabric'
    summary: >-
      Returns the load information about the application that was created or in
      the process of being

      created in the Service Fabric cluster and whose name matches the one
      specified as the parameter.

      The response includes the name, minimum nodes, maximum nodes, the number
      of nodes the

      application is occupying currently, and application load metric
      information about the

      application.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationLoadInfo(applicationId: string, options?:
        ServiceFabricClientGetApplicationLoadInfoOptionalParams):
        Promise<GetApplicationLoadInfoResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationLoadInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationLoadInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationLoadInfoResponse"
          />&gt;
  - name: >-
      getApplicationLoadInfo(string,
      ServiceFabricClientGetApplicationLoadInfoOptionalParams,
      ServiceCallback<ApplicationLoadInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationLoadInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationLoadInfo(applicationId: string, options:
        ServiceFabricClientGetApplicationLoadInfoOptionalParams, callback:
        ServiceCallback<ApplicationLoadInfo>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationLoadInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationLoadInfo"
            />&gt;
          description: The callback
  - name: >-
      getApplicationManifest(string, string,
      ServiceCallback<ApplicationTypeManifest>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationManifest_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationManifest(applicationTypeName: string,
        applicationTypeVersion: string, callback:
        ServiceCallback<ApplicationTypeManifest>)
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: applicationTypeVersion
          type: string
          description: The version of the application type.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationTypeManifest"
            />&gt;
          description: The callback
  - name: >-
      getApplicationManifest(string, string,
      ServiceFabricClientGetApplicationManifestOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationManifest'
    package: '@azure/servicefabric'
    summary: The response contains the application manifest XML as a string.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationManifest(applicationTypeName: string,
        applicationTypeVersion: string, options?:
        ServiceFabricClientGetApplicationManifestOptionalParams):
        Promise<GetApplicationManifestResponse>
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: applicationTypeVersion
          type: string
          description: The version of the application type.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationManifestOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationManifestResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationManifestResponse"
          />&gt;
  - name: >-
      getApplicationManifest(string, string,
      ServiceFabricClientGetApplicationManifestOptionalParams,
      ServiceCallback<ApplicationTypeManifest>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationManifest_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationManifest(applicationTypeName: string,
        applicationTypeVersion: string, options:
        ServiceFabricClientGetApplicationManifestOptionalParams, callback:
        ServiceCallback<ApplicationTypeManifest>)
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: applicationTypeVersion
          type: string
          description: The version of the application type.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationManifestOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationTypeManifest"
            />&gt;
          description: The callback
  - name: getApplicationNameInfo(string, ServiceCallback<ApplicationNameInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationNameInfo(serviceId: string, callback:
        ServiceCallback<ApplicationNameInfo>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationNameInfo"
            />&gt;
          description: The callback
  - name: >-
      getApplicationNameInfo(string,
      ServiceFabricClientGetApplicationNameInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo'
    package: '@azure/servicefabric'
    summary: >-
      Gets the name of the application for the specified service. A 404

      FABRIC_E_SERVICE_DOES_NOT_EXIST error is returned if a service with the
      provided service ID does

      not exist.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationNameInfo(serviceId: string, options?:
        ServiceFabricClientGetApplicationNameInfoOptionalParams):
        Promise<GetApplicationNameInfoResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationNameInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationNameInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationNameInfoResponse"
          />&gt;
  - name: >-
      getApplicationNameInfo(string,
      ServiceFabricClientGetApplicationNameInfoOptionalParams,
      ServiceCallback<ApplicationNameInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationNameInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationNameInfo(serviceId: string, options:
        ServiceFabricClientGetApplicationNameInfoOptionalParams, callback:
        ServiceCallback<ApplicationNameInfo>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationNameInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationNameInfo"
            />&gt;
          description: The callback
  - name: >-
      getApplicationsEventList(string, string,
      ServiceCallback<ApplicationEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationsEventList(startTimeUtc: string, endTimeUtc:
        string, callback: ServiceCallback<ApplicationEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getApplicationsEventList(string, string,
      ServiceFabricClientGetApplicationsEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList'
    package: '@azure/servicefabric'
    summary: The response is list of ApplicationEvent objects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationsEventList(startTimeUtc: string, endTimeUtc:
        string, options?:
        ServiceFabricClientGetApplicationsEventListOptionalParams):
        Promise<GetApplicationsEventListResponse>
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationsEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationsEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationsEventListResponse"
          />&gt;
  - name: >-
      getApplicationsEventList(string, string,
      ServiceFabricClientGetApplicationsEventListOptionalParams,
      ServiceCallback<ApplicationEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationsEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationsEventList(startTimeUtc: string, endTimeUtc:
        string, options:
        ServiceFabricClientGetApplicationsEventListOptionalParams, callback:
        ServiceCallback<ApplicationEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationsEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationEventUnion"
            />[]&gt;
          description: The callback
  - name: getApplicationTypeInfoList(ServiceCallback<PagedApplicationTypeInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationTypeInfoList(callback:
        ServiceCallback<PagedApplicationTypeInfoList>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedApplicationTypeInfoList"
            />&gt;
          description: The callback
  - name: >-
      getApplicationTypeInfoList(ServiceFabricClientGetApplicationTypeInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList'
    package: '@azure/servicefabric'
    summary: >-
      Returns the information about the application types that are provisioned
      or in the process of

      being provisioned in the Service Fabric cluster. Each version of an
      application type is returned

      as one application type. The response includes the name, version, status,
      and other details

      about the application type. This is a paged query, meaning that if not all
      of the application

      types fit in a page, one page of results is returned as well as a
      continuation token, which can

      be used to get the next page. For example, if there are 10 application
      types but a page only

      fits the first three application types, or if max results is set to 3,
      then three is returned.

      To access the rest of the results, retrieve subsequent pages by using the
      returned continuation

      token in the next query. An empty continuation token is returned if there
      are no subsequent

      pages.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationTypeInfoList(options?:
        ServiceFabricClientGetApplicationTypeInfoListOptionalParams):
        Promise<GetApplicationTypeInfoListResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationTypeInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationTypeInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationTypeInfoListResponse"
          />&gt;
  - name: >-
      getApplicationTypeInfoList(ServiceFabricClientGetApplicationTypeInfoListOptionalParams,
      ServiceCallback<PagedApplicationTypeInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationTypeInfoList(options:
        ServiceFabricClientGetApplicationTypeInfoListOptionalParams, callback:
        ServiceCallback<PagedApplicationTypeInfoList>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationTypeInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedApplicationTypeInfoList"
            />&gt;
          description: The callback
  - name: >-
      getApplicationTypeInfoListByName(string,
      ServiceCallback<PagedApplicationTypeInfoList>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationTypeInfoListByName(applicationTypeName: string,
        callback: ServiceCallback<PagedApplicationTypeInfoList>)
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedApplicationTypeInfoList"
            />&gt;
          description: The callback
  - name: >-
      getApplicationTypeInfoListByName(string,
      ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName'
    package: '@azure/servicefabric'
    summary: >-
      Returns the information about the application types that are provisioned
      or in the process of

      being provisioned in the Service Fabric cluster. These results are of
      application types whose

      name match exactly the one specified as the parameter, and which comply
      with the given query

      parameters. All versions of the application type matching the application
      type name are

      returned, with each version returned as one application type. The response
      includes the name,

      version, status, and other details about the application type. This is a
      paged query, meaning

      that if not all of the application types fit in a page, one page of
      results is returned as well

      as a continuation token, which can be used to get the next page. For
      example, if there are 10

      application types but a page only fits the first three application types,
      or if max results is

      set to 3, then three is returned. To access the rest of the results,
      retrieve subsequent pages

      by using the returned continuation token in the next query. An empty
      continuation token is

      returned if there are no subsequent pages.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationTypeInfoListByName(applicationTypeName: string,
        options?:
        ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams):
        Promise<GetApplicationTypeInfoListByNameResponse>
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationTypeInfoListByNameResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationTypeInfoListByNameResponse"
          />&gt;
  - name: >-
      getApplicationTypeInfoListByName(string,
      ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams,
      ServiceCallback<PagedApplicationTypeInfoList>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getApplicationTypeInfoListByName_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationTypeInfoListByName(applicationTypeName: string,
        options:
        ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams,
        callback: ServiceCallback<PagedApplicationTypeInfoList>)
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationTypeInfoListByNameOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedApplicationTypeInfoList"
            />&gt;
          description: The callback
  - name: >-
      getApplicationUpgrade(string,
      ServiceCallback<ApplicationUpgradeProgressInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationUpgrade(applicationId: string, callback:
        ServiceCallback<ApplicationUpgradeProgressInfo>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationUpgradeProgressInfo"
            />&gt;
          description: The callback
  - name: >-
      getApplicationUpgrade(string,
      ServiceFabricClientGetApplicationUpgradeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade'
    package: '@azure/servicefabric'
    summary: >-
      Returns information about the state of the latest application upgrade
      along with details to aid

      debugging application health issues.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationUpgrade(applicationId: string, options?:
        ServiceFabricClientGetApplicationUpgradeOptionalParams):
        Promise<GetApplicationUpgradeResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationUpgradeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetApplicationUpgradeResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetApplicationUpgradeResponse"
          />&gt;
  - name: >-
      getApplicationUpgrade(string,
      ServiceFabricClientGetApplicationUpgradeOptionalParams,
      ServiceCallback<ApplicationUpgradeProgressInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getApplicationUpgrade_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getApplicationUpgrade(applicationId: string, options:
        ServiceFabricClientGetApplicationUpgradeOptionalParams, callback:
        ServiceCallback<ApplicationUpgradeProgressInfo>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetApplicationUpgradeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationUpgradeProgressInfo"
            />&gt;
          description: The callback
  - name: getBackupPolicyByName(string, ServiceCallback<BackupPolicyDescription>)
    uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getBackupPolicyByName(backupPolicyName: string, callback:
        ServiceCallback<BackupPolicyDescription>)
      parameters:
        - id: backupPolicyName
          type: string
          description: The name of the backup policy.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.BackupPolicyDescription"
            />&gt;
          description: The callback
  - name: >-
      getBackupPolicyByName(string,
      ServiceFabricClientGetBackupPolicyByNameOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName'
    package: '@azure/servicefabric'
    summary: Gets a particular backup policy identified by {backupPolicyName}
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getBackupPolicyByName(backupPolicyName: string, options?:
        ServiceFabricClientGetBackupPolicyByNameOptionalParams):
        Promise<GetBackupPolicyByNameResponse>
      parameters:
        - id: backupPolicyName
          type: string
          description: The name of the backup policy.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetBackupPolicyByNameOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetBackupPolicyByNameResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetBackupPolicyByNameResponse"
          />&gt;
  - name: >-
      getBackupPolicyByName(string,
      ServiceFabricClientGetBackupPolicyByNameOptionalParams,
      ServiceCallback<BackupPolicyDescription>)
    uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyByName_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getBackupPolicyByName(backupPolicyName: string, options:
        ServiceFabricClientGetBackupPolicyByNameOptionalParams, callback:
        ServiceCallback<BackupPolicyDescription>)
      parameters:
        - id: backupPolicyName
          type: string
          description: The name of the backup policy.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetBackupPolicyByNameOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.BackupPolicyDescription"
            />&gt;
          description: The callback
  - name: getBackupPolicyList(ServiceCallback<PagedBackupPolicyDescriptionList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getBackupPolicyList(callback:
        ServiceCallback<PagedBackupPolicyDescriptionList>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupPolicyDescriptionList"
            />&gt;
          description: The callback
  - name: getBackupPolicyList(ServiceFabricClientGetBackupPolicyListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList'
    package: '@azure/servicefabric'
    summary: Get a list of all the backup policies configured.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getBackupPolicyList(options?:
        ServiceFabricClientGetBackupPolicyListOptionalParams):
        Promise<GetBackupPolicyListResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetBackupPolicyListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetBackupPolicyListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetBackupPolicyListResponse"
          />&gt;
  - name: >-
      getBackupPolicyList(ServiceFabricClientGetBackupPolicyListOptionalParams,
      ServiceCallback<PagedBackupPolicyDescriptionList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getBackupPolicyList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getBackupPolicyList(options:
        ServiceFabricClientGetBackupPolicyListOptionalParams, callback:
        ServiceCallback<PagedBackupPolicyDescriptionList>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetBackupPolicyListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupPolicyDescriptionList"
            />&gt;
          description: The callback
  - name: >-
      getBackupsFromBackupLocation(GetBackupByStorageQueryDescription,
      ServiceCallback<PagedBackupInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        getBackupsFromBackupLocation(getBackupByStorageQueryDescription:
        GetBackupByStorageQueryDescription, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: getBackupByStorageQueryDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.GetBackupByStorageQueryDescription"
            />
          description: |-
            Describes the filters and backup storage details to be
            used for enumerating backups.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupInfoList"
            />&gt;
          description: The callback
  - name: >-
      getBackupsFromBackupLocation(GetBackupByStorageQueryDescription,
      ServiceFabricClientGetBackupsFromBackupLocationOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation'
    package: '@azure/servicefabric'
    summary: >-
      Gets the list of backups available for the specified backed up entity
      (Application, Service or

      Partition) at the specified backup location (FileShare or Azure Blob
      Storage).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        getBackupsFromBackupLocation(getBackupByStorageQueryDescription:
        GetBackupByStorageQueryDescription, options?:
        ServiceFabricClientGetBackupsFromBackupLocationOptionalParams):
        Promise<GetBackupsFromBackupLocationResponse>
      parameters:
        - id: getBackupByStorageQueryDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.GetBackupByStorageQueryDescription"
            />
          description: |-
            Describes the filters and backup storage details to be
            used for enumerating backups.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetBackupsFromBackupLocationResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetBackupsFromBackupLocationResponse"
          />&gt;
  - name: >-
      getBackupsFromBackupLocation(GetBackupByStorageQueryDescription,
      ServiceFabricClientGetBackupsFromBackupLocationOptionalParams,
      ServiceCallback<PagedBackupInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getBackupsFromBackupLocation_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        getBackupsFromBackupLocation(getBackupByStorageQueryDescription:
        GetBackupByStorageQueryDescription, options:
        ServiceFabricClientGetBackupsFromBackupLocationOptionalParams, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: getBackupByStorageQueryDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.GetBackupByStorageQueryDescription"
            />
          description: |-
            Describes the filters and backup storage details to be
            used for enumerating backups.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetBackupsFromBackupLocationOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupInfoList"
            />&gt;
          description: The callback
  - name: getChaos(ServiceCallback<Chaos>)
    uid: '@azure/servicefabric.ServiceFabricClient.getChaos_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getChaos(callback: ServiceCallback<Chaos>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.Chaos" />&gt;
          description: The callback
  - name: getChaos(ServiceFabricClientGetChaosOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getChaos'
    package: '@azure/servicefabric'
    summary: >-
      Get the status of Chaos indicating whether or not Chaos is running, the
      Chaos parameters used

      for running Chaos and the status of the Chaos Schedule.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getChaos(options?: ServiceFabricClientGetChaosOptionalParams):
        Promise<GetChaosResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetChaosOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetChaosResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetChaosResponse" />&gt;
  - name: >-
      getChaos(ServiceFabricClientGetChaosOptionalParams,
      ServiceCallback<Chaos>)
    uid: '@azure/servicefabric.ServiceFabricClient.getChaos_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getChaos(options: ServiceFabricClientGetChaosOptionalParams,
        callback: ServiceCallback<Chaos>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetChaosOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.Chaos" />&gt;
          description: The callback
  - name: getChaosEvents(ServiceCallback<ChaosEventsSegment>)
    uid: '@azure/servicefabric.ServiceFabricClient.getChaosEvents_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getChaosEvents(callback: ServiceCallback<ChaosEventsSegment>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ChaosEventsSegment"
            />&gt;
          description: The callback
  - name: getChaosEvents(ServiceFabricClientGetChaosEventsOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getChaosEvents'
    package: '@azure/servicefabric'
    summary: >-
      To get the next segment of the Chaos events, you can specify the
      ContinuationToken. To get the

      start of a new segment of Chaos events, you can specify the time range

      through StartTimeUtc and EndTimeUtc. You cannot specify both the
      ContinuationToken and the time

      range in the same call.

      When there are more than 100 Chaos events, the Chaos events are returned
      in multiple segments

      where a segment contains no more than 100 Chaos events and to get the next
      segment you make a

      call to this API with the continuation token.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getChaosEvents(options?:
        ServiceFabricClientGetChaosEventsOptionalParams):
        Promise<GetChaosEventsResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetChaosEventsOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetChaosEventsResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetChaosEventsResponse"
          />&gt;
  - name: >-
      getChaosEvents(ServiceFabricClientGetChaosEventsOptionalParams,
      ServiceCallback<ChaosEventsSegment>)
    uid: '@azure/servicefabric.ServiceFabricClient.getChaosEvents_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getChaosEvents(options:
        ServiceFabricClientGetChaosEventsOptionalParams, callback:
        ServiceCallback<ChaosEventsSegment>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetChaosEventsOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ChaosEventsSegment"
            />&gt;
          description: The callback
  - name: getChaosSchedule(ServiceCallback<ChaosScheduleDescription>)
    uid: '@azure/servicefabric.ServiceFabricClient.getChaosSchedule_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getChaosSchedule(callback:
        ServiceCallback<ChaosScheduleDescription>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ChaosScheduleDescription"
            />&gt;
          description: The callback
  - name: getChaosSchedule(ServiceFabricClientGetChaosScheduleOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getChaosSchedule'
    package: '@azure/servicefabric'
    summary: >-
      Gets the version of the Chaos Schedule in use and the Chaos Schedule that
      defines when and how

      to run Chaos.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getChaosSchedule(options?:
        ServiceFabricClientGetChaosScheduleOptionalParams):
        Promise<GetChaosScheduleResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetChaosScheduleOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetChaosScheduleResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetChaosScheduleResponse"
          />&gt;
  - name: >-
      getChaosSchedule(ServiceFabricClientGetChaosScheduleOptionalParams,
      ServiceCallback<ChaosScheduleDescription>)
    uid: '@azure/servicefabric.ServiceFabricClient.getChaosSchedule_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getChaosSchedule(options:
        ServiceFabricClientGetChaosScheduleOptionalParams, callback:
        ServiceCallback<ChaosScheduleDescription>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetChaosScheduleOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ChaosScheduleDescription"
            />&gt;
          description: The callback
  - name: getClusterConfiguration(string, ServiceCallback<ClusterConfiguration>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterConfiguration(configurationApiVersion: string,
        callback: ServiceCallback<ClusterConfiguration>)
      parameters:
        - id: configurationApiVersion
          type: string
          description: The API version of the Standalone cluster json configuration.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterConfiguration"
            />&gt;
          description: The callback
  - name: >-
      getClusterConfiguration(string,
      ServiceFabricClientGetClusterConfigurationOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration'
    package: '@azure/servicefabric'
    summary: >-
      The cluster configuration contains properties of the cluster that include
      different node types

      on the cluster,

      security configurations, fault, and upgrade domain topologies, etc.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterConfiguration(configurationApiVersion: string,
        options?: ServiceFabricClientGetClusterConfigurationOptionalParams):
        Promise<GetClusterConfigurationResponse>
      parameters:
        - id: configurationApiVersion
          type: string
          description: The API version of the Standalone cluster json configuration.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterConfigurationOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetClusterConfigurationResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetClusterConfigurationResponse"
          />&gt;
  - name: >-
      getClusterConfiguration(string,
      ServiceFabricClientGetClusterConfigurationOptionalParams,
      ServiceCallback<ClusterConfiguration>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterConfiguration_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterConfiguration(configurationApiVersion: string,
        options: ServiceFabricClientGetClusterConfigurationOptionalParams,
        callback: ServiceCallback<ClusterConfiguration>)
      parameters:
        - id: configurationApiVersion
          type: string
          description: The API version of the Standalone cluster json configuration.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterConfigurationOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterConfiguration"
            />&gt;
          description: The callback
  - name: >-
      getClusterConfigurationUpgradeStatus(ServiceCallback<ClusterConfigurationUpgradeStatusInfo>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterConfigurationUpgradeStatus(callback:
        ServiceCallback<ClusterConfigurationUpgradeStatusInfo>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterConfigurationUpgradeStatusInfo"
            />&gt;
          description: The callback
  - name: >-
      getClusterConfigurationUpgradeStatus(ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus
    package: '@azure/servicefabric'
    summary: >-
      Get the cluster configuration upgrade status details of a Service Fabric
      standalone cluster.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterConfigurationUpgradeStatus(options?:
        ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams):
        Promise<GetClusterConfigurationUpgradeStatusResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetClusterConfigurationUpgradeStatusResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetClusterConfigurationUpgradeStatusResponse"
          />&gt;
  - name: >-
      getClusterConfigurationUpgradeStatus(ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams,
      ServiceCallback<ClusterConfigurationUpgradeStatusInfo>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getClusterConfigurationUpgradeStatus_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterConfigurationUpgradeStatus(options:
        ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams,
        callback: ServiceCallback<ClusterConfigurationUpgradeStatusInfo>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterConfigurationUpgradeStatusOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterConfigurationUpgradeStatusInfo"
            />&gt;
          description: The callback
  - name: getClusterEventList(string, string, ServiceCallback<ClusterEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterEventList(startTimeUtc: string, endTimeUtc: string,
        callback: ServiceCallback<ClusterEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getClusterEventList(string, string,
      ServiceFabricClientGetClusterEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterEventList'
    package: '@azure/servicefabric'
    summary: The response is list of ClusterEvent objects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterEventList(startTimeUtc: string, endTimeUtc: string,
        options?: ServiceFabricClientGetClusterEventListOptionalParams):
        Promise<GetClusterEventListResponse>
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetClusterEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetClusterEventListResponse"
          />&gt;
  - name: >-
      getClusterEventList(string, string,
      ServiceFabricClientGetClusterEventListOptionalParams,
      ServiceCallback<ClusterEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterEventList(startTimeUtc: string, endTimeUtc: string,
        options: ServiceFabricClientGetClusterEventListOptionalParams, callback:
        ServiceCallback<ClusterEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterEventUnion"
            />[]&gt;
          description: The callback
  - name: getClusterHealth(ServiceCallback<ClusterHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getClusterHealth(callback: ServiceCallback<ClusterHealth>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterHealth" />&gt;
          description: The callback
  - name: getClusterHealth(ServiceFabricClientGetClusterHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealth'
    package: '@azure/servicefabric'
    summary: >-
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the cluster

      based on the health state.

      Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to
      filter the collection

      of nodes and applications returned based on their aggregated health state.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterHealth(options?:
        ServiceFabricClientGetClusterHealthOptionalParams):
        Promise<GetClusterHealthResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetClusterHealthResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetClusterHealthResponse"
          />&gt;
  - name: >-
      getClusterHealth(ServiceFabricClientGetClusterHealthOptionalParams,
      ServiceCallback<ClusterHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterHealth(options:
        ServiceFabricClientGetClusterHealthOptionalParams, callback:
        ServiceCallback<ClusterHealth>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterHealth" />&gt;
          description: The callback
  - name: getClusterHealthChunk(ServiceCallback<ClusterHealthChunk>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterHealthChunk(callback:
        ServiceCallback<ClusterHealthChunk>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterHealthChunk"
            />&gt;
          description: The callback
  - name: >-
      getClusterHealthChunk(ServiceFabricClientGetClusterHealthChunkOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk'
    package: '@azure/servicefabric'
    summary: >-
      Gets the health of a Service Fabric cluster using health chunks. Includes
      the aggregated health

      state of the cluster, but none of the cluster entities.

      To expand the cluster health and get the health state of all or some of
      the entities, use the

      POST URI and specify the cluster health chunk query description.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterHealthChunk(options?:
        ServiceFabricClientGetClusterHealthChunkOptionalParams):
        Promise<GetClusterHealthChunkResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterHealthChunkOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetClusterHealthChunkResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetClusterHealthChunkResponse"
          />&gt;
  - name: >-
      getClusterHealthChunk(ServiceFabricClientGetClusterHealthChunkOptionalParams,
      ServiceCallback<ClusterHealthChunk>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthChunk_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterHealthChunk(options:
        ServiceFabricClientGetClusterHealthChunkOptionalParams, callback:
        ServiceCallback<ClusterHealthChunk>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterHealthChunkOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterHealthChunk"
            />&gt;
          description: The callback
  - name: >-
      getClusterHealthChunkUsingPolicyAndAdvancedFilters(ServiceCallback<ClusterHealthChunk>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterHealthChunkUsingPolicyAndAdvancedFilters(callback:
        ServiceCallback<ClusterHealthChunk>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterHealthChunk"
            />&gt;
          description: The callback
  - name: >-
      getClusterHealthChunkUsingPolicyAndAdvancedFilters(ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters
    package: '@azure/servicefabric'
    summary: >-
      Gets the health of a Service Fabric cluster using health chunks. The
      health evaluation is done

      based on the input cluster health chunk query description.

      The query description allows users to specify health policies for
      evaluating the cluster and its

      children.

      Users can specify very flexible filters to select which cluster entities
      to return. The

      selection can be done based on the entities health state and based on the
      hierarchy.

      The query can return multi-level children of the entities based on the
      specified filters. For

      example, it can return one application with a specified name, and for this
      application, return

      only services that are in Error or Warning, and all partitions and
      replicas for one of these

      services.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterHealthChunkUsingPolicyAndAdvancedFilters(options?:
        ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams):
        Promise<GetClusterHealthChunkUsingPolicyAndAdvancedFiltersResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams"
            />
          description: The optional parameters
      return:
        description: >-
          Promise<Models.GetClusterHealthChunkUsingPolicyAndAdvancedFiltersResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetClusterHealthChunkUsingPolicyAndAdvancedFiltersResponse"
          />&gt;
  - name: >-
      getClusterHealthChunkUsingPolicyAndAdvancedFilters(ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams,
      ServiceCallback<ClusterHealthChunk>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getClusterHealthChunkUsingPolicyAndAdvancedFilters_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterHealthChunkUsingPolicyAndAdvancedFilters(options:
        ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams,
        callback: ServiceCallback<ClusterHealthChunk>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterHealthChunkUsingPolicyAndAdvancedFiltersOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterHealthChunk"
            />&gt;
          description: The callback
  - name: getClusterHealthUsingPolicy(ServiceCallback<ClusterHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterHealthUsingPolicy(callback:
        ServiceCallback<ClusterHealth>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterHealth" />&gt;
          description: The callback
  - name: >-
      getClusterHealthUsingPolicy(ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy'
    package: '@azure/servicefabric'
    summary: >-
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the cluster

      based on the health state.

      Similarly, use NodesHealthStateFilter and ApplicationsHealthStateFilter to
      filter the collection

      of nodes and applications returned based on their aggregated health state.

      Use ClusterHealthPolicies to override the health policies used to evaluate
      the health.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterHealthUsingPolicy(options?:
        ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams):
        Promise<GetClusterHealthUsingPolicyResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetClusterHealthUsingPolicyResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetClusterHealthUsingPolicyResponse"
          />&gt;
  - name: >-
      getClusterHealthUsingPolicy(ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams,
      ServiceCallback<ClusterHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterHealthUsingPolicy_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterHealthUsingPolicy(options:
        ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams, callback:
        ServiceCallback<ClusterHealth>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterHealth" />&gt;
          description: The callback
  - name: getClusterLoad(ServiceCallback<ClusterLoadInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterLoad_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getClusterLoad(callback: ServiceCallback<ClusterLoadInfo>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterLoadInfo"
            />&gt;
          description: The callback
  - name: getClusterLoad(ServiceFabricClientGetClusterLoadOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterLoad'
    package: '@azure/servicefabric'
    summary: >-
      Retrieves the load information of a Service Fabric cluster for all the
      metrics that have load or

      capacity defined.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterLoad(options?:
        ServiceFabricClientGetClusterLoadOptionalParams):
        Promise<GetClusterLoadResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterLoadOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetClusterLoadResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetClusterLoadResponse"
          />&gt;
  - name: >-
      getClusterLoad(ServiceFabricClientGetClusterLoadOptionalParams,
      ServiceCallback<ClusterLoadInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterLoad_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterLoad(options:
        ServiceFabricClientGetClusterLoadOptionalParams, callback:
        ServiceCallback<ClusterLoadInfo>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterLoadOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterLoadInfo"
            />&gt;
          description: The callback
  - name: getClusterManifest(ServiceCallback<ClusterManifest>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterManifest_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getClusterManifest(callback: ServiceCallback<ClusterManifest>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterManifest"
            />&gt;
          description: The callback
  - name: getClusterManifest(ServiceFabricClientGetClusterManifestOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterManifest'
    package: '@azure/servicefabric'
    summary: >-
      Get the Service Fabric cluster manifest. The cluster manifest contains
      properties of the cluster

      that include different node types on the cluster,

      security configurations, fault, and upgrade domain topologies, etc.


      These properties are specified as part of the ClusterConfig.JSON file
      while deploying a

      stand-alone cluster. However, most of the information in the cluster
      manifest

      is generated internally by service fabric during cluster deployment in
      other deployment

      scenarios (e.g. when using Azure portal).


      The contents of the cluster manifest are for informational purposes only
      and users are not

      expected to take a dependency on the format of the file contents or its
      interpretation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterManifest(options?:
        ServiceFabricClientGetClusterManifestOptionalParams):
        Promise<GetClusterManifestResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterManifestOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetClusterManifestResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetClusterManifestResponse"
          />&gt;
  - name: >-
      getClusterManifest(ServiceFabricClientGetClusterManifestOptionalParams,
      ServiceCallback<ClusterManifest>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterManifest_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterManifest(options:
        ServiceFabricClientGetClusterManifestOptionalParams, callback:
        ServiceCallback<ClusterManifest>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterManifestOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterManifest"
            />&gt;
          description: The callback
  - name: getClusterUpgradeProgress(ServiceCallback<ClusterUpgradeProgressObject>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterUpgradeProgress(callback:
        ServiceCallback<ClusterUpgradeProgressObject>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterUpgradeProgressObject"
            />&gt;
          description: The callback
  - name: >-
      getClusterUpgradeProgress(ServiceFabricClientGetClusterUpgradeProgressOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress'
    package: '@azure/servicefabric'
    summary: >-
      Gets the current progress of the ongoing cluster upgrade. If no upgrade is
      currently in

      progress, get the last state of the previous cluster upgrade.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterUpgradeProgress(options?:
        ServiceFabricClientGetClusterUpgradeProgressOptionalParams):
        Promise<GetClusterUpgradeProgressResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterUpgradeProgressOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetClusterUpgradeProgressResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetClusterUpgradeProgressResponse"
          />&gt;
  - name: >-
      getClusterUpgradeProgress(ServiceFabricClientGetClusterUpgradeProgressOptionalParams,
      ServiceCallback<ClusterUpgradeProgressObject>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterUpgradeProgress_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterUpgradeProgress(options:
        ServiceFabricClientGetClusterUpgradeProgressOptionalParams, callback:
        ServiceCallback<ClusterUpgradeProgressObject>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterUpgradeProgressOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterUpgradeProgressObject"
            />&gt;
          description: The callback
  - name: getClusterVersion(ServiceCallback<ClusterVersion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterVersion_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getClusterVersion(callback: ServiceCallback<ClusterVersion>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterVersion" />&gt;
          description: The callback
  - name: getClusterVersion(ServiceFabricClientGetClusterVersionOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterVersion'
    package: '@azure/servicefabric'
    summary: >-
      If a cluster upgrade is happening, then this API will return the lowest
      (older) version of the

      current and target cluster runtime versions.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterVersion(options?:
        ServiceFabricClientGetClusterVersionOptionalParams):
        Promise<GetClusterVersionResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterVersionOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetClusterVersionResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetClusterVersionResponse"
          />&gt;
  - name: >-
      getClusterVersion(ServiceFabricClientGetClusterVersionOptionalParams,
      ServiceCallback<ClusterVersion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getClusterVersion_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getClusterVersion(options:
        ServiceFabricClientGetClusterVersionOptionalParams, callback:
        ServiceCallback<ClusterVersion>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetClusterVersionOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterVersion" />&gt;
          description: The callback
  - name: >-
      getComposeDeploymentStatus(string,
      ServiceCallback<ComposeDeploymentStatusInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getComposeDeploymentStatus(deploymentName: string, callback:
        ServiceCallback<ComposeDeploymentStatusInfo>)
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ComposeDeploymentStatusInfo"
            />&gt;
          description: The callback
  - name: >-
      getComposeDeploymentStatus(string,
      ServiceFabricClientGetComposeDeploymentStatusOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus'
    package: '@azure/servicefabric'
    summary: >-
      Returns the status of the compose deployment that was created or in the
      process of being created

      in the Service Fabric cluster and whose name matches the one specified as
      the parameter. The

      response includes the name, status, and other details about the
      deployment.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getComposeDeploymentStatus(deploymentName: string, options?:
        ServiceFabricClientGetComposeDeploymentStatusOptionalParams):
        Promise<GetComposeDeploymentStatusResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetComposeDeploymentStatusOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetComposeDeploymentStatusResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetComposeDeploymentStatusResponse"
          />&gt;
  - name: >-
      getComposeDeploymentStatus(string,
      ServiceFabricClientGetComposeDeploymentStatusOptionalParams,
      ServiceCallback<ComposeDeploymentStatusInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatus_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getComposeDeploymentStatus(deploymentName: string, options:
        ServiceFabricClientGetComposeDeploymentStatusOptionalParams, callback:
        ServiceCallback<ComposeDeploymentStatusInfo>)
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetComposeDeploymentStatusOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ComposeDeploymentStatusInfo"
            />&gt;
          description: The callback
  - name: >-
      getComposeDeploymentStatusList(ServiceCallback<PagedComposeDeploymentStatusInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getComposeDeploymentStatusList(callback:
        ServiceCallback<PagedComposeDeploymentStatusInfoList>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedComposeDeploymentStatusInfoList"
            />&gt;
          description: The callback
  - name: >-
      getComposeDeploymentStatusList(ServiceFabricClientGetComposeDeploymentStatusListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList'
    package: '@azure/servicefabric'
    summary: >-
      Gets the status about the compose deployments that were created or in the
      process of being

      created in the Service Fabric cluster. The response includes the name,
      status, and other details

      about the compose deployments. If the list of deployments do not fit in a
      page, one page of

      results is returned as well as a continuation token, which can be used to
      get the next page.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getComposeDeploymentStatusList(options?:
        ServiceFabricClientGetComposeDeploymentStatusListOptionalParams):
        Promise<GetComposeDeploymentStatusListResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetComposeDeploymentStatusListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetComposeDeploymentStatusListResponse"
          />&gt;
  - name: >-
      getComposeDeploymentStatusList(ServiceFabricClientGetComposeDeploymentStatusListOptionalParams,
      ServiceCallback<PagedComposeDeploymentStatusInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getComposeDeploymentStatusList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getComposeDeploymentStatusList(options:
        ServiceFabricClientGetComposeDeploymentStatusListOptionalParams,
        callback: ServiceCallback<PagedComposeDeploymentStatusInfoList>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetComposeDeploymentStatusListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedComposeDeploymentStatusInfoList"
            />&gt;
          description: The callback
  - name: >-
      getComposeDeploymentUpgradeProgress(string,
      ServiceCallback<ComposeDeploymentUpgradeProgressInfo>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getComposeDeploymentUpgradeProgress(deploymentName: string,
        callback: ServiceCallback<ComposeDeploymentUpgradeProgressInfo>)
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ComposeDeploymentUpgradeProgressInfo"
            />&gt;
          description: The callback
  - name: >-
      getComposeDeploymentUpgradeProgress(string,
      ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress
    package: '@azure/servicefabric'
    summary: >-
      Returns the information about the state of the compose deployment upgrade
      along with details to

      aid debugging application health issues.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getComposeDeploymentUpgradeProgress(deploymentName: string,
        options?:
        ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams):
        Promise<GetComposeDeploymentUpgradeProgressResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetComposeDeploymentUpgradeProgressResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetComposeDeploymentUpgradeProgressResponse"
          />&gt;
  - name: >-
      getComposeDeploymentUpgradeProgress(string,
      ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams,
      ServiceCallback<ComposeDeploymentUpgradeProgressInfo>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getComposeDeploymentUpgradeProgress_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getComposeDeploymentUpgradeProgress(deploymentName: string,
        options:
        ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams,
        callback: ServiceCallback<ComposeDeploymentUpgradeProgressInfo>)
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetComposeDeploymentUpgradeProgressOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ComposeDeploymentUpgradeProgressInfo"
            />&gt;
          description: The callback
  - name: >-
      getConfigurationOverrides(string,
      ServiceCallback<ConfigParameterOverride[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getConfigurationOverrides_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getConfigurationOverrides(nodeName: string, callback:
        ServiceCallback<ConfigParameterOverride[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ConfigParameterOverride"
            />[]&gt;
          description: The callback
  - name: >-
      getConfigurationOverrides(string,
      ServiceFabricClientGetConfigurationOverridesOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getConfigurationOverrides'
    package: '@azure/servicefabric'
    summary: >-
      This api allows getting all existing configuration overrides on the
      specified node.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getConfigurationOverrides(nodeName: string, options?:
        ServiceFabricClientGetConfigurationOverridesOptionalParams):
        Promise<GetConfigurationOverridesResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetConfigurationOverridesOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetConfigurationOverridesResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetConfigurationOverridesResponse"
          />&gt;
  - name: >-
      getConfigurationOverrides(string,
      ServiceFabricClientGetConfigurationOverridesOptionalParams,
      ServiceCallback<ConfigParameterOverride[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getConfigurationOverrides_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getConfigurationOverrides(nodeName: string, options:
        ServiceFabricClientGetConfigurationOverridesOptionalParams, callback:
        ServiceCallback<ConfigParameterOverride[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetConfigurationOverridesOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ConfigParameterOverride"
            />[]&gt;
          description: The callback
  - name: >-
      getContainerLogsDeployedOnNode(string, string, string, string,
      ServiceCallback<ContainerLogs>)
    uid: '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getContainerLogsDeployedOnNode(nodeName: string, applicationId:
        string, serviceManifestName: string, codePackageName: string, callback:
        ServiceCallback<ContainerLogs>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceManifestName
          type: string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: codePackageName
          type: string
          description: >-
            The name of code package specified in service manifest registered as
            part

            of an application type in a Service Fabric cluster.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ContainerLogs" />&gt;
          description: The callback
  - name: >-
      getContainerLogsDeployedOnNode(string, string, string, string,
      ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode'
    package: '@azure/servicefabric'
    summary: >-
      Gets the container logs for container deployed on a Service Fabric node
      for the given code

      package.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getContainerLogsDeployedOnNode(nodeName: string, applicationId:
        string, serviceManifestName: string, codePackageName: string, options?:
        ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams):
        Promise<GetContainerLogsDeployedOnNodeResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceManifestName
          type: string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: codePackageName
          type: string
          description: >-
            The name of code package specified in service manifest registered as
            part

            of an application type in a Service Fabric cluster.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetContainerLogsDeployedOnNodeResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetContainerLogsDeployedOnNodeResponse"
          />&gt;
  - name: >-
      getContainerLogsDeployedOnNode(string, string, string, string,
      ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams,
      ServiceCallback<ContainerLogs>)
    uid: '@azure/servicefabric.ServiceFabricClient.getContainerLogsDeployedOnNode_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getContainerLogsDeployedOnNode(nodeName: string, applicationId:
        string, serviceManifestName: string, codePackageName: string, options:
        ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams,
        callback: ServiceCallback<ContainerLogs>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceManifestName
          type: string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: codePackageName
          type: string
          description: >-
            The name of code package specified in service manifest registered as
            part

            of an application type in a Service Fabric cluster.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetContainerLogsDeployedOnNodeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ContainerLogs" />&gt;
          description: The callback
  - name: >-
      getContainersEventList(string, string,
      ServiceCallback<ContainerInstanceEvent[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getContainersEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getContainersEventList(startTimeUtc: string, endTimeUtc:
        string, callback: ServiceCallback<ContainerInstanceEvent[]>)
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ContainerInstanceEvent"
            />[]&gt;
          description: The callback
  - name: >-
      getContainersEventList(string, string,
      ServiceFabricClientGetContainersEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getContainersEventList'
    package: '@azure/servicefabric'
    summary: The response is list of ContainerInstanceEvent objects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getContainersEventList(startTimeUtc: string, endTimeUtc:
        string, options?:
        ServiceFabricClientGetContainersEventListOptionalParams):
        Promise<GetContainersEventListResponse>
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetContainersEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetContainersEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetContainersEventListResponse"
          />&gt;
  - name: >-
      getContainersEventList(string, string,
      ServiceFabricClientGetContainersEventListOptionalParams,
      ServiceCallback<ContainerInstanceEvent[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getContainersEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getContainersEventList(startTimeUtc: string, endTimeUtc:
        string, options:
        ServiceFabricClientGetContainersEventListOptionalParams, callback:
        ServiceCallback<ContainerInstanceEvent[]>)
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetContainersEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ContainerInstanceEvent"
            />[]&gt;
          description: The callback
  - name: getCorrelatedEventList(string, ServiceCallback<FabricEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCorrelatedEventList(eventInstanceId: string, callback:
        ServiceCallback<FabricEventUnion[]>)
      parameters:
        - id: eventInstanceId
          type: string
          description: The EventInstanceId.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.FabricEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getCorrelatedEventList(string,
      ServiceFabricClientGetCorrelatedEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList'
    package: '@azure/servicefabric'
    summary: The response is list of FabricEvents.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCorrelatedEventList(eventInstanceId: string, options?:
        ServiceFabricClientGetCorrelatedEventListOptionalParams):
        Promise<GetCorrelatedEventListResponse>
      parameters:
        - id: eventInstanceId
          type: string
          description: The EventInstanceId.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetCorrelatedEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetCorrelatedEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetCorrelatedEventListResponse"
          />&gt;
  - name: >-
      getCorrelatedEventList(string,
      ServiceFabricClientGetCorrelatedEventListOptionalParams,
      ServiceCallback<FabricEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getCorrelatedEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCorrelatedEventList(eventInstanceId: string, options:
        ServiceFabricClientGetCorrelatedEventListOptionalParams, callback:
        ServiceCallback<FabricEventUnion[]>)
      parameters:
        - id: eventInstanceId
          type: string
          description: The EventInstanceId.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetCorrelatedEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.FabricEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getDataLossProgress(string, string, string,
      ServiceCallback<PartitionDataLossProgress>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDataLossProgress_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDataLossProgress(serviceId: string, partitionId: string,
        operationId: string, callback:
        ServiceCallback<PartitionDataLossProgress>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionDataLossProgress"
            />&gt;
          description: The callback
  - name: >-
      getDataLossProgress(string, string, string,
      ServiceFabricClientGetDataLossProgressOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getDataLossProgress'
    package: '@azure/servicefabric'
    summary: >-
      Gets the progress of a data loss operation started with StartDataLoss,
      using the OperationId.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDataLossProgress(serviceId: string, partitionId: string,
        operationId: string, options?:
        ServiceFabricClientGetDataLossProgressOptionalParams):
        Promise<GetDataLossProgressResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDataLossProgressOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDataLossProgressResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDataLossProgressResponse"
          />&gt;
  - name: >-
      getDataLossProgress(string, string, string,
      ServiceFabricClientGetDataLossProgressOptionalParams,
      ServiceCallback<PartitionDataLossProgress>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDataLossProgress_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDataLossProgress(serviceId: string, partitionId: string,
        operationId: string, options:
        ServiceFabricClientGetDataLossProgressOptionalParams, callback:
        ServiceCallback<PartitionDataLossProgress>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDataLossProgressOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionDataLossProgress"
            />&gt;
          description: The callback
  - name: >-
      getDeployedApplicationHealth(string, string,
      ServiceCallback<DeployedApplicationHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedApplicationHealth(nodeName: string, applicationId:
        string, callback: ServiceCallback<DeployedApplicationHealth>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedApplicationHealth"
            />&gt;
          description: The callback
  - name: >-
      getDeployedApplicationHealth(string, string,
      ServiceFabricClientGetDeployedApplicationHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth'
    package: '@azure/servicefabric'
    summary: >-
      Gets the information about health of an application deployed on a Service
      Fabric node. Use

      EventsHealthStateFilter to optionally filter for the collection of
      HealthEvent objects reported

      on the deployed application based on health state. Use
      DeployedServicePackagesHealthStateFilter

      to optionally filter for DeployedServicePackageHealth children based on
      health state.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedApplicationHealth(nodeName: string, applicationId:
        string, options?:
        ServiceFabricClientGetDeployedApplicationHealthOptionalParams):
        Promise<GetDeployedApplicationHealthResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedApplicationHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedApplicationHealthResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedApplicationHealthResponse"
          />&gt;
  - name: >-
      getDeployedApplicationHealth(string, string,
      ServiceFabricClientGetDeployedApplicationHealthOptionalParams,
      ServiceCallback<DeployedApplicationHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedApplicationHealth(nodeName: string, applicationId:
        string, options:
        ServiceFabricClientGetDeployedApplicationHealthOptionalParams, callback:
        ServiceCallback<DeployedApplicationHealth>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedApplicationHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedApplicationHealth"
            />&gt;
          description: The callback
  - name: >-
      getDeployedApplicationHealthUsingPolicy(string, string,
      ServiceCallback<DeployedApplicationHealth>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedApplicationHealthUsingPolicy(nodeName: string,
        applicationId: string, callback:
        ServiceCallback<DeployedApplicationHealth>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedApplicationHealth"
            />&gt;
          description: The callback
  - name: >-
      getDeployedApplicationHealthUsingPolicy(string, string,
      ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy
    package: '@azure/servicefabric'
    summary: >-
      Gets the information about health of an application deployed on a Service
      Fabric node using the

      specified policy. Use EventsHealthStateFilter to optionally filter for the
      collection of

      HealthEvent objects reported on the deployed application based on health
      state. Use

      DeployedServicePackagesHealthStateFilter to optionally filter for
      DeployedServicePackageHealth

      children based on health state. Use ApplicationHealthPolicy to optionally
      override the health

      policies used to evaluate the health. This API only uses
      'ConsiderWarningAsError' field of the

      ApplicationHealthPolicy. The rest of the fields are ignored while
      evaluating the health of the

      deployed application.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedApplicationHealthUsingPolicy(nodeName: string,
        applicationId: string, options?:
        ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams):
        Promise<GetDeployedApplicationHealthUsingPolicyResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedApplicationHealthUsingPolicyResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedApplicationHealthUsingPolicyResponse"
          />&gt;
  - name: >-
      getDeployedApplicationHealthUsingPolicy(string, string,
      ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams,
      ServiceCallback<DeployedApplicationHealth>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedApplicationHealthUsingPolicy_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedApplicationHealthUsingPolicy(nodeName: string,
        applicationId: string, options:
        ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams,
        callback: ServiceCallback<DeployedApplicationHealth>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedApplicationHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedApplicationHealth"
            />&gt;
          description: The callback
  - name: >-
      getDeployedApplicationInfo(string, string,
      ServiceCallback<DeployedApplicationInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedApplicationInfo(nodeName: string, applicationId:
        string, callback: ServiceCallback<DeployedApplicationInfo>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedApplicationInfo"
            />&gt;
          description: The callback
  - name: >-
      getDeployedApplicationInfo(string, string,
      ServiceFabricClientGetDeployedApplicationInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo'
    package: '@azure/servicefabric'
    summary: >-
      This query returns system application information if the application ID
      provided is for system

      application. Results encompass deployed applications in active,
      activating, and downloading

      states. This query requires that the node name corresponds to a node on
      the cluster. The query

      fails if the provided node name does not point to any active Service
      Fabric nodes on the

      cluster.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedApplicationInfo(nodeName: string, applicationId:
        string, options?:
        ServiceFabricClientGetDeployedApplicationInfoOptionalParams):
        Promise<GetDeployedApplicationInfoResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedApplicationInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedApplicationInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedApplicationInfoResponse"
          />&gt;
  - name: >-
      getDeployedApplicationInfo(string, string,
      ServiceFabricClientGetDeployedApplicationInfoOptionalParams,
      ServiceCallback<DeployedApplicationInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedApplicationInfo(nodeName: string, applicationId:
        string, options:
        ServiceFabricClientGetDeployedApplicationInfoOptionalParams, callback:
        ServiceCallback<DeployedApplicationInfo>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedApplicationInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedApplicationInfo"
            />&gt;
          description: The callback
  - name: >-
      getDeployedApplicationInfoList(string,
      ServiceCallback<PagedDeployedApplicationInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedApplicationInfoList(nodeName: string, callback:
        ServiceCallback<PagedDeployedApplicationInfoList>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedDeployedApplicationInfoList"
            />&gt;
          description: The callback
  - name: >-
      getDeployedApplicationInfoList(string,
      ServiceFabricClientGetDeployedApplicationInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList'
    package: '@azure/servicefabric'
    summary: >-
      Gets the list of applications deployed on a Service Fabric node. The
      results do not include

      information about deployed system applications unless explicitly queried
      for by ID. Results

      encompass deployed applications in active, activating, and downloading
      states. This query

      requires that the node name corresponds to a node on the cluster. The
      query fails if the

      provided node name does not point to any active Service Fabric nodes on
      the cluster.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedApplicationInfoList(nodeName: string, options?:
        ServiceFabricClientGetDeployedApplicationInfoListOptionalParams):
        Promise<GetDeployedApplicationInfoListResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedApplicationInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedApplicationInfoListResponse"
          />&gt;
  - name: >-
      getDeployedApplicationInfoList(string,
      ServiceFabricClientGetDeployedApplicationInfoListOptionalParams,
      ServiceCallback<PagedDeployedApplicationInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedApplicationInfoList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedApplicationInfoList(nodeName: string, options:
        ServiceFabricClientGetDeployedApplicationInfoListOptionalParams,
        callback: ServiceCallback<PagedDeployedApplicationInfoList>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedApplicationInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedDeployedApplicationInfoList"
            />&gt;
          description: The callback
  - name: >-
      getDeployedCodePackageInfoList(string, string,
      ServiceCallback<DeployedCodePackageInfo[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedCodePackageInfoList(nodeName: string, applicationId:
        string, callback: ServiceCallback<DeployedCodePackageInfo[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedCodePackageInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getDeployedCodePackageInfoList(string, string,
      ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList'
    package: '@azure/servicefabric'
    summary: >-
      Gets the list of code packages deployed on a Service Fabric node for the
      given application.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedCodePackageInfoList(nodeName: string, applicationId:
        string, options?:
        ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams):
        Promise<GetDeployedCodePackageInfoListResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedCodePackageInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedCodePackageInfoListResponse"
          />&gt;
  - name: >-
      getDeployedCodePackageInfoList(string, string,
      ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams,
      ServiceCallback<DeployedCodePackageInfo[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedCodePackageInfoList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedCodePackageInfoList(nodeName: string, applicationId:
        string, options:
        ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams,
        callback: ServiceCallback<DeployedCodePackageInfo[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedCodePackageInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedCodePackageInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getDeployedServicePackageHealth(string, string, string,
      ServiceCallback<DeployedServicePackageHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServicePackageHealth(nodeName: string,
        applicationId: string, servicePackageName: string, callback:
        ServiceCallback<DeployedServicePackageHealth>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type: string
          description: The name of the service package.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServicePackageHealth"
            />&gt;
          description: The callback
  - name: >-
      getDeployedServicePackageHealth(string, string, string,
      ServiceFabricClientGetDeployedServicePackageHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth'
    package: '@azure/servicefabric'
    summary: >-
      Gets the information about health of a service package for a specific
      application deployed on a

      Service Fabric node. Use EventsHealthStateFilter to optionally filter for
      the collection of

      HealthEvent objects reported on the deployed service package based on
      health state.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServicePackageHealth(nodeName: string,
        applicationId: string, servicePackageName: string, options?:
        ServiceFabricClientGetDeployedServicePackageHealthOptionalParams):
        Promise<GetDeployedServicePackageHealthResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type: string
          description: The name of the service package.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedServicePackageHealthResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedServicePackageHealthResponse"
          />&gt;
  - name: >-
      getDeployedServicePackageHealth(string, string, string,
      ServiceFabricClientGetDeployedServicePackageHealthOptionalParams,
      ServiceCallback<DeployedServicePackageHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServicePackageHealth(nodeName: string,
        applicationId: string, servicePackageName: string, options:
        ServiceFabricClientGetDeployedServicePackageHealthOptionalParams,
        callback: ServiceCallback<DeployedServicePackageHealth>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type: string
          description: The name of the service package.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServicePackageHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServicePackageHealth"
            />&gt;
          description: The callback
  - name: >-
      getDeployedServicePackageHealthUsingPolicy(string, string, string,
      ServiceCallback<DeployedServicePackageHealth>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServicePackageHealthUsingPolicy(nodeName: string,
        applicationId: string, servicePackageName: string, callback:
        ServiceCallback<DeployedServicePackageHealth>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type: string
          description: The name of the service package.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServicePackageHealth"
            />&gt;
          description: The callback
  - name: >-
      getDeployedServicePackageHealthUsingPolicy(string, string, string,
      ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy
    package: '@azure/servicefabric'
    summary: >-
      Gets the information about health of a service package for a specific
      application deployed on a

      Service Fabric node. using the specified policy. Use
      EventsHealthStateFilter to optionally

      filter for the collection of HealthEvent objects reported on the deployed
      service package based

      on health state. Use ApplicationHealthPolicy to optionally override the
      health policies used to

      evaluate the health. This API only uses 'ConsiderWarningAsError' field of
      the

      ApplicationHealthPolicy. The rest of the fields are ignored while
      evaluating the health of the

      deployed service package.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServicePackageHealthUsingPolicy(nodeName: string,
        applicationId: string, servicePackageName: string, options?:
        ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams):
        Promise<GetDeployedServicePackageHealthUsingPolicyResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type: string
          description: The name of the service package.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedServicePackageHealthUsingPolicyResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedServicePackageHealthUsingPolicyResponse"
          />&gt;
  - name: >-
      getDeployedServicePackageHealthUsingPolicy(string, string, string,
      ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams,
      ServiceCallback<DeployedServicePackageHealth>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageHealthUsingPolicy_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServicePackageHealthUsingPolicy(nodeName: string,
        applicationId: string, servicePackageName: string, options:
        ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams,
        callback: ServiceCallback<DeployedServicePackageHealth>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type: string
          description: The name of the service package.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServicePackageHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServicePackageHealth"
            />&gt;
          description: The callback
  - name: >-
      getDeployedServicePackageInfoList(string, string,
      ServiceCallback<DeployedServicePackageInfo[]>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServicePackageInfoList(nodeName: string,
        applicationId: string, callback:
        ServiceCallback<DeployedServicePackageInfo[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServicePackageInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getDeployedServicePackageInfoList(string, string,
      ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList'
    package: '@azure/servicefabric'
    summary: >-
      Returns the information about the service packages deployed on a Service
      Fabric node for the

      given application.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServicePackageInfoList(nodeName: string,
        applicationId: string, options?:
        ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams):
        Promise<GetDeployedServicePackageInfoListResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedServicePackageInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedServicePackageInfoListResponse"
          />&gt;
  - name: >-
      getDeployedServicePackageInfoList(string, string,
      ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams,
      ServiceCallback<DeployedServicePackageInfo[]>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoList_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServicePackageInfoList(nodeName: string,
        applicationId: string, options:
        ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams,
        callback: ServiceCallback<DeployedServicePackageInfo[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServicePackageInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServicePackageInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getDeployedServicePackageInfoListByName(string, string, string,
      ServiceCallback<DeployedServicePackageInfo[]>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServicePackageInfoListByName(nodeName: string,
        applicationId: string, servicePackageName: string, callback:
        ServiceCallback<DeployedServicePackageInfo[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type: string
          description: The name of the service package.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServicePackageInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getDeployedServicePackageInfoListByName(string, string, string,
      ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName
    package: '@azure/servicefabric'
    summary: >-
      Returns the information about the service packages deployed on a Service
      Fabric node for the

      given application. These results are of service packages whose name match
      exactly the service

      package name specified as the parameter.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServicePackageInfoListByName(nodeName: string,
        applicationId: string, servicePackageName: string, options?:
        ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams):
        Promise<GetDeployedServicePackageInfoListByNameResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type: string
          description: The name of the service package.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedServicePackageInfoListByNameResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedServicePackageInfoListByNameResponse"
          />&gt;
  - name: >-
      getDeployedServicePackageInfoListByName(string, string, string,
      ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams,
      ServiceCallback<DeployedServicePackageInfo[]>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServicePackageInfoListByName_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServicePackageInfoListByName(nodeName: string,
        applicationId: string, servicePackageName: string, options:
        ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams,
        callback: ServiceCallback<DeployedServicePackageInfo[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type: string
          description: The name of the service package.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServicePackageInfoListByNameOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServicePackageInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getDeployedServiceReplicaDetailInfo(string, string, string,
      ServiceCallback<DeployedServiceReplicaDetailInfoUnion>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceReplicaDetailInfo(nodeName: string,
        partitionId: string, replicaId: string, callback:
        ServiceCallback<DeployedServiceReplicaDetailInfoUnion>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServiceReplicaDetailInfoUnion"
            />&gt;
          description: The callback
  - name: >-
      getDeployedServiceReplicaDetailInfo(string, string, string,
      ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo
    package: '@azure/servicefabric'
    summary: >-
      Gets the details of the replica deployed on a Service Fabric node. The
      information includes

      service kind, service name, current service operation, current service
      operation start date

      time, partition ID, replica/instance ID, reported load, and other
      information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceReplicaDetailInfo(nodeName: string,
        partitionId: string, replicaId: string, options?:
        ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams):
        Promise<GetDeployedServiceReplicaDetailInfoResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedServiceReplicaDetailInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedServiceReplicaDetailInfoResponse"
          />&gt;
  - name: >-
      getDeployedServiceReplicaDetailInfo(string, string, string,
      ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams,
      ServiceCallback<DeployedServiceReplicaDetailInfoUnion>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfo_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceReplicaDetailInfo(nodeName: string,
        partitionId: string, replicaId: string, options:
        ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams,
        callback: ServiceCallback<DeployedServiceReplicaDetailInfoUnion>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServiceReplicaDetailInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServiceReplicaDetailInfoUnion"
            />&gt;
          description: The callback
  - name: >-
      getDeployedServiceReplicaDetailInfoByPartitionId(string, string,
      ServiceCallback<DeployedServiceReplicaDetailInfoUnion>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceReplicaDetailInfoByPartitionId(nodeName:
        string, partitionId: string, callback:
        ServiceCallback<DeployedServiceReplicaDetailInfoUnion>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServiceReplicaDetailInfoUnion"
            />&gt;
          description: The callback
  - name: >-
      getDeployedServiceReplicaDetailInfoByPartitionId(string, string,
      ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId
    package: '@azure/servicefabric'
    summary: >-
      Gets the details of the replica deployed on a Service Fabric node. The
      information includes

      service kind, service name, current service operation, current service
      operation start date

      time, partition ID, replica/instance ID, reported load, and other
      information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceReplicaDetailInfoByPartitionId(nodeName:
        string, partitionId: string, options?:
        ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams):
        Promise<GetDeployedServiceReplicaDetailInfoByPartitionIdResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams"
            />
          description: The optional parameters
      return:
        description: >-
          Promise<Models.GetDeployedServiceReplicaDetailInfoByPartitionIdResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedServiceReplicaDetailInfoByPartitionIdResponse"
          />&gt;
  - name: >-
      getDeployedServiceReplicaDetailInfoByPartitionId(string, string,
      ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams,
      ServiceCallback<DeployedServiceReplicaDetailInfoUnion>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaDetailInfoByPartitionId_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceReplicaDetailInfoByPartitionId(nodeName:
        string, partitionId: string, options:
        ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams,
        callback: ServiceCallback<DeployedServiceReplicaDetailInfoUnion>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServiceReplicaDetailInfoByPartitionIdOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServiceReplicaDetailInfoUnion"
            />&gt;
          description: The callback
  - name: >-
      getDeployedServiceReplicaInfoList(string, string,
      ServiceCallback<DeployedServiceReplicaInfoUnion[]>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceReplicaInfoList(nodeName: string,
        applicationId: string, callback:
        ServiceCallback<DeployedServiceReplicaInfoUnion[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServiceReplicaInfoUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getDeployedServiceReplicaInfoList(string, string,
      ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList'
    package: '@azure/servicefabric'
    summary: >-
      Gets the list containing the information about replicas deployed on a
      Service Fabric node. The

      information include partition ID, replica ID, status of the replica, name
      of the service, name

      of the service type, and other information. Use PartitionId or
      ServiceManifestName query

      parameters to return information about the deployed replicas matching the
      specified values for

      those parameters.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceReplicaInfoList(nodeName: string,
        applicationId: string, options?:
        ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams):
        Promise<GetDeployedServiceReplicaInfoListResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedServiceReplicaInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedServiceReplicaInfoListResponse"
          />&gt;
  - name: >-
      getDeployedServiceReplicaInfoList(string, string,
      ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams,
      ServiceCallback<DeployedServiceReplicaInfoUnion[]>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceReplicaInfoList_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceReplicaInfoList(nodeName: string,
        applicationId: string, options:
        ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams,
        callback: ServiceCallback<DeployedServiceReplicaInfoUnion[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServiceReplicaInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServiceReplicaInfoUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getDeployedServiceTypeInfoByName(string, string, string,
      ServiceCallback<DeployedServiceTypeInfo[]>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceTypeInfoByName(nodeName: string,
        applicationId: string, serviceTypeName: string, callback:
        ServiceCallback<DeployedServiceTypeInfo[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceTypeName
          type: string
          description: Specifies the name of a Service Fabric service type.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServiceTypeInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getDeployedServiceTypeInfoByName(string, string, string,
      ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName'
    package: '@azure/servicefabric'
    summary: >-
      Gets the list containing the information about a specific service type
      from the applications

      deployed on a node in a Service Fabric cluster. The response includes the
      name of the service

      type, its registration status, the code package that registered it and
      activation ID of the

      service package. Each entry represents one activation of a service type,
      differentiated by the

      activation ID.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceTypeInfoByName(nodeName: string,
        applicationId: string, serviceTypeName: string, options?:
        ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams):
        Promise<GetDeployedServiceTypeInfoByNameResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceTypeName
          type: string
          description: Specifies the name of a Service Fabric service type.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedServiceTypeInfoByNameResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedServiceTypeInfoByNameResponse"
          />&gt;
  - name: >-
      getDeployedServiceTypeInfoByName(string, string, string,
      ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams,
      ServiceCallback<DeployedServiceTypeInfo[]>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoByName_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceTypeInfoByName(nodeName: string,
        applicationId: string, serviceTypeName: string, options:
        ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams,
        callback: ServiceCallback<DeployedServiceTypeInfo[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceTypeName
          type: string
          description: Specifies the name of a Service Fabric service type.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServiceTypeInfoByNameOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServiceTypeInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getDeployedServiceTypeInfoList(string, string,
      ServiceCallback<DeployedServiceTypeInfo[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceTypeInfoList(nodeName: string, applicationId:
        string, callback: ServiceCallback<DeployedServiceTypeInfo[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServiceTypeInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getDeployedServiceTypeInfoList(string, string,
      ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList'
    package: '@azure/servicefabric'
    summary: >-
      Gets the list containing the information about service types from the
      applications deployed on a

      node in a Service Fabric cluster. The response includes the name of the
      service type, its

      registration status, the code package that registered it and activation ID
      of the service

      package.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceTypeInfoList(nodeName: string, applicationId:
        string, options?:
        ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams):
        Promise<GetDeployedServiceTypeInfoListResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetDeployedServiceTypeInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetDeployedServiceTypeInfoListResponse"
          />&gt;
  - name: >-
      getDeployedServiceTypeInfoList(string, string,
      ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams,
      ServiceCallback<DeployedServiceTypeInfo[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getDeployedServiceTypeInfoList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDeployedServiceTypeInfoList(nodeName: string, applicationId:
        string, options:
        ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams,
        callback: ServiceCallback<DeployedServiceTypeInfo[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetDeployedServiceTypeInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.DeployedServiceTypeInfo"
            />[]&gt;
          description: The callback
  - name: getFaultOperationList(number, number, ServiceCallback<OperationStatus[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getFaultOperationList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFaultOperationList(typeFilter: number, stateFilter: number,
        callback: ServiceCallback<OperationStatus[]>)
      parameters:
        - id: typeFilter
          type: number
          description: |-
            Used to filter on OperationType for user-induced operations.

            - 65535 - select all
            - 1 - select PartitionDataLoss.
            - 2 - select PartitionQuorumLoss.
            - 4 - select PartitionRestart.
            - 8 - select NodeTransition.
        - id: stateFilter
          type: number
          description: |-
            Used to filter on OperationState's for user-induced operations.

            - 65535 - select All
            - 1 - select Running
            - 2 - select RollingBack
            - 8 - select Completed
            - 16 - select Faulted
            - 32 - select Cancelled
            - 64 - select ForceCancelled
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.OperationStatus"
            />[]&gt;
          description: The callback
  - name: >-
      getFaultOperationList(number, number,
      ServiceFabricClientGetFaultOperationListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getFaultOperationList'
    package: '@azure/servicefabric'
    summary: Gets the list of user-induced fault operations filtered by provided input.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFaultOperationList(typeFilter: number, stateFilter: number,
        options?: ServiceFabricClientGetFaultOperationListOptionalParams):
        Promise<GetFaultOperationListResponse>
      parameters:
        - id: typeFilter
          type: number
          description: |-
            Used to filter on OperationType for user-induced operations.

            - 65535 - select all
            - 1 - select PartitionDataLoss.
            - 2 - select PartitionQuorumLoss.
            - 4 - select PartitionRestart.
            - 8 - select NodeTransition.
        - id: stateFilter
          type: number
          description: |-
            Used to filter on OperationState's for user-induced operations.

            - 65535 - select All
            - 1 - select Running
            - 2 - select RollingBack
            - 8 - select Completed
            - 16 - select Faulted
            - 32 - select Cancelled
            - 64 - select ForceCancelled
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetFaultOperationListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetFaultOperationListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetFaultOperationListResponse"
          />&gt;
  - name: >-
      getFaultOperationList(number, number,
      ServiceFabricClientGetFaultOperationListOptionalParams,
      ServiceCallback<OperationStatus[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getFaultOperationList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFaultOperationList(typeFilter: number, stateFilter: number,
        options: ServiceFabricClientGetFaultOperationListOptionalParams,
        callback: ServiceCallback<OperationStatus[]>)
      parameters:
        - id: typeFilter
          type: number
          description: |-
            Used to filter on OperationType for user-induced operations.

            - 65535 - select all
            - 1 - select PartitionDataLoss.
            - 2 - select PartitionQuorumLoss.
            - 4 - select PartitionRestart.
            - 8 - select NodeTransition.
        - id: stateFilter
          type: number
          description: |-
            Used to filter on OperationState's for user-induced operations.

            - 65535 - select All
            - 1 - select Running
            - 2 - select RollingBack
            - 8 - select Completed
            - 16 - select Faulted
            - 32 - select Cancelled
            - 64 - select ForceCancelled
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetFaultOperationListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.OperationStatus"
            />[]&gt;
          description: The callback
  - name: getImageStoreContent(string, ServiceCallback<ImageStoreContent>)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreContent_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreContent(contentPath: string, callback:
        ServiceCallback<ImageStoreContent>)
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ImageStoreContent"
            />&gt;
          description: The callback
  - name: >-
      getImageStoreContent(string,
      ServiceFabricClientGetImageStoreContentOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreContent'
    package: '@azure/servicefabric'
    summary: >-
      Returns the information about the image store content at the specified
      contentPath. The

      contentPath is relative to the root of the image store.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreContent(contentPath: string, options?:
        ServiceFabricClientGetImageStoreContentOptionalParams):
        Promise<GetImageStoreContentResponse>
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreContentOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetImageStoreContentResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetImageStoreContentResponse"
          />&gt;
  - name: >-
      getImageStoreContent(string,
      ServiceFabricClientGetImageStoreContentOptionalParams,
      ServiceCallback<ImageStoreContent>)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreContent_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreContent(contentPath: string, options:
        ServiceFabricClientGetImageStoreContentOptionalParams, callback:
        ServiceCallback<ImageStoreContent>)
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreContentOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ImageStoreContent"
            />&gt;
          description: The callback
  - name: getImageStoreFolderSize(string, ServiceCallback<FolderSizeInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreFolderSize(contentPath: string, callback:
        ServiceCallback<FolderSizeInfo>)
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.FolderSizeInfo" />&gt;
          description: The callback
  - name: >-
      getImageStoreFolderSize(string,
      ServiceFabricClientGetImageStoreFolderSizeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize'
    package: '@azure/servicefabric'
    summary: >-
      Gets the total size of file under a image store folder, specified by
      contentPath. The

      contentPath is relative to the root of the image store.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreFolderSize(contentPath: string, options?:
        ServiceFabricClientGetImageStoreFolderSizeOptionalParams):
        Promise<GetImageStoreFolderSizeResponse>
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreFolderSizeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetImageStoreFolderSizeResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetImageStoreFolderSizeResponse"
          />&gt;
  - name: >-
      getImageStoreFolderSize(string,
      ServiceFabricClientGetImageStoreFolderSizeOptionalParams,
      ServiceCallback<FolderSizeInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreFolderSize_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreFolderSize(contentPath: string, options:
        ServiceFabricClientGetImageStoreFolderSizeOptionalParams, callback:
        ServiceCallback<FolderSizeInfo>)
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreFolderSizeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.FolderSizeInfo" />&gt;
          description: The callback
  - name: getImageStoreInfo(ServiceCallback<ImageStoreInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getImageStoreInfo(callback: ServiceCallback<ImageStoreInfo>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ImageStoreInfo" />&gt;
          description: The callback
  - name: getImageStoreInfo(ServiceFabricClientGetImageStoreInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreInfo'
    package: '@azure/servicefabric'
    summary: >-
      Returns information about the primary ImageStore replica, such as disk
      capacity and available

      disk space at the node it is on, and several categories of the
      ImageStore's file system usage.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreInfo(options?:
        ServiceFabricClientGetImageStoreInfoOptionalParams):
        Promise<GetImageStoreInfoResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetImageStoreInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetImageStoreInfoResponse"
          />&gt;
  - name: >-
      getImageStoreInfo(ServiceFabricClientGetImageStoreInfoOptionalParams,
      ServiceCallback<ImageStoreInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreInfo(options:
        ServiceFabricClientGetImageStoreInfoOptionalParams, callback:
        ServiceCallback<ImageStoreInfo>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ImageStoreInfo" />&gt;
          description: The callback
  - name: getImageStoreRootContent(ServiceCallback<ImageStoreContent>)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreRootContent(callback:
        ServiceCallback<ImageStoreContent>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ImageStoreContent"
            />&gt;
          description: The callback
  - name: >-
      getImageStoreRootContent(ServiceFabricClientGetImageStoreRootContentOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent'
    package: '@azure/servicefabric'
    summary: >-
      Returns the information about the image store content at the root of the
      image store.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreRootContent(options?:
        ServiceFabricClientGetImageStoreRootContentOptionalParams):
        Promise<GetImageStoreRootContentResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreRootContentOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetImageStoreRootContentResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetImageStoreRootContentResponse"
          />&gt;
  - name: >-
      getImageStoreRootContent(ServiceFabricClientGetImageStoreRootContentOptionalParams,
      ServiceCallback<ImageStoreContent>)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootContent_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreRootContent(options:
        ServiceFabricClientGetImageStoreRootContentOptionalParams, callback:
        ServiceCallback<ImageStoreContent>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreRootContentOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ImageStoreContent"
            />&gt;
          description: The callback
  - name: getImageStoreRootFolderSize(ServiceCallback<FolderSizeInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreRootFolderSize(callback:
        ServiceCallback<FolderSizeInfo>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.FolderSizeInfo" />&gt;
          description: The callback
  - name: >-
      getImageStoreRootFolderSize(ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize'
    package: '@azure/servicefabric'
    summary: >-
      Returns the total size of files at the root and children folders in image
      store.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreRootFolderSize(options?:
        ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams):
        Promise<GetImageStoreRootFolderSizeResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetImageStoreRootFolderSizeResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetImageStoreRootFolderSizeResponse"
          />&gt;
  - name: >-
      getImageStoreRootFolderSize(ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams,
      ServiceCallback<FolderSizeInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreRootFolderSize_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreRootFolderSize(options:
        ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams, callback:
        ServiceCallback<FolderSizeInfo>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreRootFolderSizeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.FolderSizeInfo" />&gt;
          description: The callback
  - name: getImageStoreUploadSessionById(string, ServiceCallback<UploadSession>)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreUploadSessionById(sessionId: string, callback:
        ServiceCallback<UploadSession>)
      parameters:
        - id: sessionId
          type: string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.UploadSession" />&gt;
          description: The callback
  - name: >-
      getImageStoreUploadSessionById(string,
      ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById'
    package: '@azure/servicefabric'
    summary: >-
      Gets the image store upload session identified by the given ID. User can
      query the upload

      session at any time during uploading.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreUploadSessionById(sessionId: string, options?:
        ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams):
        Promise<GetImageStoreUploadSessionByIdResponse>
      parameters:
        - id: sessionId
          type: string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetImageStoreUploadSessionByIdResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetImageStoreUploadSessionByIdResponse"
          />&gt;
  - name: >-
      getImageStoreUploadSessionById(string,
      ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams,
      ServiceCallback<UploadSession>)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionById_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreUploadSessionById(sessionId: string, options:
        ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams,
        callback: ServiceCallback<UploadSession>)
      parameters:
        - id: sessionId
          type: string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreUploadSessionByIdOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.UploadSession" />&gt;
          description: The callback
  - name: getImageStoreUploadSessionByPath(string, ServiceCallback<UploadSession>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreUploadSessionByPath(contentPath: string, callback:
        ServiceCallback<UploadSession>)
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.UploadSession" />&gt;
          description: The callback
  - name: >-
      getImageStoreUploadSessionByPath(string,
      ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath'
    package: '@azure/servicefabric'
    summary: >-
      Gets the image store upload session associated with the given image store
      relative path. User

      can query the upload session at any time during uploading.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreUploadSessionByPath(contentPath: string, options?:
        ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams):
        Promise<GetImageStoreUploadSessionByPathResponse>
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetImageStoreUploadSessionByPathResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetImageStoreUploadSessionByPathResponse"
          />&gt;
  - name: >-
      getImageStoreUploadSessionByPath(string,
      ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams,
      ServiceCallback<UploadSession>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getImageStoreUploadSessionByPath_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImageStoreUploadSessionByPath(contentPath: string, options:
        ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams,
        callback: ServiceCallback<UploadSession>)
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetImageStoreUploadSessionByPathOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.UploadSession" />&gt;
          description: The callback
  - name: getNameExistsInfo(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNameExistsInfo(nameId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      getNameExistsInfo(string,
      ServiceFabricClientGetNameExistsInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo'
    package: '@azure/servicefabric'
    summary: Returns whether the specified Service Fabric name exists.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNameExistsInfo(nameId: string, options?:
        ServiceFabricClientGetNameExistsInfoOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNameExistsInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      getNameExistsInfo(string,
      ServiceFabricClientGetNameExistsInfoOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNameExistsInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNameExistsInfo(nameId: string, options:
        ServiceFabricClientGetNameExistsInfoOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNameExistsInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      getNodeEventList(string, string, string,
      ServiceCallback<NodeEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeEventList(nodeName: string, startTimeUtc: string,
        endTimeUtc: string, callback: ServiceCallback<NodeEventUnion[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getNodeEventList(string, string, string,
      ServiceFabricClientGetNodeEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeEventList'
    package: '@azure/servicefabric'
    summary: The response is list of NodeEvent objects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeEventList(nodeName: string, startTimeUtc: string,
        endTimeUtc: string, options?:
        ServiceFabricClientGetNodeEventListOptionalParams):
        Promise<GetNodeEventListResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetNodeEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetNodeEventListResponse"
          />&gt;
  - name: >-
      getNodeEventList(string, string, string,
      ServiceFabricClientGetNodeEventListOptionalParams,
      ServiceCallback<NodeEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeEventList(nodeName: string, startTimeUtc: string,
        endTimeUtc: string, options:
        ServiceFabricClientGetNodeEventListOptionalParams, callback:
        ServiceCallback<NodeEventUnion[]>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeEventUnion"
            />[]&gt;
          description: The callback
  - name: getNodeHealth(string, ServiceCallback<NodeHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeHealth(nodeName: string, callback:
        ServiceCallback<NodeHealth>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeHealth" />&gt;
          description: The callback
  - name: getNodeHealth(string, ServiceFabricClientGetNodeHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealth'
    package: '@azure/servicefabric'
    summary: >-
      Gets the health of a Service Fabric node. Use EventsHealthStateFilter to
      filter the collection

      of health events reported on the node based on the health state. If the
      node that you specify by

      name does not exist in the health store, this returns an error.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeHealth(nodeName: string, options?:
        ServiceFabricClientGetNodeHealthOptionalParams):
        Promise<GetNodeHealthResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetNodeHealthResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetNodeHealthResponse"
          />&gt;
  - name: >-
      getNodeHealth(string, ServiceFabricClientGetNodeHealthOptionalParams,
      ServiceCallback<NodeHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeHealth(nodeName: string, options:
        ServiceFabricClientGetNodeHealthOptionalParams, callback:
        ServiceCallback<NodeHealth>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeHealth" />&gt;
          description: The callback
  - name: getNodeHealthUsingPolicy(string, ServiceCallback<NodeHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeHealthUsingPolicy(nodeName: string, callback:
        ServiceCallback<NodeHealth>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeHealth" />&gt;
          description: The callback
  - name: >-
      getNodeHealthUsingPolicy(string,
      ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy'
    package: '@azure/servicefabric'
    summary: >-
      Gets the health of a Service Fabric node. Use EventsHealthStateFilter to
      filter the collection

      of health events reported on the node based on the health state. Use
      ClusterHealthPolicy in the

      POST body to override the health policies used to evaluate the health. If
      the node that you

      specify by name does not exist in the health store, this returns an error.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeHealthUsingPolicy(nodeName: string, options?:
        ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams):
        Promise<GetNodeHealthUsingPolicyResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetNodeHealthUsingPolicyResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetNodeHealthUsingPolicyResponse"
          />&gt;
  - name: >-
      getNodeHealthUsingPolicy(string,
      ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams,
      ServiceCallback<NodeHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeHealthUsingPolicy_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeHealthUsingPolicy(nodeName: string, options:
        ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams, callback:
        ServiceCallback<NodeHealth>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeHealth" />&gt;
          description: The callback
  - name: getNodeInfo(string, ServiceCallback<NodeInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeInfo(nodeName: string, callback:
        ServiceCallback<NodeInfo>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeInfo" />&gt;
          description: The callback
  - name: getNodeInfo(string, ServiceFabricClientGetNodeInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfo'
    package: '@azure/servicefabric'
    summary: >-
      The response includes the name, status, ID, health, uptime, and other
      details about the node.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeInfo(nodeName: string, options?:
        ServiceFabricClientGetNodeInfoOptionalParams):
        Promise<GetNodeInfoResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetNodeInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetNodeInfoResponse"
          />&gt;
  - name: >-
      getNodeInfo(string, ServiceFabricClientGetNodeInfoOptionalParams,
      ServiceCallback<NodeInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeInfo(nodeName: string, options:
        ServiceFabricClientGetNodeInfoOptionalParams, callback:
        ServiceCallback<NodeInfo>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeInfo" />&gt;
          description: The callback
  - name: getNodeInfoList(ServiceCallback<PagedNodeInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfoList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getNodeInfoList(callback: ServiceCallback<PagedNodeInfoList>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedNodeInfoList"
            />&gt;
          description: The callback
  - name: getNodeInfoList(ServiceFabricClientGetNodeInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfoList'
    package: '@azure/servicefabric'
    summary: >-
      The response includes the name, status, ID, health, uptime, and other
      details about the nodes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeInfoList(options?:
        ServiceFabricClientGetNodeInfoListOptionalParams):
        Promise<GetNodeInfoListResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetNodeInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetNodeInfoListResponse"
          />&gt;
  - name: >-
      getNodeInfoList(ServiceFabricClientGetNodeInfoListOptionalParams,
      ServiceCallback<PagedNodeInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeInfoList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeInfoList(options:
        ServiceFabricClientGetNodeInfoListOptionalParams, callback:
        ServiceCallback<PagedNodeInfoList>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedNodeInfoList"
            />&gt;
          description: The callback
  - name: getNodeLoadInfo(string, ServiceCallback<NodeLoadInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeLoadInfo(nodeName: string, callback:
        ServiceCallback<NodeLoadInfo>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeLoadInfo" />&gt;
          description: The callback
  - name: getNodeLoadInfo(string, ServiceFabricClientGetNodeLoadInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo'
    package: '@azure/servicefabric'
    summary: >-
      Retrieves the load information of a Service Fabric node for all the
      metrics that have load or

      capacity defined.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeLoadInfo(nodeName: string, options?:
        ServiceFabricClientGetNodeLoadInfoOptionalParams):
        Promise<GetNodeLoadInfoResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeLoadInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetNodeLoadInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetNodeLoadInfoResponse"
          />&gt;
  - name: >-
      getNodeLoadInfo(string, ServiceFabricClientGetNodeLoadInfoOptionalParams,
      ServiceCallback<NodeLoadInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeLoadInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeLoadInfo(nodeName: string, options:
        ServiceFabricClientGetNodeLoadInfoOptionalParams, callback:
        ServiceCallback<NodeLoadInfo>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeLoadInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeLoadInfo" />&gt;
          description: The callback
  - name: getNodesEventList(string, string, ServiceCallback<NodeEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodesEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodesEventList(startTimeUtc: string, endTimeUtc: string,
        callback: ServiceCallback<NodeEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getNodesEventList(string, string,
      ServiceFabricClientGetNodesEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodesEventList'
    package: '@azure/servicefabric'
    summary: The response is list of NodeEvent objects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodesEventList(startTimeUtc: string, endTimeUtc: string,
        options?: ServiceFabricClientGetNodesEventListOptionalParams):
        Promise<GetNodesEventListResponse>
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodesEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetNodesEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetNodesEventListResponse"
          />&gt;
  - name: >-
      getNodesEventList(string, string,
      ServiceFabricClientGetNodesEventListOptionalParams,
      ServiceCallback<NodeEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodesEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodesEventList(startTimeUtc: string, endTimeUtc: string,
        options: ServiceFabricClientGetNodesEventListOptionalParams, callback:
        ServiceCallback<NodeEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodesEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getNodeTransitionProgress(string, string,
      ServiceCallback<NodeTransitionProgress>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeTransitionProgress(nodeName: string, operationId:
        string, callback: ServiceCallback<NodeTransitionProgress>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeTransitionProgress"
            />&gt;
          description: The callback
  - name: >-
      getNodeTransitionProgress(string, string,
      ServiceFabricClientGetNodeTransitionProgressOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress'
    package: '@azure/servicefabric'
    summary: >-
      Gets the progress of an operation started with StartNodeTransition using
      the provided

      OperationId.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeTransitionProgress(nodeName: string, operationId:
        string, options?:
        ServiceFabricClientGetNodeTransitionProgressOptionalParams):
        Promise<GetNodeTransitionProgressResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeTransitionProgressOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetNodeTransitionProgressResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetNodeTransitionProgressResponse"
          />&gt;
  - name: >-
      getNodeTransitionProgress(string, string,
      ServiceFabricClientGetNodeTransitionProgressOptionalParams,
      ServiceCallback<NodeTransitionProgress>)
    uid: '@azure/servicefabric.ServiceFabricClient.getNodeTransitionProgress_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getNodeTransitionProgress(nodeName: string, operationId:
        string, options:
        ServiceFabricClientGetNodeTransitionProgressOptionalParams, callback:
        ServiceCallback<NodeTransitionProgress>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetNodeTransitionProgressOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeTransitionProgress"
            />&gt;
          description: The callback
  - name: >-
      getPartitionBackupConfigurationInfo(string,
      ServiceCallback<PartitionBackupConfigurationInfo>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionBackupConfigurationInfo(partitionId: string,
        callback: ServiceCallback<PartitionBackupConfigurationInfo>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionBackupConfigurationInfo"
            />&gt;
          description: The callback
  - name: >-
      getPartitionBackupConfigurationInfo(string,
      ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo
    package: '@azure/servicefabric'
    summary: >-
      Gets the Service Fabric Backup configuration information for the specified
      partition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionBackupConfigurationInfo(partitionId: string,
        options?:
        ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams):
        Promise<GetPartitionBackupConfigurationInfoResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionBackupConfigurationInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionBackupConfigurationInfoResponse"
          />&gt;
  - name: >-
      getPartitionBackupConfigurationInfo(string,
      ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams,
      ServiceCallback<PartitionBackupConfigurationInfo>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getPartitionBackupConfigurationInfo_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionBackupConfigurationInfo(partitionId: string,
        options:
        ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams,
        callback: ServiceCallback<PartitionBackupConfigurationInfo>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionBackupConfigurationInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionBackupConfigurationInfo"
            />&gt;
          description: The callback
  - name: getPartitionBackupList(string, ServiceCallback<PagedBackupInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionBackupList(partitionId: string, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupInfoList"
            />&gt;
          description: The callback
  - name: >-
      getPartitionBackupList(string,
      ServiceFabricClientGetPartitionBackupListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList'
    package: '@azure/servicefabric'
    summary: >-
      Returns a list of backups available for the specified partition. The
      server enumerates all the

      backups available in the backup store configured in the backup policy. It
      also allows filtering

      of the result based on start and end datetime or just fetching the latest
      available backup for

      the partition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionBackupList(partitionId: string, options?:
        ServiceFabricClientGetPartitionBackupListOptionalParams):
        Promise<GetPartitionBackupListResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionBackupListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionBackupListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionBackupListResponse"
          />&gt;
  - name: >-
      getPartitionBackupList(string,
      ServiceFabricClientGetPartitionBackupListOptionalParams,
      ServiceCallback<PagedBackupInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionBackupList(partitionId: string, options:
        ServiceFabricClientGetPartitionBackupListOptionalParams, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionBackupListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupInfoList"
            />&gt;
          description: The callback
  - name: getPartitionBackupProgress(string, ServiceCallback<BackupProgressInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionBackupProgress(partitionId: string, callback:
        ServiceCallback<BackupProgressInfo>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.BackupProgressInfo"
            />&gt;
          description: The callback
  - name: >-
      getPartitionBackupProgress(string,
      ServiceFabricClientGetPartitionBackupProgressOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress'
    package: '@azure/servicefabric'
    summary: >-
      Returns information about the state of the latest backup along with
      details or failure reason in

      case of completion.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionBackupProgress(partitionId: string, options?:
        ServiceFabricClientGetPartitionBackupProgressOptionalParams):
        Promise<GetPartitionBackupProgressResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionBackupProgressOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionBackupProgressResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionBackupProgressResponse"
          />&gt;
  - name: >-
      getPartitionBackupProgress(string,
      ServiceFabricClientGetPartitionBackupProgressOptionalParams,
      ServiceCallback<BackupProgressInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionBackupProgress_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionBackupProgress(partitionId: string, options:
        ServiceFabricClientGetPartitionBackupProgressOptionalParams, callback:
        ServiceCallback<BackupProgressInfo>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionBackupProgressOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.BackupProgressInfo"
            />&gt;
          description: The callback
  - name: >-
      getPartitionEventList(string, string, string,
      ServiceCallback<PartitionEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionEventList(partitionId: string, startTimeUtc:
        string, endTimeUtc: string, callback:
        ServiceCallback<PartitionEventUnion[]>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getPartitionEventList(string, string, string,
      ServiceFabricClientGetPartitionEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionEventList'
    package: '@azure/servicefabric'
    summary: The response is list of PartitionEvent objects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionEventList(partitionId: string, startTimeUtc:
        string, endTimeUtc: string, options?:
        ServiceFabricClientGetPartitionEventListOptionalParams):
        Promise<GetPartitionEventListResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionEventListResponse"
          />&gt;
  - name: >-
      getPartitionEventList(string, string, string,
      ServiceFabricClientGetPartitionEventListOptionalParams,
      ServiceCallback<PartitionEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionEventList(partitionId: string, startTimeUtc:
        string, endTimeUtc: string, options:
        ServiceFabricClientGetPartitionEventListOptionalParams, callback:
        ServiceCallback<PartitionEventUnion[]>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionEventUnion"
            />[]&gt;
          description: The callback
  - name: getPartitionHealth(string, ServiceCallback<PartitionHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionHealth(partitionId: string, callback:
        ServiceCallback<PartitionHealth>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionHealth"
            />&gt;
          description: The callback
  - name: >-
      getPartitionHealth(string,
      ServiceFabricClientGetPartitionHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealth'
    package: '@azure/servicefabric'
    summary: >-
      Use EventsHealthStateFilter to filter the collection of health events
      reported on the service

      based on the health state.

      Use ReplicasHealthStateFilter to filter the collection of
      ReplicaHealthState objects on the

      partition.

      If you specify a partition that does not exist in the health store, this
      request returns an

      error.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionHealth(partitionId: string, options?:
        ServiceFabricClientGetPartitionHealthOptionalParams):
        Promise<GetPartitionHealthResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionHealthResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionHealthResponse"
          />&gt;
  - name: >-
      getPartitionHealth(string,
      ServiceFabricClientGetPartitionHealthOptionalParams,
      ServiceCallback<PartitionHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionHealth(partitionId: string, options:
        ServiceFabricClientGetPartitionHealthOptionalParams, callback:
        ServiceCallback<PartitionHealth>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionHealth"
            />&gt;
          description: The callback
  - name: getPartitionHealthUsingPolicy(string, ServiceCallback<PartitionHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionHealthUsingPolicy(partitionId: string, callback:
        ServiceCallback<PartitionHealth>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionHealth"
            />&gt;
          description: The callback
  - name: >-
      getPartitionHealthUsingPolicy(string,
      ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy'
    package: '@azure/servicefabric'
    summary: >-
      Gets the health information of the specified partition.

      If the application health policy is specified, the health evaluation uses
      it to get the

      aggregated health state.

      If the policy is not specified, the health evaluation uses the application
      health policy defined

      in the application manifest, or the default health policy, if no policy is
      defined in the

      manifest.

      Use EventsHealthStateFilter to filter the collection of health events
      reported on the partition

      based on the health state.

      Use ReplicasHealthStateFilter to filter the collection of
      ReplicaHealthState objects on the

      partition. Use ApplicationHealthPolicy in the POST body to override the
      health policies used to

      evaluate the health.

      If you specify a partition that does not exist in the health store, this
      request returns an

      error.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionHealthUsingPolicy(partitionId: string, options?:
        ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams):
        Promise<GetPartitionHealthUsingPolicyResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionHealthUsingPolicyResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionHealthUsingPolicyResponse"
          />&gt;
  - name: >-
      getPartitionHealthUsingPolicy(string,
      ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams,
      ServiceCallback<PartitionHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionHealthUsingPolicy_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionHealthUsingPolicy(partitionId: string, options:
        ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams,
        callback: ServiceCallback<PartitionHealth>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionHealth"
            />&gt;
          description: The callback
  - name: getPartitionInfo(string, ServiceCallback<ServicePartitionInfoUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionInfo(partitionId: string, callback:
        ServiceCallback<ServicePartitionInfoUnion>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServicePartitionInfoUnion"
            />&gt;
          description: The callback
  - name: >-
      getPartitionInfo(string,
      ServiceFabricClientGetPartitionInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfo'
    package: '@azure/servicefabric'
    summary: >-
      Gets the information about the specified partition. The response includes
      the partition ID,

      partitioning scheme information, keys supported by the partition, status,
      health, and other

      details about the partition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionInfo(partitionId: string, options?:
        ServiceFabricClientGetPartitionInfoOptionalParams):
        Promise<GetPartitionInfoResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionInfoResponse"
          />&gt;
  - name: >-
      getPartitionInfo(string,
      ServiceFabricClientGetPartitionInfoOptionalParams,
      ServiceCallback<ServicePartitionInfoUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionInfo(partitionId: string, options:
        ServiceFabricClientGetPartitionInfoOptionalParams, callback:
        ServiceCallback<ServicePartitionInfoUnion>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServicePartitionInfoUnion"
            />&gt;
          description: The callback
  - name: >-
      getPartitionInfoList(string,
      ServiceCallback<PagedServicePartitionInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionInfoList(serviceId: string, callback:
        ServiceCallback<PagedServicePartitionInfoList>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedServicePartitionInfoList"
            />&gt;
          description: The callback
  - name: >-
      getPartitionInfoList(string,
      ServiceFabricClientGetPartitionInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList'
    package: '@azure/servicefabric'
    summary: >-
      The response includes the partition ID, partitioning scheme information,
      keys supported by the

      partition, status, health, and other details about the partition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionInfoList(serviceId: string, options?:
        ServiceFabricClientGetPartitionInfoListOptionalParams):
        Promise<GetPartitionInfoListResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionInfoListResponse"
          />&gt;
  - name: >-
      getPartitionInfoList(string,
      ServiceFabricClientGetPartitionInfoListOptionalParams,
      ServiceCallback<PagedServicePartitionInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionInfoList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionInfoList(serviceId: string, options:
        ServiceFabricClientGetPartitionInfoListOptionalParams, callback:
        ServiceCallback<PagedServicePartitionInfoList>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedServicePartitionInfoList"
            />&gt;
          description: The callback
  - name: >-
      getPartitionLoadInformation(string,
      ServiceCallback<PartitionLoadInformation>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionLoadInformation(partitionId: string, callback:
        ServiceCallback<PartitionLoadInformation>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionLoadInformation"
            />&gt;
          description: The callback
  - name: >-
      getPartitionLoadInformation(string,
      ServiceFabricClientGetPartitionLoadInformationOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation'
    package: '@azure/servicefabric'
    summary: >-
      Returns information about the load of a specified partition.

      The response includes a list of load reports for a Service Fabric
      partition.

      Each report includes the load metric name, value, and last reported time
      in UTC.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionLoadInformation(partitionId: string, options?:
        ServiceFabricClientGetPartitionLoadInformationOptionalParams):
        Promise<GetPartitionLoadInformationResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionLoadInformationOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionLoadInformationResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionLoadInformationResponse"
          />&gt;
  - name: >-
      getPartitionLoadInformation(string,
      ServiceFabricClientGetPartitionLoadInformationOptionalParams,
      ServiceCallback<PartitionLoadInformation>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionLoadInformation_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionLoadInformation(partitionId: string, options:
        ServiceFabricClientGetPartitionLoadInformationOptionalParams, callback:
        ServiceCallback<PartitionLoadInformation>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionLoadInformationOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionLoadInformation"
            />&gt;
          description: The callback
  - name: >-
      getPartitionReplicaEventList(string, string, string, string,
      ServiceCallback<ReplicaEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionReplicaEventList(partitionId: string, replicaId:
        string, startTimeUtc: string, endTimeUtc: string, callback:
        ServiceCallback<ReplicaEventUnion[]>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getPartitionReplicaEventList(string, string, string, string,
      ServiceFabricClientGetPartitionReplicaEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList'
    package: '@azure/servicefabric'
    summary: The response is list of ReplicaEvent objects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionReplicaEventList(partitionId: string, replicaId:
        string, startTimeUtc: string, endTimeUtc: string, options?:
        ServiceFabricClientGetPartitionReplicaEventListOptionalParams):
        Promise<GetPartitionReplicaEventListResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionReplicaEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionReplicaEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionReplicaEventListResponse"
          />&gt;
  - name: >-
      getPartitionReplicaEventList(string, string, string, string,
      ServiceFabricClientGetPartitionReplicaEventListOptionalParams,
      ServiceCallback<ReplicaEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicaEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionReplicaEventList(partitionId: string, replicaId:
        string, startTimeUtc: string, endTimeUtc: string, options:
        ServiceFabricClientGetPartitionReplicaEventListOptionalParams, callback:
        ServiceCallback<ReplicaEventUnion[]>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionReplicaEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getPartitionReplicasEventList(string, string, string,
      ServiceCallback<ReplicaEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionReplicasEventList(partitionId: string,
        startTimeUtc: string, endTimeUtc: string, callback:
        ServiceCallback<ReplicaEventUnion[]>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getPartitionReplicasEventList(string, string, string,
      ServiceFabricClientGetPartitionReplicasEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList'
    package: '@azure/servicefabric'
    summary: The response is list of ReplicaEvent objects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionReplicasEventList(partitionId: string,
        startTimeUtc: string, endTimeUtc: string, options?:
        ServiceFabricClientGetPartitionReplicasEventListOptionalParams):
        Promise<GetPartitionReplicasEventListResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionReplicasEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionReplicasEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionReplicasEventListResponse"
          />&gt;
  - name: >-
      getPartitionReplicasEventList(string, string, string,
      ServiceFabricClientGetPartitionReplicasEventListOptionalParams,
      ServiceCallback<ReplicaEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionReplicasEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionReplicasEventList(partitionId: string,
        startTimeUtc: string, endTimeUtc: string, options:
        ServiceFabricClientGetPartitionReplicasEventListOptionalParams,
        callback: ServiceCallback<ReplicaEventUnion[]>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionReplicasEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getPartitionRestartProgress(string, string, string,
      ServiceCallback<PartitionRestartProgress>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionRestartProgress(serviceId: string, partitionId:
        string, operationId: string, callback:
        ServiceCallback<PartitionRestartProgress>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionRestartProgress"
            />&gt;
          description: The callback
  - name: >-
      getPartitionRestartProgress(string, string, string,
      ServiceFabricClientGetPartitionRestartProgressOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress'
    package: '@azure/servicefabric'
    summary: >-
      Gets the progress of a PartitionRestart started with StartPartitionRestart
      using the provided

      OperationId.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionRestartProgress(serviceId: string, partitionId:
        string, operationId: string, options?:
        ServiceFabricClientGetPartitionRestartProgressOptionalParams):
        Promise<GetPartitionRestartProgressResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionRestartProgressOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionRestartProgressResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionRestartProgressResponse"
          />&gt;
  - name: >-
      getPartitionRestartProgress(string, string, string,
      ServiceFabricClientGetPartitionRestartProgressOptionalParams,
      ServiceCallback<PartitionRestartProgress>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestartProgress_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionRestartProgress(serviceId: string, partitionId:
        string, operationId: string, options:
        ServiceFabricClientGetPartitionRestartProgressOptionalParams, callback:
        ServiceCallback<PartitionRestartProgress>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionRestartProgressOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionRestartProgress"
            />&gt;
          description: The callback
  - name: getPartitionRestoreProgress(string, ServiceCallback<RestoreProgressInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionRestoreProgress(partitionId: string, callback:
        ServiceCallback<RestoreProgressInfo>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RestoreProgressInfo"
            />&gt;
          description: The callback
  - name: >-
      getPartitionRestoreProgress(string,
      ServiceFabricClientGetPartitionRestoreProgressOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress'
    package: '@azure/servicefabric'
    summary: >-
      Returns information about the state of the latest restore operation along
      with details or

      failure reason in case of completion.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionRestoreProgress(partitionId: string, options?:
        ServiceFabricClientGetPartitionRestoreProgressOptionalParams):
        Promise<GetPartitionRestoreProgressResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionRestoreProgressOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionRestoreProgressResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionRestoreProgressResponse"
          />&gt;
  - name: >-
      getPartitionRestoreProgress(string,
      ServiceFabricClientGetPartitionRestoreProgressOptionalParams,
      ServiceCallback<RestoreProgressInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionRestoreProgress_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionRestoreProgress(partitionId: string, options:
        ServiceFabricClientGetPartitionRestoreProgressOptionalParams, callback:
        ServiceCallback<RestoreProgressInfo>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionRestoreProgressOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RestoreProgressInfo"
            />&gt;
          description: The callback
  - name: >-
      getPartitionsEventList(string, string,
      ServiceCallback<PartitionEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionsEventList(startTimeUtc: string, endTimeUtc:
        string, callback: ServiceCallback<PartitionEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getPartitionsEventList(string, string,
      ServiceFabricClientGetPartitionsEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList'
    package: '@azure/servicefabric'
    summary: The response is list of PartitionEvent objects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionsEventList(startTimeUtc: string, endTimeUtc:
        string, options?:
        ServiceFabricClientGetPartitionsEventListOptionalParams):
        Promise<GetPartitionsEventListResponse>
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionsEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPartitionsEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPartitionsEventListResponse"
          />&gt;
  - name: >-
      getPartitionsEventList(string, string,
      ServiceFabricClientGetPartitionsEventListOptionalParams,
      ServiceCallback<PartitionEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPartitionsEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionsEventList(startTimeUtc: string, endTimeUtc:
        string, options:
        ServiceFabricClientGetPartitionsEventListOptionalParams, callback:
        ServiceCallback<PartitionEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPartitionsEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionEventUnion"
            />[]&gt;
          description: The callback
  - name: getPropertyInfo(string, string, ServiceCallback<PropertyInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPropertyInfo(nameId: string, propertyName: string, callback:
        ServiceCallback<PropertyInfo>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: propertyName
          type: string
          description: Specifies the name of the property to get.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PropertyInfo" />&gt;
          description: The callback
  - name: >-
      getPropertyInfo(string, string,
      ServiceFabricClientGetPropertyInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfo'
    package: '@azure/servicefabric'
    summary: >-
      Gets the specified Service Fabric property under a given name. This will
      always return both

      value and metadata.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPropertyInfo(nameId: string, propertyName: string, options?:
        ServiceFabricClientGetPropertyInfoOptionalParams):
        Promise<GetPropertyInfoResponse>
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: propertyName
          type: string
          description: Specifies the name of the property to get.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPropertyInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPropertyInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPropertyInfoResponse"
          />&gt;
  - name: >-
      getPropertyInfo(string, string,
      ServiceFabricClientGetPropertyInfoOptionalParams,
      ServiceCallback<PropertyInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPropertyInfo(nameId: string, propertyName: string, options:
        ServiceFabricClientGetPropertyInfoOptionalParams, callback:
        ServiceCallback<PropertyInfo>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: propertyName
          type: string
          description: Specifies the name of the property to get.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPropertyInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PropertyInfo" />&gt;
          description: The callback
  - name: getPropertyInfoList(string, ServiceCallback<PagedPropertyInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPropertyInfoList(nameId: string, callback:
        ServiceCallback<PagedPropertyInfoList>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedPropertyInfoList"
            />&gt;
          description: The callback
  - name: >-
      getPropertyInfoList(string,
      ServiceFabricClientGetPropertyInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList'
    package: '@azure/servicefabric'
    summary: >-
      A Service Fabric name can have one or more named properties that store
      custom information. This

      operation gets the information about these properties in a paged list. The
      information includes

      name, value, and metadata about each of the properties.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPropertyInfoList(nameId: string, options?:
        ServiceFabricClientGetPropertyInfoListOptionalParams):
        Promise<GetPropertyInfoListResponse>
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPropertyInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetPropertyInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetPropertyInfoListResponse"
          />&gt;
  - name: >-
      getPropertyInfoList(string,
      ServiceFabricClientGetPropertyInfoListOptionalParams,
      ServiceCallback<PagedPropertyInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getPropertyInfoList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPropertyInfoList(nameId: string, options:
        ServiceFabricClientGetPropertyInfoListOptionalParams, callback:
        ServiceCallback<PagedPropertyInfoList>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetPropertyInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedPropertyInfoList"
            />&gt;
          description: The callback
  - name: >-
      getProvisionedFabricCodeVersionInfoList(ServiceCallback<FabricCodeVersionInfo[]>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProvisionedFabricCodeVersionInfoList(callback:
        ServiceCallback<FabricCodeVersionInfo[]>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.FabricCodeVersionInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getProvisionedFabricCodeVersionInfoList(ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList
    package: '@azure/servicefabric'
    summary: >-
      Gets a list of information about fabric code versions that are provisioned
      in the cluster. The

      parameter CodeVersion can be used to optionally filter the output to only
      that particular

      version.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProvisionedFabricCodeVersionInfoList(options?:
        ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams):
        Promise<GetProvisionedFabricCodeVersionInfoListResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetProvisionedFabricCodeVersionInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetProvisionedFabricCodeVersionInfoListResponse"
          />&gt;
  - name: >-
      getProvisionedFabricCodeVersionInfoList(ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams,
      ServiceCallback<FabricCodeVersionInfo[]>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getProvisionedFabricCodeVersionInfoList_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProvisionedFabricCodeVersionInfoList(options:
        ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams,
        callback: ServiceCallback<FabricCodeVersionInfo[]>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetProvisionedFabricCodeVersionInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.FabricCodeVersionInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getProvisionedFabricConfigVersionInfoList(ServiceCallback<FabricConfigVersionInfo[]>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProvisionedFabricConfigVersionInfoList(callback:
        ServiceCallback<FabricConfigVersionInfo[]>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.FabricConfigVersionInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getProvisionedFabricConfigVersionInfoList(ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList
    package: '@azure/servicefabric'
    summary: >-
      Gets a list of information about fabric config versions that are
      provisioned in the cluster. The

      parameter ConfigVersion can be used to optionally filter the output to
      only that particular

      version.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProvisionedFabricConfigVersionInfoList(options?:
        ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams):
        Promise<GetProvisionedFabricConfigVersionInfoListResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetProvisionedFabricConfigVersionInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetProvisionedFabricConfigVersionInfoListResponse"
          />&gt;
  - name: >-
      getProvisionedFabricConfigVersionInfoList(ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams,
      ServiceCallback<FabricConfigVersionInfo[]>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getProvisionedFabricConfigVersionInfoList_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getProvisionedFabricConfigVersionInfoList(options:
        ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams,
        callback: ServiceCallback<FabricConfigVersionInfo[]>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetProvisionedFabricConfigVersionInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.FabricConfigVersionInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getQuorumLossProgress(string, string, string,
      ServiceCallback<PartitionQuorumLossProgress>)
    uid: '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getQuorumLossProgress(serviceId: string, partitionId: string,
        operationId: string, callback:
        ServiceCallback<PartitionQuorumLossProgress>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionQuorumLossProgress"
            />&gt;
          description: The callback
  - name: >-
      getQuorumLossProgress(string, string, string,
      ServiceFabricClientGetQuorumLossProgressOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress'
    package: '@azure/servicefabric'
    summary: >-
      Gets the progress of a quorum loss operation started with StartQuorumLoss,
      using the provided

      OperationId.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getQuorumLossProgress(serviceId: string, partitionId: string,
        operationId: string, options?:
        ServiceFabricClientGetQuorumLossProgressOptionalParams):
        Promise<GetQuorumLossProgressResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetQuorumLossProgressOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetQuorumLossProgressResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetQuorumLossProgressResponse"
          />&gt;
  - name: >-
      getQuorumLossProgress(string, string, string,
      ServiceFabricClientGetQuorumLossProgressOptionalParams,
      ServiceCallback<PartitionQuorumLossProgress>)
    uid: '@azure/servicefabric.ServiceFabricClient.getQuorumLossProgress_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getQuorumLossProgress(serviceId: string, partitionId: string,
        operationId: string, options:
        ServiceFabricClientGetQuorumLossProgressOptionalParams, callback:
        ServiceCallback<PartitionQuorumLossProgress>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetQuorumLossProgressOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PartitionQuorumLossProgress"
            />&gt;
          description: The callback
  - name: getRepairTaskList(ServiceCallback<RepairTask[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getRepairTaskList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function getRepairTaskList(callback: ServiceCallback<RepairTask[]>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTask" />[]&gt;
          description: The callback
  - name: getRepairTaskList(ServiceFabricClientGetRepairTaskListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getRepairTaskList'
    package: '@azure/servicefabric'
    summary: >-
      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRepairTaskList(options?:
        ServiceFabricClientGetRepairTaskListOptionalParams):
        Promise<GetRepairTaskListResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetRepairTaskListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetRepairTaskListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetRepairTaskListResponse"
          />&gt;
  - name: >-
      getRepairTaskList(ServiceFabricClientGetRepairTaskListOptionalParams,
      ServiceCallback<RepairTask[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getRepairTaskList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRepairTaskList(options:
        ServiceFabricClientGetRepairTaskListOptionalParams, callback:
        ServiceCallback<RepairTask[]>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetRepairTaskListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTask" />[]&gt;
          description: The callback
  - name: getReplicaHealth(string, string, ServiceCallback<ReplicaHealthUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getReplicaHealth(partitionId: string, replicaId: string,
        callback: ServiceCallback<ReplicaHealthUnion>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaHealthUnion"
            />&gt;
          description: The callback
  - name: >-
      getReplicaHealth(string, string,
      ServiceFabricClientGetReplicaHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealth'
    package: '@azure/servicefabric'
    summary: >-
      Gets the health of a Service Fabric replica.

      Use EventsHealthStateFilter to filter the collection of health events
      reported on the replica

      based on the health state.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getReplicaHealth(partitionId: string, replicaId: string,
        options?: ServiceFabricClientGetReplicaHealthOptionalParams):
        Promise<GetReplicaHealthResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetReplicaHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetReplicaHealthResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetReplicaHealthResponse"
          />&gt;
  - name: >-
      getReplicaHealth(string, string,
      ServiceFabricClientGetReplicaHealthOptionalParams,
      ServiceCallback<ReplicaHealthUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getReplicaHealth(partitionId: string, replicaId: string,
        options: ServiceFabricClientGetReplicaHealthOptionalParams, callback:
        ServiceCallback<ReplicaHealthUnion>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetReplicaHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaHealthUnion"
            />&gt;
          description: The callback
  - name: >-
      getReplicaHealthUsingPolicy(string, string,
      ServiceCallback<ReplicaHealthUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getReplicaHealthUsingPolicy(partitionId: string, replicaId:
        string, callback: ServiceCallback<ReplicaHealthUnion>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaHealthUnion"
            />&gt;
          description: The callback
  - name: >-
      getReplicaHealthUsingPolicy(string, string,
      ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy'
    package: '@azure/servicefabric'
    summary: >-
      Gets the health of a Service Fabric stateful service replica or stateless
      service instance.

      Use EventsHealthStateFilter to filter the collection of health events
      reported on the cluster

      based on the health state.

      Use ApplicationHealthPolicy to optionally override the health policies
      used to evaluate the

      health. This API only uses 'ConsiderWarningAsError' field of the
      ApplicationHealthPolicy. The

      rest of the fields are ignored while evaluating the health of the replica.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getReplicaHealthUsingPolicy(partitionId: string, replicaId:
        string, options?:
        ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams):
        Promise<GetReplicaHealthUsingPolicyResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetReplicaHealthUsingPolicyResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetReplicaHealthUsingPolicyResponse"
          />&gt;
  - name: >-
      getReplicaHealthUsingPolicy(string, string,
      ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams,
      ServiceCallback<ReplicaHealthUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getReplicaHealthUsingPolicy_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getReplicaHealthUsingPolicy(partitionId: string, replicaId:
        string, options:
        ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams, callback:
        ServiceCallback<ReplicaHealthUnion>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetReplicaHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaHealthUnion"
            />&gt;
          description: The callback
  - name: getReplicaInfo(string, string, ServiceCallback<ReplicaInfoUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getReplicaInfo(partitionId: string, replicaId: string,
        callback: ServiceCallback<ReplicaInfoUnion>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaInfoUnion"
            />&gt;
          description: The callback
  - name: >-
      getReplicaInfo(string, string,
      ServiceFabricClientGetReplicaInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfo'
    package: '@azure/servicefabric'
    summary: >-
      The response includes the ID, role, status, health, node name, uptime, and
      other details about

      the replica.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getReplicaInfo(partitionId: string, replicaId: string,
        options?: ServiceFabricClientGetReplicaInfoOptionalParams):
        Promise<GetReplicaInfoResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetReplicaInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetReplicaInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetReplicaInfoResponse"
          />&gt;
  - name: >-
      getReplicaInfo(string, string,
      ServiceFabricClientGetReplicaInfoOptionalParams,
      ServiceCallback<ReplicaInfoUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getReplicaInfo(partitionId: string, replicaId: string, options:
        ServiceFabricClientGetReplicaInfoOptionalParams, callback:
        ServiceCallback<ReplicaInfoUnion>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetReplicaInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaInfoUnion"
            />&gt;
          description: The callback
  - name: getReplicaInfoList(string, ServiceCallback<PagedReplicaInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getReplicaInfoList(partitionId: string, callback:
        ServiceCallback<PagedReplicaInfoList>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedReplicaInfoList"
            />&gt;
          description: The callback
  - name: >-
      getReplicaInfoList(string,
      ServiceFabricClientGetReplicaInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList'
    package: '@azure/servicefabric'
    summary: >-
      The GetReplicas endpoint returns information about the replicas of the
      specified partition. The

      response includes the ID, role, status, health, node name, uptime, and
      other details about the

      replica.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getReplicaInfoList(partitionId: string, options?:
        ServiceFabricClientGetReplicaInfoListOptionalParams):
        Promise<GetReplicaInfoListResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetReplicaInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetReplicaInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetReplicaInfoListResponse"
          />&gt;
  - name: >-
      getReplicaInfoList(string,
      ServiceFabricClientGetReplicaInfoListOptionalParams,
      ServiceCallback<PagedReplicaInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getReplicaInfoList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getReplicaInfoList(partitionId: string, options:
        ServiceFabricClientGetReplicaInfoListOptionalParams, callback:
        ServiceCallback<PagedReplicaInfoList>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetReplicaInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedReplicaInfoList"
            />&gt;
          description: The callback
  - name: >-
      getServiceBackupConfigurationInfo(string,
      ServiceCallback<PagedBackupConfigurationInfoList>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceBackupConfigurationInfo(serviceId: string, callback:
        ServiceCallback<PagedBackupConfigurationInfoList>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupConfigurationInfoList"
            />&gt;
          description: The callback
  - name: >-
      getServiceBackupConfigurationInfo(string,
      ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo'
    package: '@azure/servicefabric'
    summary: >-
      Gets the Service Fabric backup configuration information for the service
      and the partitions

      under this service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceBackupConfigurationInfo(serviceId: string, options?:
        ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams):
        Promise<GetServiceBackupConfigurationInfoResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServiceBackupConfigurationInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServiceBackupConfigurationInfoResponse"
          />&gt;
  - name: >-
      getServiceBackupConfigurationInfo(string,
      ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams,
      ServiceCallback<PagedBackupConfigurationInfoList>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getServiceBackupConfigurationInfo_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceBackupConfigurationInfo(serviceId: string, options:
        ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams,
        callback: ServiceCallback<PagedBackupConfigurationInfoList>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceBackupConfigurationInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupConfigurationInfoList"
            />&gt;
          description: The callback
  - name: getServiceBackupList(string, ServiceCallback<PagedBackupInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceBackupList(serviceId: string, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupInfoList"
            />&gt;
          description: The callback
  - name: >-
      getServiceBackupList(string,
      ServiceFabricClientGetServiceBackupListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupList'
    package: '@azure/servicefabric'
    summary: >-
      Returns a list of backups available for every partition in this Service
      Fabric service. The

      server enumerates all the backups available in the backup store configured
      in the backup policy.

      It also allows filtering of the result based on start and end datetime or
      just fetching the

      latest available backup for every partition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceBackupList(serviceId: string, options?:
        ServiceFabricClientGetServiceBackupListOptionalParams):
        Promise<GetServiceBackupListResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceBackupListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServiceBackupListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServiceBackupListResponse"
          />&gt;
  - name: >-
      getServiceBackupList(string,
      ServiceFabricClientGetServiceBackupListOptionalParams,
      ServiceCallback<PagedBackupInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceBackupList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceBackupList(serviceId: string, options:
        ServiceFabricClientGetServiceBackupListOptionalParams, callback:
        ServiceCallback<PagedBackupInfoList>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceBackupListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedBackupInfoList"
            />&gt;
          description: The callback
  - name: getServiceDescription(string, ServiceCallback<ServiceDescriptionUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceDescription_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceDescription(serviceId: string, callback:
        ServiceCallback<ServiceDescriptionUnion>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceDescriptionUnion"
            />&gt;
          description: The callback
  - name: >-
      getServiceDescription(string,
      ServiceFabricClientGetServiceDescriptionOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceDescription'
    package: '@azure/servicefabric'
    summary: >-
      Gets the description of an existing Service Fabric service. A service must
      be created before its

      description can be obtained.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceDescription(serviceId: string, options?:
        ServiceFabricClientGetServiceDescriptionOptionalParams):
        Promise<GetServiceDescriptionResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceDescriptionOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServiceDescriptionResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServiceDescriptionResponse"
          />&gt;
  - name: >-
      getServiceDescription(string,
      ServiceFabricClientGetServiceDescriptionOptionalParams,
      ServiceCallback<ServiceDescriptionUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceDescription_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceDescription(serviceId: string, options:
        ServiceFabricClientGetServiceDescriptionOptionalParams, callback:
        ServiceCallback<ServiceDescriptionUnion>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceDescriptionOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceDescriptionUnion"
            />&gt;
          description: The callback
  - name: >-
      getServiceEventList(string, string, string,
      ServiceCallback<ServiceEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceEventList(serviceId: string, startTimeUtc: string,
        endTimeUtc: string, callback: ServiceCallback<ServiceEventUnion[]>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getServiceEventList(string, string, string,
      ServiceFabricClientGetServiceEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceEventList'
    package: '@azure/servicefabric'
    summary: The response is list of ServiceEvent objects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceEventList(serviceId: string, startTimeUtc: string,
        endTimeUtc: string, options?:
        ServiceFabricClientGetServiceEventListOptionalParams):
        Promise<GetServiceEventListResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServiceEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServiceEventListResponse"
          />&gt;
  - name: >-
      getServiceEventList(string, string, string,
      ServiceFabricClientGetServiceEventListOptionalParams,
      ServiceCallback<ServiceEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceEventList(serviceId: string, startTimeUtc: string,
        endTimeUtc: string, options:
        ServiceFabricClientGetServiceEventListOptionalParams, callback:
        ServiceCallback<ServiceEventUnion[]>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceEventUnion"
            />[]&gt;
          description: The callback
  - name: getServiceHealth(string, ServiceCallback<ServiceHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceHealth(serviceId: string, callback:
        ServiceCallback<ServiceHealth>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceHealth" />&gt;
          description: The callback
  - name: >-
      getServiceHealth(string,
      ServiceFabricClientGetServiceHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealth'
    package: '@azure/servicefabric'
    summary: >-
      Gets the health information of the specified service.

      Use EventsHealthStateFilter to filter the collection of health events
      reported on the service

      based on the health state.

      Use PartitionsHealthStateFilter to filter the collection of partitions
      returned.

      If you specify a service that does not exist in the health store, this
      request returns an error.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceHealth(serviceId: string, options?:
        ServiceFabricClientGetServiceHealthOptionalParams):
        Promise<GetServiceHealthResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServiceHealthResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServiceHealthResponse"
          />&gt;
  - name: >-
      getServiceHealth(string,
      ServiceFabricClientGetServiceHealthOptionalParams,
      ServiceCallback<ServiceHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceHealth(serviceId: string, options:
        ServiceFabricClientGetServiceHealthOptionalParams, callback:
        ServiceCallback<ServiceHealth>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceHealth" />&gt;
          description: The callback
  - name: getServiceHealthUsingPolicy(string, ServiceCallback<ServiceHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceHealthUsingPolicy(serviceId: string, callback:
        ServiceCallback<ServiceHealth>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceHealth" />&gt;
          description: The callback
  - name: >-
      getServiceHealthUsingPolicy(string,
      ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy'
    package: '@azure/servicefabric'
    summary: >-
      Gets the health information of the specified service.

      If the application health policy is specified, the health evaluation uses
      it to get the

      aggregated health state.

      If the policy is not specified, the health evaluation uses the application
      health policy defined

      in the application manifest, or the default health policy, if no policy is
      defined in the

      manifest.

      Use EventsHealthStateFilter to filter the collection of health events
      reported on the service

      based on the health state.

      Use PartitionsHealthStateFilter to filter the collection of partitions
      returned.

      If you specify a service that does not exist in the health store, this
      request returns an error.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceHealthUsingPolicy(serviceId: string, options?:
        ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams):
        Promise<GetServiceHealthUsingPolicyResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServiceHealthUsingPolicyResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServiceHealthUsingPolicyResponse"
          />&gt;
  - name: >-
      getServiceHealthUsingPolicy(string,
      ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams,
      ServiceCallback<ServiceHealth>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceHealthUsingPolicy_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceHealthUsingPolicy(serviceId: string, options:
        ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams, callback:
        ServiceCallback<ServiceHealth>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceHealthUsingPolicyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceHealth" />&gt;
          description: The callback
  - name: getServiceInfo(string, string, ServiceCallback<ServiceInfoUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceInfo(applicationId: string, serviceId: string,
        callback: ServiceCallback<ServiceInfoUnion>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceInfoUnion"
            />&gt;
          description: The callback
  - name: >-
      getServiceInfo(string, string,
      ServiceFabricClientGetServiceInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfo'
    package: '@azure/servicefabric'
    summary: >-
      Returns the information about the specified service belonging to the
      specified Service Fabric

      application.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceInfo(applicationId: string, serviceId: string,
        options?: ServiceFabricClientGetServiceInfoOptionalParams):
        Promise<GetServiceInfoResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServiceInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServiceInfoResponse"
          />&gt;
  - name: >-
      getServiceInfo(string, string,
      ServiceFabricClientGetServiceInfoOptionalParams,
      ServiceCallback<ServiceInfoUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceInfo(applicationId: string, serviceId: string,
        options: ServiceFabricClientGetServiceInfoOptionalParams, callback:
        ServiceCallback<ServiceInfoUnion>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceInfoUnion"
            />&gt;
          description: The callback
  - name: getServiceInfoList(string, ServiceCallback<PagedServiceInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfoList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceInfoList(applicationId: string, callback:
        ServiceCallback<PagedServiceInfoList>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedServiceInfoList"
            />&gt;
          description: The callback
  - name: >-
      getServiceInfoList(string,
      ServiceFabricClientGetServiceInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfoList'
    package: '@azure/servicefabric'
    summary: >-
      Returns the information about all services belonging to the application
      specified by the

      application ID.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceInfoList(applicationId: string, options?:
        ServiceFabricClientGetServiceInfoListOptionalParams):
        Promise<GetServiceInfoListResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServiceInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServiceInfoListResponse"
          />&gt;
  - name: >-
      getServiceInfoList(string,
      ServiceFabricClientGetServiceInfoListOptionalParams,
      ServiceCallback<PagedServiceInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceInfoList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceInfoList(applicationId: string, options:
        ServiceFabricClientGetServiceInfoListOptionalParams, callback:
        ServiceCallback<PagedServiceInfoList>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedServiceInfoList"
            />&gt;
          description: The callback
  - name: >-
      getServiceManifest(string, string, string,
      ServiceCallback<ServiceTypeManifest>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceManifest_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceManifest(applicationTypeName: string,
        applicationTypeVersion: string, serviceManifestName: string, callback:
        ServiceCallback<ServiceTypeManifest>)
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: applicationTypeVersion
          type: string
          description: The version of the application type.
        - id: serviceManifestName
          type: string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceTypeManifest"
            />&gt;
          description: The callback
  - name: >-
      getServiceManifest(string, string, string,
      ServiceFabricClientGetServiceManifestOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceManifest'
    package: '@azure/servicefabric'
    summary: >-
      Gets the manifest describing a service type. The response contains the
      service manifest XML as a

      string.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceManifest(applicationTypeName: string,
        applicationTypeVersion: string, serviceManifestName: string, options?:
        ServiceFabricClientGetServiceManifestOptionalParams):
        Promise<GetServiceManifestResponse>
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: applicationTypeVersion
          type: string
          description: The version of the application type.
        - id: serviceManifestName
          type: string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceManifestOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServiceManifestResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServiceManifestResponse"
          />&gt;
  - name: >-
      getServiceManifest(string, string, string,
      ServiceFabricClientGetServiceManifestOptionalParams,
      ServiceCallback<ServiceTypeManifest>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceManifest_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceManifest(applicationTypeName: string,
        applicationTypeVersion: string, serviceManifestName: string, options:
        ServiceFabricClientGetServiceManifestOptionalParams, callback:
        ServiceCallback<ServiceTypeManifest>)
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: applicationTypeVersion
          type: string
          description: The version of the application type.
        - id: serviceManifestName
          type: string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceManifestOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceTypeManifest"
            />&gt;
          description: The callback
  - name: getServiceNameInfo(string, ServiceCallback<ServiceNameInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceNameInfo(partitionId: string, callback:
        ServiceCallback<ServiceNameInfo>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceNameInfo"
            />&gt;
          description: The callback
  - name: >-
      getServiceNameInfo(string,
      ServiceFabricClientGetServiceNameInfoOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo'
    package: '@azure/servicefabric'
    summary: >-
      Gets name of the service for the specified partition. A 404 error is
      returned if the partition

      ID does not exist in the cluster.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceNameInfo(partitionId: string, options?:
        ServiceFabricClientGetServiceNameInfoOptionalParams):
        Promise<GetServiceNameInfoResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceNameInfoOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServiceNameInfoResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServiceNameInfoResponse"
          />&gt;
  - name: >-
      getServiceNameInfo(string,
      ServiceFabricClientGetServiceNameInfoOptionalParams,
      ServiceCallback<ServiceNameInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceNameInfo_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceNameInfo(partitionId: string, options:
        ServiceFabricClientGetServiceNameInfoOptionalParams, callback:
        ServiceCallback<ServiceNameInfo>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceNameInfoOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceNameInfo"
            />&gt;
          description: The callback
  - name: getServicesEventList(string, string, ServiceCallback<ServiceEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServicesEventList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServicesEventList(startTimeUtc: string, endTimeUtc: string,
        callback: ServiceCallback<ServiceEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getServicesEventList(string, string,
      ServiceFabricClientGetServicesEventListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServicesEventList'
    package: '@azure/servicefabric'
    summary: The response is list of ServiceEvent objects.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServicesEventList(startTimeUtc: string, endTimeUtc: string,
        options?: ServiceFabricClientGetServicesEventListOptionalParams):
        Promise<GetServicesEventListResponse>
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServicesEventListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServicesEventListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServicesEventListResponse"
          />&gt;
  - name: >-
      getServicesEventList(string, string,
      ServiceFabricClientGetServicesEventListOptionalParams,
      ServiceCallback<ServiceEventUnion[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServicesEventList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServicesEventList(startTimeUtc: string, endTimeUtc: string,
        options: ServiceFabricClientGetServicesEventListOptionalParams,
        callback: ServiceCallback<ServiceEventUnion[]>)
      parameters:
        - id: startTimeUtc
          type: string
          description: The start time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: endTimeUtc
          type: string
          description: The end time of a lookup query in ISO UTC yyyy-MM-ddTHH:mm:ssZ.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServicesEventListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceEventUnion"
            />[]&gt;
          description: The callback
  - name: >-
      getServiceTypeInfoByName(string, string, string,
      ServiceCallback<ServiceTypeInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceTypeInfoByName(applicationTypeName: string,
        applicationTypeVersion: string, serviceTypeName: string, callback:
        ServiceCallback<ServiceTypeInfo>)
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: applicationTypeVersion
          type: string
          description: The version of the application type.
        - id: serviceTypeName
          type: string
          description: Specifies the name of a Service Fabric service type.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceTypeInfo"
            />&gt;
          description: The callback
  - name: >-
      getServiceTypeInfoByName(string, string, string,
      ServiceFabricClientGetServiceTypeInfoByNameOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName'
    package: '@azure/servicefabric'
    summary: >-
      Gets the information about a specific service type that is supported by a
      provisioned

      application type in a Service Fabric cluster. The provided application
      type must exist.

      Otherwise, a 404 status is returned. A 204 response is returned if the
      specified service type is

      not found in the cluster.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceTypeInfoByName(applicationTypeName: string,
        applicationTypeVersion: string, serviceTypeName: string, options?:
        ServiceFabricClientGetServiceTypeInfoByNameOptionalParams):
        Promise<GetServiceTypeInfoByNameResponse>
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: applicationTypeVersion
          type: string
          description: The version of the application type.
        - id: serviceTypeName
          type: string
          description: Specifies the name of a Service Fabric service type.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServiceTypeInfoByNameResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServiceTypeInfoByNameResponse"
          />&gt;
  - name: >-
      getServiceTypeInfoByName(string, string, string,
      ServiceFabricClientGetServiceTypeInfoByNameOptionalParams,
      ServiceCallback<ServiceTypeInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoByName_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceTypeInfoByName(applicationTypeName: string,
        applicationTypeVersion: string, serviceTypeName: string, options:
        ServiceFabricClientGetServiceTypeInfoByNameOptionalParams, callback:
        ServiceCallback<ServiceTypeInfo>)
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: applicationTypeVersion
          type: string
          description: The version of the application type.
        - id: serviceTypeName
          type: string
          description: Specifies the name of a Service Fabric service type.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceTypeInfoByNameOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceTypeInfo"
            />&gt;
          description: The callback
  - name: getServiceTypeInfoList(string, string, ServiceCallback<ServiceTypeInfo[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceTypeInfoList(applicationTypeName: string,
        applicationTypeVersion: string, callback:
        ServiceCallback<ServiceTypeInfo[]>)
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: applicationTypeVersion
          type: string
          description: The version of the application type.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceTypeInfo"
            />[]&gt;
          description: The callback
  - name: >-
      getServiceTypeInfoList(string, string,
      ServiceFabricClientGetServiceTypeInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList'
    package: '@azure/servicefabric'
    summary: >-
      Gets the list containing the information about service types that are
      supported by a provisioned

      application type in a Service Fabric cluster. The provided application
      type must exist.

      Otherwise, a 404 status is returned.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceTypeInfoList(applicationTypeName: string,
        applicationTypeVersion: string, options?:
        ServiceFabricClientGetServiceTypeInfoListOptionalParams):
        Promise<GetServiceTypeInfoListResponse>
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: applicationTypeVersion
          type: string
          description: The version of the application type.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceTypeInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetServiceTypeInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetServiceTypeInfoListResponse"
          />&gt;
  - name: >-
      getServiceTypeInfoList(string, string,
      ServiceFabricClientGetServiceTypeInfoListOptionalParams,
      ServiceCallback<ServiceTypeInfo[]>)
    uid: '@azure/servicefabric.ServiceFabricClient.getServiceTypeInfoList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getServiceTypeInfoList(applicationTypeName: string,
        applicationTypeVersion: string, options:
        ServiceFabricClientGetServiceTypeInfoListOptionalParams, callback:
        ServiceCallback<ServiceTypeInfo[]>)
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: applicationTypeVersion
          type: string
          description: The version of the application type.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetServiceTypeInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceTypeInfo"
            />[]&gt;
          description: The callback
  - name: getSubNameInfoList(string, ServiceCallback<PagedSubNameInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSubNameInfoList(nameId: string, callback:
        ServiceCallback<PagedSubNameInfoList>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedSubNameInfoList"
            />&gt;
          description: The callback
  - name: >-
      getSubNameInfoList(string,
      ServiceFabricClientGetSubNameInfoListOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList'
    package: '@azure/servicefabric'
    summary: >-
      Enumerates all the Service Fabric names under a given name. If the
      subnames do not fit in a

      page, one page of results is returned as well as a continuation token,
      which can be used to get

      the next page. Querying a name that doesn't exist will fail.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSubNameInfoList(nameId: string, options?:
        ServiceFabricClientGetSubNameInfoListOptionalParams):
        Promise<GetSubNameInfoListResponse>
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetSubNameInfoListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetSubNameInfoListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetSubNameInfoListResponse"
          />&gt;
  - name: >-
      getSubNameInfoList(string,
      ServiceFabricClientGetSubNameInfoListOptionalParams,
      ServiceCallback<PagedSubNameInfoList>)
    uid: '@azure/servicefabric.ServiceFabricClient.getSubNameInfoList_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getSubNameInfoList(nameId: string, options:
        ServiceFabricClientGetSubNameInfoListOptionalParams, callback:
        ServiceCallback<PagedSubNameInfoList>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetSubNameInfoListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PagedSubNameInfoList"
            />&gt;
          description: The callback
  - name: >-
      getUnplacedReplicaInformation(string,
      ServiceCallback<UnplacedReplicaInformation>)
    uid: '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getUnplacedReplicaInformation(serviceId: string, callback:
        ServiceCallback<UnplacedReplicaInformation>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.UnplacedReplicaInformation"
            />&gt;
          description: The callback
  - name: >-
      getUnplacedReplicaInformation(string,
      ServiceFabricClientGetUnplacedReplicaInformationOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation'
    package: '@azure/servicefabric'
    summary: >-
      Returns the information about the unplaced replicas of the service.

      If PartitionId is specified, then result will contain information only
      about unplaced replicas

      for that partition.

      If PartitionId is not specified, then result will contain information
      about unplaced replicas

      for all partitions of that service.

      If OnlyQueryPrimaries is set to true, then result will contain information
      only about primary

      replicas, and will ignore unplaced secondary replicas.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getUnplacedReplicaInformation(serviceId: string, options?:
        ServiceFabricClientGetUnplacedReplicaInformationOptionalParams):
        Promise<GetUnplacedReplicaInformationResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetUnplacedReplicaInformationResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetUnplacedReplicaInformationResponse"
          />&gt;
  - name: >-
      getUnplacedReplicaInformation(string,
      ServiceFabricClientGetUnplacedReplicaInformationOptionalParams,
      ServiceCallback<UnplacedReplicaInformation>)
    uid: '@azure/servicefabric.ServiceFabricClient.getUnplacedReplicaInformation_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getUnplacedReplicaInformation(serviceId: string, options:
        ServiceFabricClientGetUnplacedReplicaInformationOptionalParams,
        callback: ServiceCallback<UnplacedReplicaInformation>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetUnplacedReplicaInformationOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.UnplacedReplicaInformation"
            />&gt;
          description: The callback
  - name: >-
      getUpgradeOrchestrationServiceState(ServiceCallback<UpgradeOrchestrationServiceState>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getUpgradeOrchestrationServiceState(callback:
        ServiceCallback<UpgradeOrchestrationServiceState>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.UpgradeOrchestrationServiceState"
            />&gt;
          description: The callback
  - name: >-
      getUpgradeOrchestrationServiceState(ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState
    package: '@azure/servicefabric'
    summary: >-
      Get the service state of Service Fabric Upgrade Orchestration Service.
      This API is internally

      used for support purposes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getUpgradeOrchestrationServiceState(options?:
        ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams):
        Promise<GetUpgradeOrchestrationServiceStateResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.GetUpgradeOrchestrationServiceStateResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.GetUpgradeOrchestrationServiceStateResponse"
          />&gt;
  - name: >-
      getUpgradeOrchestrationServiceState(ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams,
      ServiceCallback<UpgradeOrchestrationServiceState>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.getUpgradeOrchestrationServiceState_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getUpgradeOrchestrationServiceState(options:
        ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams,
        callback: ServiceCallback<UpgradeOrchestrationServiceState>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientGetUpgradeOrchestrationServiceStateOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.UpgradeOrchestrationServiceState"
            />&gt;
          description: The callback
  - name: >-
      invokeContainerApi(string, string, string, string, string,
      ContainerApiRequestBody, ServiceCallback<ContainerApiResponse>)
    uid: '@azure/servicefabric.ServiceFabricClient.invokeContainerApi_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function invokeContainerApi(nodeName: string, applicationId: string,
        serviceManifestName: string, codePackageName: string,
        codePackageInstanceId: string, containerApiRequestBody:
        ContainerApiRequestBody, callback:
        ServiceCallback<ContainerApiResponse>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceManifestName
          type: string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: codePackageName
          type: string
          description: >-
            The name of code package specified in service manifest registered as
            part

            of an application type in a Service Fabric cluster.
        - id: codePackageInstanceId
          type: string
          description: |-
            ID that uniquely identifies a code package instance deployed on a
            service fabric node.
        - id: containerApiRequestBody
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ContainerApiRequestBody"
            />
          description: Parameters for making container API call
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ContainerApiResponse"
            />&gt;
          description: The callback
  - name: >-
      invokeContainerApi(string, string, string, string, string,
      ContainerApiRequestBody,
      ServiceFabricClientInvokeContainerApiOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.invokeContainerApi'
    package: '@azure/servicefabric'
    summary: >-
      Invoke container API on a container deployed on a Service Fabric node for
      the given code

      package.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function invokeContainerApi(nodeName: string, applicationId: string,
        serviceManifestName: string, codePackageName: string,
        codePackageInstanceId: string, containerApiRequestBody:
        ContainerApiRequestBody, options?:
        ServiceFabricClientInvokeContainerApiOptionalParams):
        Promise<InvokeContainerApiResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceManifestName
          type: string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: codePackageName
          type: string
          description: >-
            The name of code package specified in service manifest registered as
            part

            of an application type in a Service Fabric cluster.
        - id: codePackageInstanceId
          type: string
          description: |-
            ID that uniquely identifies a code package instance deployed on a
            service fabric node.
        - id: containerApiRequestBody
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ContainerApiRequestBody"
            />
          description: Parameters for making container API call
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientInvokeContainerApiOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.InvokeContainerApiResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.InvokeContainerApiResponse"
          />&gt;
  - name: >-
      invokeContainerApi(string, string, string, string, string,
      ContainerApiRequestBody,
      ServiceFabricClientInvokeContainerApiOptionalParams,
      ServiceCallback<ContainerApiResponse>)
    uid: '@azure/servicefabric.ServiceFabricClient.invokeContainerApi_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function invokeContainerApi(nodeName: string, applicationId: string,
        serviceManifestName: string, codePackageName: string,
        codePackageInstanceId: string, containerApiRequestBody:
        ContainerApiRequestBody, options:
        ServiceFabricClientInvokeContainerApiOptionalParams, callback:
        ServiceCallback<ContainerApiResponse>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: serviceManifestName
          type: string
          description: |-
            The name of a service manifest registered as part of an application
            type in a Service Fabric cluster.
        - id: codePackageName
          type: string
          description: >-
            The name of code package specified in service manifest registered as
            part

            of an application type in a Service Fabric cluster.
        - id: codePackageInstanceId
          type: string
          description: |-
            ID that uniquely identifies a code package instance deployed on a
            service fabric node.
        - id: containerApiRequestBody
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ContainerApiRequestBody"
            />
          description: Parameters for making container API call
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientInvokeContainerApiOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ContainerApiResponse"
            />&gt;
          description: The callback
  - name: invokeInfrastructureCommand(string, ServiceCallback<string>)
    uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function invokeInfrastructureCommand(command: string, callback:
        ServiceCallback<string>)
      parameters:
        - id: command
          type: string
          description: |-
            The text of the command to be invoked. The content of the command is
            infrastructure-specific.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;string&gt;
          description: The callback
  - name: >-
      invokeInfrastructureCommand(string,
      ServiceFabricClientInvokeInfrastructureCommandOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand'
    package: '@azure/servicefabric'
    summary: >-
      For clusters that have one or more instances of the Infrastructure Service
      configured,

      this API provides a way to send infrastructure-specific commands to a
      particular

      instance of the Infrastructure Service.


      Available commands and their corresponding response formats vary depending
      upon

      the infrastructure on which the cluster is running.


      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function invokeInfrastructureCommand(command: string, options?:
        ServiceFabricClientInvokeInfrastructureCommandOptionalParams):
        Promise<InvokeInfrastructureCommandResponse>
      parameters:
        - id: command
          type: string
          description: |-
            The text of the command to be invoked. The content of the command is
            infrastructure-specific.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientInvokeInfrastructureCommandOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.InvokeInfrastructureCommandResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.InvokeInfrastructureCommandResponse"
          />&gt;
  - name: >-
      invokeInfrastructureCommand(string,
      ServiceFabricClientInvokeInfrastructureCommandOptionalParams,
      ServiceCallback<string>)
    uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureCommand_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function invokeInfrastructureCommand(command: string, options:
        ServiceFabricClientInvokeInfrastructureCommandOptionalParams, callback:
        ServiceCallback<string>)
      parameters:
        - id: command
          type: string
          description: |-
            The text of the command to be invoked. The content of the command is
            infrastructure-specific.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientInvokeInfrastructureCommandOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;string&gt;
          description: The callback
  - name: invokeInfrastructureQuery(string, ServiceCallback<string>)
    uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function invokeInfrastructureQuery(command: string, callback:
        ServiceCallback<string>)
      parameters:
        - id: command
          type: string
          description: |-
            The text of the command to be invoked. The content of the command is
            infrastructure-specific.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;string&gt;
          description: The callback
  - name: >-
      invokeInfrastructureQuery(string,
      ServiceFabricClientInvokeInfrastructureQueryOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery'
    package: '@azure/servicefabric'
    summary: >-
      For clusters that have one or more instances of the Infrastructure Service
      configured,

      this API provides a way to send infrastructure-specific queries to a
      particular

      instance of the Infrastructure Service.


      Available commands and their corresponding response formats vary depending
      upon

      the infrastructure on which the cluster is running.


      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function invokeInfrastructureQuery(command: string, options?:
        ServiceFabricClientInvokeInfrastructureQueryOptionalParams):
        Promise<InvokeInfrastructureQueryResponse>
      parameters:
        - id: command
          type: string
          description: |-
            The text of the command to be invoked. The content of the command is
            infrastructure-specific.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientInvokeInfrastructureQueryOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.InvokeInfrastructureQueryResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.InvokeInfrastructureQueryResponse"
          />&gt;
  - name: >-
      invokeInfrastructureQuery(string,
      ServiceFabricClientInvokeInfrastructureQueryOptionalParams,
      ServiceCallback<string>)
    uid: '@azure/servicefabric.ServiceFabricClient.invokeInfrastructureQuery_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function invokeInfrastructureQuery(command: string, options:
        ServiceFabricClientInvokeInfrastructureQueryOptionalParams, callback:
        ServiceCallback<string>)
      parameters:
        - id: command
          type: string
          description: |-
            The text of the command to be invoked. The content of the command is
            infrastructure-specific.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientInvokeInfrastructureQueryOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;string&gt;
          description: The callback
  - name: movePrimaryReplica(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function movePrimaryReplica(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      movePrimaryReplica(string,
      ServiceFabricClientMovePrimaryReplicaOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica'
    package: '@azure/servicefabric'
    summary: >-
      This command moves the primary replica of a partition of a stateful
      service, respecting all

      constraints.

      If NodeName parameter is specified, primary will be moved to the specified
      node (if constraints

      allow it).

      If NodeName parameter is not specified, primary replica will be moved to a
      random node in the

      cluster.

      If IgnoreConstraints parameter is specified and set to true, then primary
      will be moved

      regardless of the constraints.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function movePrimaryReplica(partitionId: string, options?:
        ServiceFabricClientMovePrimaryReplicaOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientMovePrimaryReplicaOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      movePrimaryReplica(string,
      ServiceFabricClientMovePrimaryReplicaOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.movePrimaryReplica_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function movePrimaryReplica(partitionId: string, options:
        ServiceFabricClientMovePrimaryReplicaOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientMovePrimaryReplicaOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: moveSecondaryReplica(string, string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function moveSecondaryReplica(partitionId: string, currentNodeName:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: currentNodeName
          type: string
          description: The name of the source node for secondary replica move.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      moveSecondaryReplica(string, string,
      ServiceFabricClientMoveSecondaryReplicaOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica'
    package: '@azure/servicefabric'
    summary: >-
      This command moves the secondary replica of a partition of a stateful
      service, respecting all

      constraints.

      CurrentNodeName parameter must be specified to identify the replica that
      is moved.

      Source node name must be specified, but new node name can be omitted, and
      in that case replica

      is moved to a random node.

      If IgnoreConstraints parameter is specified and set to true, then
      secondary will be moved

      regardless of the constraints.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function moveSecondaryReplica(partitionId: string, currentNodeName:
        string, options?:
        ServiceFabricClientMoveSecondaryReplicaOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: currentNodeName
          type: string
          description: The name of the source node for secondary replica move.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientMoveSecondaryReplicaOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      moveSecondaryReplica(string, string,
      ServiceFabricClientMoveSecondaryReplicaOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.moveSecondaryReplica_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function moveSecondaryReplica(partitionId: string, currentNodeName:
        string, options: ServiceFabricClientMoveSecondaryReplicaOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: currentNodeName
          type: string
          description: The name of the source node for secondary replica move.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientMoveSecondaryReplicaOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: postChaosSchedule(ChaosScheduleDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.postChaosSchedule_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function postChaosSchedule(chaosSchedule: ChaosScheduleDescription,
        callback: ServiceCallback<void>)
      parameters:
        - id: chaosSchedule
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ChaosScheduleDescription"
            />
          description: Describes the schedule used by Chaos.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      postChaosSchedule(ChaosScheduleDescription,
      ServiceFabricClientPostChaosScheduleOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.postChaosSchedule'
    package: '@azure/servicefabric'
    summary: >-
      Chaos will automatically schedule runs based on the Chaos Schedule.

      The Chaos Schedule will be updated if the provided version matches the
      version on the server.

      When updating the Chaos Schedule, the version on the server is incremented
      by 1.

      The version on the server will wrap back to 0 after reaching a large
      number.

      If Chaos is running when this call is made, the call will fail.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function postChaosSchedule(chaosSchedule: ChaosScheduleDescription,
        options?: ServiceFabricClientPostChaosScheduleOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: chaosSchedule
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ChaosScheduleDescription"
            />
          description: Describes the schedule used by Chaos.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientPostChaosScheduleOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      postChaosSchedule(ChaosScheduleDescription,
      ServiceFabricClientPostChaosScheduleOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.postChaosSchedule_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function postChaosSchedule(chaosSchedule: ChaosScheduleDescription,
        options: ServiceFabricClientPostChaosScheduleOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: chaosSchedule
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ChaosScheduleDescription"
            />
          description: Describes the schedule used by Chaos.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientPostChaosScheduleOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      provisionApplicationType(ProvisionApplicationTypeDescriptionBaseUnion,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.provisionApplicationType_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam:
        ProvisionApplicationTypeDescriptionBaseUnion, callback:
        ServiceCallback<void>)
      parameters:
        - id: provisionApplicationTypeDescriptionBaseRequiredBodyParam
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ProvisionApplicationTypeDescriptionBaseUnion"
            />
          description: >-
            The base type of provision

            application type description which supports either image store-based
            provision or external

            store-based provision.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      provisionApplicationType(ProvisionApplicationTypeDescriptionBaseUnion,
      ServiceFabricClientProvisionApplicationTypeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.provisionApplicationType'
    package: '@azure/servicefabric'
    summary: >-
      Provisions a Service Fabric application type with the cluster. The
      provision is required before

      any new applications can be instantiated.

      The provision operation can be performed either on the application package
      specified by the

      relativePathInImageStore, or by using the URI of the external '.sfpkg'.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam:
        ProvisionApplicationTypeDescriptionBaseUnion, options?:
        ServiceFabricClientProvisionApplicationTypeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: provisionApplicationTypeDescriptionBaseRequiredBodyParam
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ProvisionApplicationTypeDescriptionBaseUnion"
            />
          description: >-
            The base type of provision

            application type description which supports either image store-based
            provision or external

            store-based provision.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientProvisionApplicationTypeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      provisionApplicationType(ProvisionApplicationTypeDescriptionBaseUnion,
      ServiceFabricClientProvisionApplicationTypeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.provisionApplicationType_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        provisionApplicationType(provisionApplicationTypeDescriptionBaseRequiredBodyParam:
        ProvisionApplicationTypeDescriptionBaseUnion, options:
        ServiceFabricClientProvisionApplicationTypeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: provisionApplicationTypeDescriptionBaseRequiredBodyParam
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ProvisionApplicationTypeDescriptionBaseUnion"
            />
          description: >-
            The base type of provision

            application type description which supports either image store-based
            provision or external

            store-based provision.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientProvisionApplicationTypeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: provisionCluster(ProvisionFabricDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.provisionCluster_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function provisionCluster(provisionFabricDescription:
        ProvisionFabricDescription, callback: ServiceCallback<void>)
      parameters:
        - id: provisionFabricDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ProvisionFabricDescription"
            />
          description: Describes the parameters for provisioning a cluster.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      provisionCluster(ProvisionFabricDescription,
      ServiceFabricClientProvisionClusterOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.provisionCluster'
    package: '@azure/servicefabric'
    summary: >-
      Validate and provision the code or configuration packages of a Service
      Fabric cluster.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function provisionCluster(provisionFabricDescription:
        ProvisionFabricDescription, options?:
        ServiceFabricClientProvisionClusterOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: provisionFabricDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ProvisionFabricDescription"
            />
          description: Describes the parameters for provisioning a cluster.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientProvisionClusterOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      provisionCluster(ProvisionFabricDescription,
      ServiceFabricClientProvisionClusterOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.provisionCluster_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function provisionCluster(provisionFabricDescription:
        ProvisionFabricDescription, options:
        ServiceFabricClientProvisionClusterOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: provisionFabricDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ProvisionFabricDescription"
            />
          description: Describes the parameters for provisioning a cluster.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientProvisionClusterOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: putProperty(string, PropertyDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.putProperty_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function putProperty(nameId: string, propertyDescription:
        PropertyDescription, callback: ServiceCallback<void>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: propertyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.PropertyDescription"
            />
          description: Describes the Service Fabric property to be created.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      putProperty(string, PropertyDescription,
      ServiceFabricClientPutPropertyOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.putProperty'
    package: '@azure/servicefabric'
    summary: >-
      Creates or updates the specified Service Fabric property under a given
      name.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function putProperty(nameId: string, propertyDescription:
        PropertyDescription, options?:
        ServiceFabricClientPutPropertyOptionalParams): Promise<RestResponse>
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: propertyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.PropertyDescription"
            />
          description: Describes the Service Fabric property to be created.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientPutPropertyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      putProperty(string, PropertyDescription,
      ServiceFabricClientPutPropertyOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.putProperty_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function putProperty(nameId: string, propertyDescription:
        PropertyDescription, options:
        ServiceFabricClientPutPropertyOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: propertyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.PropertyDescription"
            />
          description: Describes the Service Fabric property to be created.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientPutPropertyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: recoverAllPartitions(ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function recoverAllPartitions(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      recoverAllPartitions(ServiceFabricClientRecoverAllPartitionsOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions'
    package: '@azure/servicefabric'
    summary: >-
      This operation should only be performed if it is known that the replicas
      that are down cannot be

      recovered. Incorrect use of this API can cause potential data loss.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverAllPartitions(options?:
        ServiceFabricClientRecoverAllPartitionsOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRecoverAllPartitionsOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      recoverAllPartitions(ServiceFabricClientRecoverAllPartitionsOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.recoverAllPartitions_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverAllPartitions(options:
        ServiceFabricClientRecoverAllPartitionsOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRecoverAllPartitionsOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: recoverPartition(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.recoverPartition_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverPartition(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      recoverPartition(string,
      ServiceFabricClientRecoverPartitionOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.recoverPartition'
    package: '@azure/servicefabric'
    summary: >-
      This operation should only be performed if it is known that the replicas
      that are down cannot be

      recovered. Incorrect use of this API can cause potential data loss.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverPartition(partitionId: string, options?:
        ServiceFabricClientRecoverPartitionOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRecoverPartitionOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      recoverPartition(string,
      ServiceFabricClientRecoverPartitionOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.recoverPartition_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverPartition(partitionId: string, options:
        ServiceFabricClientRecoverPartitionOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRecoverPartitionOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: recoverServicePartitions(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverServicePartitions(serviceId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      recoverServicePartitions(string,
      ServiceFabricClientRecoverServicePartitionsOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions'
    package: '@azure/servicefabric'
    summary: >-
      Indicates to the Service Fabric cluster that it should attempt to recover
      the specified service

      that is currently stuck in quorum loss. This operation should only be
      performed if it is known

      that the replicas that are down cannot be recovered. Incorrect use of this
      API can cause

      potential data loss.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverServicePartitions(serviceId: string, options?:
        ServiceFabricClientRecoverServicePartitionsOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRecoverServicePartitionsOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      recoverServicePartitions(string,
      ServiceFabricClientRecoverServicePartitionsOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.recoverServicePartitions_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverServicePartitions(serviceId: string, options:
        ServiceFabricClientRecoverServicePartitionsOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRecoverServicePartitionsOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: recoverSystemPartitions(ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function recoverSystemPartitions(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      recoverSystemPartitions(ServiceFabricClientRecoverSystemPartitionsOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions'
    package: '@azure/servicefabric'
    summary: >-
      Indicates to the Service Fabric cluster that it should attempt to recover
      the system services

      that are currently stuck in quorum loss. This operation should only be
      performed if it is known

      that the replicas that are down cannot be recovered. Incorrect use of this
      API can cause

      potential data loss.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverSystemPartitions(options?:
        ServiceFabricClientRecoverSystemPartitionsOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRecoverSystemPartitionsOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      recoverSystemPartitions(ServiceFabricClientRecoverSystemPartitionsOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.recoverSystemPartitions_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function recoverSystemPartitions(options:
        ServiceFabricClientRecoverSystemPartitionsOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRecoverSystemPartitionsOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: removeComposeDeployment(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeComposeDeployment(deploymentName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      removeComposeDeployment(string,
      ServiceFabricClientRemoveComposeDeploymentOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment'
    package: '@azure/servicefabric'
    summary: Deletes an existing Service Fabric compose deployment.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeComposeDeployment(deploymentName: string, options?:
        ServiceFabricClientRemoveComposeDeploymentOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRemoveComposeDeploymentOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      removeComposeDeployment(string,
      ServiceFabricClientRemoveComposeDeploymentOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.removeComposeDeployment_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeComposeDeployment(deploymentName: string, options:
        ServiceFabricClientRemoveComposeDeploymentOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRemoveComposeDeploymentOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: removeConfigurationOverrides(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.removeConfigurationOverrides_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeConfigurationOverrides(nodeName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      removeConfigurationOverrides(string,
      ServiceFabricClientRemoveConfigurationOverridesOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.removeConfigurationOverrides'
    package: '@azure/servicefabric'
    summary: >-
      This api allows removing all existing configuration overrides on specified
      node.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeConfigurationOverrides(nodeName: string, options?:
        ServiceFabricClientRemoveConfigurationOverridesOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRemoveConfigurationOverridesOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      removeConfigurationOverrides(string,
      ServiceFabricClientRemoveConfigurationOverridesOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.removeConfigurationOverrides_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeConfigurationOverrides(nodeName: string, options:
        ServiceFabricClientRemoveConfigurationOverridesOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRemoveConfigurationOverridesOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: removeNodeState(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.removeNodeState_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeNodeState(nodeName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: removeNodeState(string, ServiceFabricClientRemoveNodeStateOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.removeNodeState'
    package: '@azure/servicefabric'
    summary: >-
      This implies that it is not possible to recover the persisted state of
      that node. This generally

      happens if a hard disk has been wiped clean, or if a hard disk crashes.
      The node has to be down

      for this operation to be successful. This operation lets Service Fabric
      know that the replicas

      on that node no longer exist, and that Service Fabric should stop waiting
      for those replicas to

      come back up. Do not run this cmdlet if the state on the node has not been
      removed and the node

      can come back up with its state intact. Starting from Service Fabric 6.5,
      in order to use this

      API for seed nodes, please change the seed nodes to regular (non-seed)
      nodes and then invoke

      this API to remove the node state. If the cluster is running on Azure,
      after the seed node goes

      down, Service Fabric will try to change it to a non-seed node
      automatically. To make this

      happen, make sure the number of non-seed nodes in the primary node type is
      no less than the

      number of Down seed nodes. If necessary, add more nodes to the primary
      node type to achieve

      this. For standalone cluster, if the Down seed node is not expected to
      come back up with its

      state intact, please remove the node from the cluster, see

      https://docs.microsoft.com/en-us/azure/service-fabric/service-fabric-cluster-windows-server-add-remove-nodes
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeNodeState(nodeName: string, options?:
        ServiceFabricClientRemoveNodeStateOptionalParams): Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRemoveNodeStateOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      removeNodeState(string, ServiceFabricClientRemoveNodeStateOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.removeNodeState_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeNodeState(nodeName: string, options:
        ServiceFabricClientRemoveNodeStateOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRemoveNodeStateOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: removeReplica(string, string, string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.removeReplica_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeReplica(nodeName: string, partitionId: string, replicaId:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      removeReplica(string, string, string,
      ServiceFabricClientRemoveReplicaOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.removeReplica'
    package: '@azure/servicefabric'
    summary: >-
      This API simulates a Service Fabric replica failure by removing a replica
      from a Service Fabric

      cluster. The removal closes the replica, transitions the replica to the
      role None, and then

      removes all of the state information of the replica from the cluster. This
      API tests the replica

      state removal path, and simulates the report fault permanent path through
      client APIs. Warning -

      There are no safety checks performed when this API is used. Incorrect use
      of this API can lead

      to data loss for stateful services. In addition, the forceRemove flag
      impacts all other replicas

      hosted in the same process.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeReplica(nodeName: string, partitionId: string, replicaId:
        string, options?: ServiceFabricClientRemoveReplicaOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRemoveReplicaOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      removeReplica(string, string, string,
      ServiceFabricClientRemoveReplicaOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.removeReplica_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function removeReplica(nodeName: string, partitionId: string, replicaId:
        string, options: ServiceFabricClientRemoveReplicaOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRemoveReplicaOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: reportApplicationHealth(string, HealthInformation, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportApplicationHealth(applicationId: string,
        healthInformation: HealthInformation, callback: ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      reportApplicationHealth(string, HealthInformation,
      ServiceFabricClientReportApplicationHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth'
    package: '@azure/servicefabric'
    summary: >-
      Reports health state of the specified Service Fabric application. The
      report must contain the

      information about the source of the health report and property on which it
      is reported.

      The report is sent to a Service Fabric gateway Application, which forwards
      to the health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, get application
      health and check that

      the report appears in the HealthEvents section.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportApplicationHealth(applicationId: string,
        healthInformation: HealthInformation, options?:
        ServiceFabricClientReportApplicationHealthOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportApplicationHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      reportApplicationHealth(string, HealthInformation,
      ServiceFabricClientReportApplicationHealthOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportApplicationHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportApplicationHealth(applicationId: string,
        healthInformation: HealthInformation, options:
        ServiceFabricClientReportApplicationHealthOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportApplicationHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: reportClusterHealth(HealthInformation, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportClusterHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportClusterHealth(healthInformation: HealthInformation,
        callback: ServiceCallback<void>)
      parameters:
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      reportClusterHealth(HealthInformation,
      ServiceFabricClientReportClusterHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.reportClusterHealth'
    package: '@azure/servicefabric'
    summary: >-
      Sends a health report on a Service Fabric cluster. The report must contain
      the information about

      the source of the health report and property on which it is reported.

      The report is sent to a Service Fabric gateway node, which forwards to the
      health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, run
      GetClusterHealth and check that

      the report appears in the HealthEvents section.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportClusterHealth(healthInformation: HealthInformation,
        options?: ServiceFabricClientReportClusterHealthOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportClusterHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      reportClusterHealth(HealthInformation,
      ServiceFabricClientReportClusterHealthOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportClusterHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportClusterHealth(healthInformation: HealthInformation,
        options: ServiceFabricClientReportClusterHealthOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportClusterHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      reportDeployedApplicationHealth(string, string, HealthInformation,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportDeployedApplicationHealth(nodeName: string,
        applicationId: string, healthInformation: HealthInformation, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      reportDeployedApplicationHealth(string, string, HealthInformation,
      ServiceFabricClientReportDeployedApplicationHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth'
    package: '@azure/servicefabric'
    summary: >-
      Reports health state of the application deployed on a Service Fabric node.
      The report must

      contain the information about the source of the health report and property
      on which it is

      reported.

      The report is sent to a Service Fabric gateway Service, which forwards to
      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, get deployed
      application health and

      check that the report appears in the HealthEvents section.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportDeployedApplicationHealth(nodeName: string,
        applicationId: string, healthInformation: HealthInformation, options?:
        ServiceFabricClientReportDeployedApplicationHealthOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportDeployedApplicationHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      reportDeployedApplicationHealth(string, string, HealthInformation,
      ServiceFabricClientReportDeployedApplicationHealthOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportDeployedApplicationHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportDeployedApplicationHealth(nodeName: string,
        applicationId: string, healthInformation: HealthInformation, options:
        ServiceFabricClientReportDeployedApplicationHealthOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportDeployedApplicationHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      reportDeployedServicePackageHealth(string, string, string,
      HealthInformation, ServiceCallback<void>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportDeployedServicePackageHealth(nodeName: string,
        applicationId: string, servicePackageName: string, healthInformation:
        HealthInformation, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type: string
          description: The name of the service package.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      reportDeployedServicePackageHealth(string, string, string,
      HealthInformation,
      ServiceFabricClientReportDeployedServicePackageHealthOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth
    package: '@azure/servicefabric'
    summary: >-
      Reports health state of the service package of the application deployed on
      a Service Fabric

      node. The report must contain the information about the source of the
      health report and property

      on which it is reported.

      The report is sent to a Service Fabric gateway Service, which forwards to
      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, get deployed
      service package health

      and check that the report appears in the HealthEvents section.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportDeployedServicePackageHealth(nodeName: string,
        applicationId: string, servicePackageName: string, healthInformation:
        HealthInformation, options?:
        ServiceFabricClientReportDeployedServicePackageHealthOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type: string
          description: The name of the service package.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      reportDeployedServicePackageHealth(string, string, string,
      HealthInformation,
      ServiceFabricClientReportDeployedServicePackageHealthOptionalParams,
      ServiceCallback<void>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.reportDeployedServicePackageHealth_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportDeployedServicePackageHealth(nodeName: string,
        applicationId: string, servicePackageName: string, healthInformation:
        HealthInformation, options:
        ServiceFabricClientReportDeployedServicePackageHealthOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: servicePackageName
          type: string
          description: The name of the service package.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportDeployedServicePackageHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: reportNodeHealth(string, HealthInformation, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportNodeHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportNodeHealth(nodeName: string, healthInformation:
        HealthInformation, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      reportNodeHealth(string, HealthInformation,
      ServiceFabricClientReportNodeHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.reportNodeHealth'
    package: '@azure/servicefabric'
    summary: >-
      Reports health state of the specified Service Fabric node. The report must
      contain the

      information about the source of the health report and property on which it
      is reported.

      The report is sent to a Service Fabric gateway node, which forwards to the
      health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, run
      GetNodeHealth and check that the

      report appears in the HealthEvents section.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportNodeHealth(nodeName: string, healthInformation:
        HealthInformation, options?:
        ServiceFabricClientReportNodeHealthOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportNodeHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      reportNodeHealth(string, HealthInformation,
      ServiceFabricClientReportNodeHealthOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportNodeHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportNodeHealth(nodeName: string, healthInformation:
        HealthInformation, options:
        ServiceFabricClientReportNodeHealthOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportNodeHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: reportPartitionHealth(string, HealthInformation, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportPartitionHealth(partitionId: string, healthInformation:
        HealthInformation, callback: ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      reportPartitionHealth(string, HealthInformation,
      ServiceFabricClientReportPartitionHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth'
    package: '@azure/servicefabric'
    summary: >-
      Reports health state of the specified Service Fabric partition. The report
      must contain the

      information about the source of the health report and property on which it
      is reported.

      The report is sent to a Service Fabric gateway Partition, which forwards
      to the health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, run
      GetPartitionHealth and check that

      the report appears in the HealthEvents section.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportPartitionHealth(partitionId: string, healthInformation:
        HealthInformation, options?:
        ServiceFabricClientReportPartitionHealthOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportPartitionHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      reportPartitionHealth(string, HealthInformation,
      ServiceFabricClientReportPartitionHealthOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportPartitionHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportPartitionHealth(partitionId: string, healthInformation:
        HealthInformation, options:
        ServiceFabricClientReportPartitionHealthOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportPartitionHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      reportReplicaHealth(string, string, ReplicaHealthReportServiceKind,
      HealthInformation, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportReplicaHealth(partitionId: string, replicaId: string,
        serviceKind: ReplicaHealthReportServiceKind, healthInformation:
        HealthInformation, callback: ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: serviceKind
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaHealthReportServiceKind"
            />
          description: >-
            The kind of service replica (Stateless or Stateful) for which the
            health is

            being reported. Following are the possible values. Possible values
            include: 'Stateless',

            'Stateful'
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      reportReplicaHealth(string, string, ReplicaHealthReportServiceKind,
      HealthInformation, ServiceFabricClientReportReplicaHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth'
    package: '@azure/servicefabric'
    summary: >-
      Reports health state of the specified Service Fabric replica. The report
      must contain the

      information about the source of the health report and property on which it
      is reported.

      The report is sent to a Service Fabric gateway Replica, which forwards to
      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, run
      GetReplicaHealth and check that

      the report appears in the HealthEvents section.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportReplicaHealth(partitionId: string, replicaId: string,
        serviceKind: ReplicaHealthReportServiceKind, healthInformation:
        HealthInformation, options?:
        ServiceFabricClientReportReplicaHealthOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: serviceKind
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaHealthReportServiceKind"
            />
          description: >-
            The kind of service replica (Stateless or Stateful) for which the
            health is

            being reported. Following are the possible values. Possible values
            include: 'Stateless',

            'Stateful'
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportReplicaHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      reportReplicaHealth(string, string, ReplicaHealthReportServiceKind,
      HealthInformation, ServiceFabricClientReportReplicaHealthOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportReplicaHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportReplicaHealth(partitionId: string, replicaId: string,
        serviceKind: ReplicaHealthReportServiceKind, healthInformation:
        HealthInformation, options:
        ServiceFabricClientReportReplicaHealthOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: serviceKind
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ReplicaHealthReportServiceKind"
            />
          description: >-
            The kind of service replica (Stateless or Stateful) for which the
            health is

            being reported. Following are the possible values. Possible values
            include: 'Stateless',

            'Stateful'
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportReplicaHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: reportServiceHealth(string, HealthInformation, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportServiceHealth_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportServiceHealth(serviceId: string, healthInformation:
        HealthInformation, callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      reportServiceHealth(string, HealthInformation,
      ServiceFabricClientReportServiceHealthOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.reportServiceHealth'
    package: '@azure/servicefabric'
    summary: >-
      Reports health state of the specified Service Fabric service. The report
      must contain the

      information about the source of the health report and property on which it
      is reported.

      The report is sent to a Service Fabric gateway Service, which forwards to
      the health store.

      The report may be accepted by the gateway, but rejected by the health
      store after extra

      validation.

      For example, the health store may reject the report because of an invalid
      parameter, like a

      stale sequence number.

      To see whether the report was applied in the health store, run
      GetServiceHealth and check that

      the report appears in the HealthEvents section.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportServiceHealth(serviceId: string, healthInformation:
        HealthInformation, options?:
        ServiceFabricClientReportServiceHealthOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportServiceHealthOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      reportServiceHealth(string, HealthInformation,
      ServiceFabricClientReportServiceHealthOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.reportServiceHealth_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reportServiceHealth(serviceId: string, healthInformation:
        HealthInformation, options:
        ServiceFabricClientReportServiceHealthOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: healthInformation
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.HealthInformation" />
          description: >-
            Describes the health information for the health report. This

            information needs to be present in all of the health reports sent to
            the health manager.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientReportServiceHealthOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: resetPartitionLoad(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resetPartitionLoad(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      resetPartitionLoad(string,
      ServiceFabricClientResetPartitionLoadOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad'
    package: '@azure/servicefabric'
    summary: >-
      Resets the current load of a Service Fabric partition to the default load
      for the service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resetPartitionLoad(partitionId: string, options?:
        ServiceFabricClientResetPartitionLoadOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResetPartitionLoadOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      resetPartitionLoad(string,
      ServiceFabricClientResetPartitionLoadOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.resetPartitionLoad_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resetPartitionLoad(partitionId: string, options:
        ServiceFabricClientResetPartitionLoadOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResetPartitionLoadOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: resolveService(string, ServiceCallback<ResolvedServicePartition>)
    uid: '@azure/servicefabric.ServiceFabricClient.resolveService_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resolveService(serviceId: string, callback:
        ServiceCallback<ResolvedServicePartition>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ResolvedServicePartition"
            />&gt;
          description: The callback
  - name: resolveService(string, ServiceFabricClientResolveServiceOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.resolveService'
    package: '@azure/servicefabric'
    summary: >-
      Resolve a Service Fabric service partition to get the endpoints of the
      service replicas.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resolveService(serviceId: string, options?:
        ServiceFabricClientResolveServiceOptionalParams):
        Promise<ResolveServiceResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResolveServiceOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ResolveServiceResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.ResolveServiceResponse"
          />&gt;
  - name: >-
      resolveService(string, ServiceFabricClientResolveServiceOptionalParams,
      ServiceCallback<ResolvedServicePartition>)
    uid: '@azure/servicefabric.ServiceFabricClient.resolveService_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resolveService(serviceId: string, options:
        ServiceFabricClientResolveServiceOptionalParams, callback:
        ServiceCallback<ResolvedServicePartition>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResolveServiceOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.ResolvedServicePartition"
            />&gt;
          description: The callback
  - name: >-
      restartDeployedCodePackage(string, string,
      RestartDeployedCodePackageDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restartDeployedCodePackage(nodeName: string, applicationId:
        string, restartDeployedCodePackageDescription:
        RestartDeployedCodePackageDescription, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: restartDeployedCodePackageDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RestartDeployedCodePackageDescription"
            />
          description: |-
            Describes the deployed code package on Service
            Fabric node to restart.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      restartDeployedCodePackage(string, string,
      RestartDeployedCodePackageDescription,
      ServiceFabricClientRestartDeployedCodePackageOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage'
    package: '@azure/servicefabric'
    summary: >-
      Restarts a code package deployed on a Service Fabric node in a cluster.
      This aborts the code

      package process, which will restart all the user service replicas hosted
      in that process.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restartDeployedCodePackage(nodeName: string, applicationId:
        string, restartDeployedCodePackageDescription:
        RestartDeployedCodePackageDescription, options?:
        ServiceFabricClientRestartDeployedCodePackageOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: restartDeployedCodePackageDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RestartDeployedCodePackageDescription"
            />
          description: |-
            Describes the deployed code package on Service
            Fabric node to restart.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRestartDeployedCodePackageOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      restartDeployedCodePackage(string, string,
      RestartDeployedCodePackageDescription,
      ServiceFabricClientRestartDeployedCodePackageOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.restartDeployedCodePackage_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restartDeployedCodePackage(nodeName: string, applicationId:
        string, restartDeployedCodePackageDescription:
        RestartDeployedCodePackageDescription, options:
        ServiceFabricClientRestartDeployedCodePackageOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: restartDeployedCodePackageDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RestartDeployedCodePackageDescription"
            />
          description: |-
            Describes the deployed code package on Service
            Fabric node to restart.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRestartDeployedCodePackageOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: restartNode(string, RestartNodeDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.restartNode_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restartNode(nodeName: string, restartNodeDescription:
        RestartNodeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: restartNodeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RestartNodeDescription"
            />
          description: |-
            The instance of the node to be restarted and a flag indicating the
            need to take dump of the fabric process.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      restartNode(string, RestartNodeDescription,
      ServiceFabricClientRestartNodeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.restartNode'
    package: '@azure/servicefabric'
    summary: Restarts a Service Fabric cluster node that is already started.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restartNode(nodeName: string, restartNodeDescription:
        RestartNodeDescription, options?:
        ServiceFabricClientRestartNodeOptionalParams): Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: restartNodeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RestartNodeDescription"
            />
          description: |-
            The instance of the node to be restarted and a flag indicating the
            need to take dump of the fabric process.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRestartNodeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      restartNode(string, RestartNodeDescription,
      ServiceFabricClientRestartNodeOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.restartNode_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restartNode(nodeName: string, restartNodeDescription:
        RestartNodeDescription, options:
        ServiceFabricClientRestartNodeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: restartNodeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RestartNodeDescription"
            />
          description: |-
            The instance of the node to be restarted and a flag indicating the
            need to take dump of the fabric process.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRestartNodeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: restartReplica(string, string, string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.restartReplica_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restartReplica(nodeName: string, partitionId: string,
        replicaId: string, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      restartReplica(string, string, string,
      ServiceFabricClientRestartReplicaOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.restartReplica'
    package: '@azure/servicefabric'
    summary: >-
      Restarts a service replica of a persisted service running on a node.
      Warning - There are no

      safety checks performed when this API is used. Incorrect use of this API
      can lead to

      availability loss for stateful services.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restartReplica(nodeName: string, partitionId: string,
        replicaId: string, options?:
        ServiceFabricClientRestartReplicaOptionalParams): Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRestartReplicaOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      restartReplica(string, string, string,
      ServiceFabricClientRestartReplicaOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.restartReplica_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restartReplica(nodeName: string, partitionId: string,
        replicaId: string, options:
        ServiceFabricClientRestartReplicaOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: replicaId
          type: string
          description: The identifier of the replica.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRestartReplicaOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      restorePartition(string, RestorePartitionDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.restorePartition_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restorePartition(partitionId: string,
        restorePartitionDescription: RestorePartitionDescription, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: restorePartitionDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RestorePartitionDescription"
            />
          description: Describes the parameters to restore the partition.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      restorePartition(string, RestorePartitionDescription,
      ServiceFabricClientRestorePartitionOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.restorePartition'
    package: '@azure/servicefabric'
    summary: >-
      Restores the state of a of the stateful persisted partition using the
      specified backup point. In

      case the partition is already being periodically backed up, then by
      default the backup point is

      looked for in the storage specified in backup policy. One can also
      override the same by

      specifying the backup storage details as part of the restore partition
      description in body. Once

      the restore is initiated, its progress can be tracked using the
      GetRestoreProgress operation.

      In case, the operation times out, specify a greater restore timeout value
      in the query

      parameter.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restorePartition(partitionId: string,
        restorePartitionDescription: RestorePartitionDescription, options?:
        ServiceFabricClientRestorePartitionOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: restorePartitionDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RestorePartitionDescription"
            />
          description: Describes the parameters to restore the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRestorePartitionOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      restorePartition(string, RestorePartitionDescription,
      ServiceFabricClientRestorePartitionOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.restorePartition_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restorePartition(partitionId: string,
        restorePartitionDescription: RestorePartitionDescription, options:
        ServiceFabricClientRestorePartitionOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: restorePartitionDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RestorePartitionDescription"
            />
          description: Describes the parameters to restore the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRestorePartitionOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: resumeApplicationBackup(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeApplicationBackup(applicationId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      resumeApplicationBackup(string,
      ServiceFabricClientResumeApplicationBackupOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup'
    package: '@azure/servicefabric'
    summary: >-
      The previously suspended Service Fabric application resumes taking
      periodic backup as per the

      backup policy currently configured for the same.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeApplicationBackup(applicationId: string, options?:
        ServiceFabricClientResumeApplicationBackupOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResumeApplicationBackupOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      resumeApplicationBackup(string,
      ServiceFabricClientResumeApplicationBackupOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationBackup_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeApplicationBackup(applicationId: string, options:
        ServiceFabricClientResumeApplicationBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResumeApplicationBackupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      resumeApplicationUpgrade(string, ResumeApplicationUpgradeDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeApplicationUpgrade(applicationId: string,
        resumeApplicationUpgradeDescription:
        ResumeApplicationUpgradeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: resumeApplicationUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ResumeApplicationUpgradeDescription"
            />
          description: |-
            Describes the parameters for resuming an application
            upgrade.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      resumeApplicationUpgrade(string, ResumeApplicationUpgradeDescription,
      ServiceFabricClientResumeApplicationUpgradeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade'
    package: '@azure/servicefabric'
    summary: >-
      Resumes an unmonitored manual Service Fabric application upgrade. Service
      Fabric upgrades one

      upgrade domain at a time. For unmonitored manual upgrades, after Service
      Fabric finishes an

      upgrade domain, it waits for you to call this API before proceeding to the
      next upgrade domain.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeApplicationUpgrade(applicationId: string,
        resumeApplicationUpgradeDescription:
        ResumeApplicationUpgradeDescription, options?:
        ServiceFabricClientResumeApplicationUpgradeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: resumeApplicationUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ResumeApplicationUpgradeDescription"
            />
          description: |-
            Describes the parameters for resuming an application
            upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResumeApplicationUpgradeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      resumeApplicationUpgrade(string, ResumeApplicationUpgradeDescription,
      ServiceFabricClientResumeApplicationUpgradeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.resumeApplicationUpgrade_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeApplicationUpgrade(applicationId: string,
        resumeApplicationUpgradeDescription:
        ResumeApplicationUpgradeDescription, options:
        ServiceFabricClientResumeApplicationUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: resumeApplicationUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ResumeApplicationUpgradeDescription"
            />
          description: |-
            Describes the parameters for resuming an application
            upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResumeApplicationUpgradeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      resumeClusterUpgrade(ResumeClusterUpgradeDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeClusterUpgrade(resumeClusterUpgradeDescription:
        ResumeClusterUpgradeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: resumeClusterUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ResumeClusterUpgradeDescription"
            />
          description: Describes the parameters for resuming a cluster upgrade.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      resumeClusterUpgrade(ResumeClusterUpgradeDescription,
      ServiceFabricClientResumeClusterUpgradeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade'
    package: '@azure/servicefabric'
    summary: >-
      Make the cluster code or configuration upgrade move on to the next upgrade
      domain if

      appropriate.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeClusterUpgrade(resumeClusterUpgradeDescription:
        ResumeClusterUpgradeDescription, options?:
        ServiceFabricClientResumeClusterUpgradeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: resumeClusterUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ResumeClusterUpgradeDescription"
            />
          description: Describes the parameters for resuming a cluster upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResumeClusterUpgradeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      resumeClusterUpgrade(ResumeClusterUpgradeDescription,
      ServiceFabricClientResumeClusterUpgradeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.resumeClusterUpgrade_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeClusterUpgrade(resumeClusterUpgradeDescription:
        ResumeClusterUpgradeDescription, options:
        ServiceFabricClientResumeClusterUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: resumeClusterUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ResumeClusterUpgradeDescription"
            />
          description: Describes the parameters for resuming a cluster upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResumeClusterUpgradeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: resumePartitionBackup(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumePartitionBackup(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      resumePartitionBackup(string,
      ServiceFabricClientResumePartitionBackupOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup'
    package: '@azure/servicefabric'
    summary: >-
      The previously suspended partition resumes taking periodic backup as per
      the backup policy

      currently configured for the same.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumePartitionBackup(partitionId: string, options?:
        ServiceFabricClientResumePartitionBackupOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResumePartitionBackupOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      resumePartitionBackup(string,
      ServiceFabricClientResumePartitionBackupOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.resumePartitionBackup_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumePartitionBackup(partitionId: string, options:
        ServiceFabricClientResumePartitionBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResumePartitionBackupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: resumeServiceBackup(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeServiceBackup(serviceId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      resumeServiceBackup(string,
      ServiceFabricClientResumeServiceBackupOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup'
    package: '@azure/servicefabric'
    summary: >-
      The previously suspended Service Fabric service resumes taking periodic
      backup as per the backup

      policy currently configured for the same.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeServiceBackup(serviceId: string, options?:
        ServiceFabricClientResumeServiceBackupOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResumeServiceBackupOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      resumeServiceBackup(string,
      ServiceFabricClientResumeServiceBackupOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.resumeServiceBackup_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeServiceBackup(serviceId: string, options:
        ServiceFabricClientResumeServiceBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientResumeServiceBackupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: rollbackApplicationUpgrade(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function rollbackApplicationUpgrade(applicationId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      rollbackApplicationUpgrade(string,
      ServiceFabricClientRollbackApplicationUpgradeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade'
    package: '@azure/servicefabric'
    summary: >-
      Starts rolling back the current application upgrade to the previous
      version. This API can only

      be used to roll back the current in-progress upgrade that is rolling
      forward to new version. If

      the application is not currently being upgraded use
      StartApplicationUpgrade API to upgrade it to

      desired version, including rolling back to a previous version.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function rollbackApplicationUpgrade(applicationId: string, options?:
        ServiceFabricClientRollbackApplicationUpgradeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRollbackApplicationUpgradeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      rollbackApplicationUpgrade(string,
      ServiceFabricClientRollbackApplicationUpgradeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.rollbackApplicationUpgrade_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function rollbackApplicationUpgrade(applicationId: string, options:
        ServiceFabricClientRollbackApplicationUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRollbackApplicationUpgradeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: rollbackClusterUpgrade(ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function rollbackClusterUpgrade(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      rollbackClusterUpgrade(ServiceFabricClientRollbackClusterUpgradeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade'
    package: '@azure/servicefabric'
    summary: Roll back the code or configuration upgrade of a Service Fabric cluster.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function rollbackClusterUpgrade(options?:
        ServiceFabricClientRollbackClusterUpgradeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRollbackClusterUpgradeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      rollbackClusterUpgrade(ServiceFabricClientRollbackClusterUpgradeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.rollbackClusterUpgrade_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function rollbackClusterUpgrade(options:
        ServiceFabricClientRollbackClusterUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientRollbackClusterUpgradeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      setUpgradeOrchestrationServiceState(UpgradeOrchestrationServiceState,
      ServiceCallback<UpgradeOrchestrationServiceStateSummary>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState:
        UpgradeOrchestrationServiceState, callback:
        ServiceCallback<UpgradeOrchestrationServiceStateSummary>)
      parameters:
        - id: upgradeOrchestrationServiceState
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.UpgradeOrchestrationServiceState"
            />
          description: |-
            Service state of Service Fabric Upgrade Orchestration
            Service.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.UpgradeOrchestrationServiceStateSummary"
            />&gt;
          description: The callback
  - name: >-
      setUpgradeOrchestrationServiceState(UpgradeOrchestrationServiceState,
      ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState
    package: '@azure/servicefabric'
    summary: >-
      Update the service state of Service Fabric Upgrade Orchestration Service.
      This API is internally

      used for support purposes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState:
        UpgradeOrchestrationServiceState, options?:
        ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams):
        Promise<SetUpgradeOrchestrationServiceStateResponse>
      parameters:
        - id: upgradeOrchestrationServiceState
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.UpgradeOrchestrationServiceState"
            />
          description: |-
            Service state of Service Fabric Upgrade Orchestration
            Service.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.SetUpgradeOrchestrationServiceStateResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.SetUpgradeOrchestrationServiceStateResponse"
          />&gt;
  - name: >-
      setUpgradeOrchestrationServiceState(UpgradeOrchestrationServiceState,
      ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams,
      ServiceCallback<UpgradeOrchestrationServiceStateSummary>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.setUpgradeOrchestrationServiceState_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        setUpgradeOrchestrationServiceState(upgradeOrchestrationServiceState:
        UpgradeOrchestrationServiceState, options:
        ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams,
        callback: ServiceCallback<UpgradeOrchestrationServiceStateSummary>)
      parameters:
        - id: upgradeOrchestrationServiceState
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.UpgradeOrchestrationServiceState"
            />
          description: |-
            Service state of Service Fabric Upgrade Orchestration
            Service.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientSetUpgradeOrchestrationServiceStateOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.UpgradeOrchestrationServiceStateSummary"
            />&gt;
          description: The callback
  - name: >-
      startApplicationUpgrade(string, ApplicationUpgradeDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startApplicationUpgrade(applicationId: string,
        applicationUpgradeDescription: ApplicationUpgradeDescription, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: applicationUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationUpgradeDescription"
            />
          description: Parameters for an application upgrade.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startApplicationUpgrade(string, ApplicationUpgradeDescription,
      ServiceFabricClientStartApplicationUpgradeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade'
    package: '@azure/servicefabric'
    summary: >-
      Validates the supplied application upgrade parameters and starts upgrading
      the application if

      the parameters are valid.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startApplicationUpgrade(applicationId: string,
        applicationUpgradeDescription: ApplicationUpgradeDescription, options?:
        ServiceFabricClientStartApplicationUpgradeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: applicationUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationUpgradeDescription"
            />
          description: Parameters for an application upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartApplicationUpgradeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      startApplicationUpgrade(string, ApplicationUpgradeDescription,
      ServiceFabricClientStartApplicationUpgradeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startApplicationUpgrade_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startApplicationUpgrade(applicationId: string,
        applicationUpgradeDescription: ApplicationUpgradeDescription, options:
        ServiceFabricClientStartApplicationUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: applicationUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationUpgradeDescription"
            />
          description: Parameters for an application upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartApplicationUpgradeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: startChaos(ChaosParameters, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startChaos_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startChaos(chaosParameters: ChaosParameters, callback:
        ServiceCallback<void>)
      parameters:
        - id: chaosParameters
          type: >-
            <xref uid="@azure/servicefabric.ServiceFabricModels.ChaosParameters"
            />
          description: Describes all the parameters to configure a Chaos run.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: startChaos(ChaosParameters, ServiceFabricClientStartChaosOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.startChaos'
    package: '@azure/servicefabric'
    summary: >-
      If Chaos is not already running in the cluster, it starts Chaos with the
      passed in Chaos

      parameters.

      If Chaos is already running when this call is made, the call fails with
      the error code

      FABRIC_E_CHAOS_ALREADY_RUNNING.

      Refer to the article [Induce controlled Chaos in Service Fabric

      clusters](https://docs.microsoft.com/azure/service-fabric/service-fabric-controlled-chaos)
      for

      more details.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startChaos(chaosParameters: ChaosParameters, options?:
        ServiceFabricClientStartChaosOptionalParams): Promise<RestResponse>
      parameters:
        - id: chaosParameters
          type: >-
            <xref uid="@azure/servicefabric.ServiceFabricModels.ChaosParameters"
            />
          description: Describes all the parameters to configure a Chaos run.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartChaosOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      startChaos(ChaosParameters, ServiceFabricClientStartChaosOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startChaos_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startChaos(chaosParameters: ChaosParameters, options:
        ServiceFabricClientStartChaosOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: chaosParameters
          type: >-
            <xref uid="@azure/servicefabric.ServiceFabricModels.ChaosParameters"
            />
          description: Describes all the parameters to configure a Chaos run.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartChaosOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startClusterConfigurationUpgrade(ClusterConfigurationUpgradeDescription,
      ServiceCallback<void>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription:
        ClusterConfigurationUpgradeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: clusterConfigurationUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterConfigurationUpgradeDescription"
            />
          description: |-
            Parameters for a standalone cluster configuration
            upgrade.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startClusterConfigurationUpgrade(ClusterConfigurationUpgradeDescription,
      ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade'
    package: '@azure/servicefabric'
    summary: >-
      Validate the supplied configuration upgrade parameters and start upgrading
      the cluster

      configuration if the parameters are valid.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription:
        ClusterConfigurationUpgradeDescription, options?:
        ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: clusterConfigurationUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterConfigurationUpgradeDescription"
            />
          description: |-
            Parameters for a standalone cluster configuration
            upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      startClusterConfigurationUpgrade(ClusterConfigurationUpgradeDescription,
      ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams,
      ServiceCallback<void>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.startClusterConfigurationUpgrade_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        startClusterConfigurationUpgrade(clusterConfigurationUpgradeDescription:
        ClusterConfigurationUpgradeDescription, options:
        ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: clusterConfigurationUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ClusterConfigurationUpgradeDescription"
            />
          description: |-
            Parameters for a standalone cluster configuration
            upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartClusterConfigurationUpgradeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: startClusterUpgrade(StartClusterUpgradeDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startClusterUpgrade(startClusterUpgradeDescription:
        StartClusterUpgradeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: startClusterUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.StartClusterUpgradeDescription"
            />
          description: Describes the parameters for starting a cluster upgrade.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startClusterUpgrade(StartClusterUpgradeDescription,
      ServiceFabricClientStartClusterUpgradeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade'
    package: '@azure/servicefabric'
    summary: >-
      Validate the supplied upgrade parameters and start upgrading the code or
      configuration version

      of a Service Fabric cluster if the parameters are valid.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startClusterUpgrade(startClusterUpgradeDescription:
        StartClusterUpgradeDescription, options?:
        ServiceFabricClientStartClusterUpgradeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: startClusterUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.StartClusterUpgradeDescription"
            />
          description: Describes the parameters for starting a cluster upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartClusterUpgradeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      startClusterUpgrade(StartClusterUpgradeDescription,
      ServiceFabricClientStartClusterUpgradeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startClusterUpgrade_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startClusterUpgrade(startClusterUpgradeDescription:
        StartClusterUpgradeDescription, options:
        ServiceFabricClientStartClusterUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: startClusterUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.StartClusterUpgradeDescription"
            />
          description: Describes the parameters for starting a cluster upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartClusterUpgradeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startComposeDeploymentUpgrade(string, ComposeDeploymentUpgradeDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startComposeDeploymentUpgrade(deploymentName: string,
        composeDeploymentUpgradeDescription:
        ComposeDeploymentUpgradeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: composeDeploymentUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ComposeDeploymentUpgradeDescription"
            />
          description: Parameters for upgrading compose deployment.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startComposeDeploymentUpgrade(string, ComposeDeploymentUpgradeDescription,
      ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade'
    package: '@azure/servicefabric'
    summary: >-
      Validates the supplied upgrade parameters and starts upgrading the
      deployment if the parameters

      are valid.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startComposeDeploymentUpgrade(deploymentName: string,
        composeDeploymentUpgradeDescription:
        ComposeDeploymentUpgradeDescription, options?:
        ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: composeDeploymentUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ComposeDeploymentUpgradeDescription"
            />
          description: Parameters for upgrading compose deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      startComposeDeploymentUpgrade(string, ComposeDeploymentUpgradeDescription,
      ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startComposeDeploymentUpgrade_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startComposeDeploymentUpgrade(deploymentName: string,
        composeDeploymentUpgradeDescription:
        ComposeDeploymentUpgradeDescription, options:
        ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: composeDeploymentUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ComposeDeploymentUpgradeDescription"
            />
          description: Parameters for upgrading compose deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartComposeDeploymentUpgradeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: startDataLoss(string, string, string, DataLossMode, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startDataLoss_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startDataLoss(serviceId: string, partitionId: string,
        operationId: string, dataLossMode: DataLossMode, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: dataLossMode
          type: <xref uid="@azure/servicefabric.ServiceFabricModels.DataLossMode" />
          description: >-
            This enum is passed to the StartDataLoss API to indicate what type
            of data

            loss to induce. Possible values include: 'Invalid',
            'PartialDataLoss', 'FullDataLoss'
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startDataLoss(string, string, string, DataLossMode,
      ServiceFabricClientStartDataLossOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.startDataLoss'
    package: '@azure/servicefabric'
    summary: >-
      This API will induce data loss for the specified partition. It will
      trigger a call to the

      OnDataLoss API of the partition.

      Actual data loss will depend on the specified DataLossMode.


      - PartialDataLoss - Only a quorum of replicas are removed and OnDataLoss
      is triggered for the

      partition but actual data loss depends on the presence of in-flight
      replication.

      - FullDataLoss - All replicas are removed hence all data is lost and
      OnDataLoss is triggered.


      This API should only be called with a stateful service as the target.


      Calling this API with a system service as the target is not advised.


      Note:  Once this API has been called, it cannot be reversed. Calling
      CancelOperation will only

      stop execution and clean up internal system state.

      It will not restore data if the command has progressed far enough to cause
      data loss.


      Call the GetDataLossProgress API with the same OperationId to return
      information on the

      operation started with this API.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startDataLoss(serviceId: string, partitionId: string,
        operationId: string, dataLossMode: DataLossMode, options?:
        ServiceFabricClientStartDataLossOptionalParams): Promise<RestResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: dataLossMode
          type: <xref uid="@azure/servicefabric.ServiceFabricModels.DataLossMode" />
          description: >-
            This enum is passed to the StartDataLoss API to indicate what type
            of data

            loss to induce. Possible values include: 'Invalid',
            'PartialDataLoss', 'FullDataLoss'
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartDataLossOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      startDataLoss(string, string, string, DataLossMode,
      ServiceFabricClientStartDataLossOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startDataLoss_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startDataLoss(serviceId: string, partitionId: string,
        operationId: string, dataLossMode: DataLossMode, options:
        ServiceFabricClientStartDataLossOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: dataLossMode
          type: <xref uid="@azure/servicefabric.ServiceFabricModels.DataLossMode" />
          description: >-
            This enum is passed to the StartDataLoss API to indicate what type
            of data

            loss to induce. Possible values include: 'Invalid',
            'PartialDataLoss', 'FullDataLoss'
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartDataLossOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startNodeTransition(string, string, NodeTransitionType, string, number,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startNodeTransition_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startNodeTransition(nodeName: string, operationId: string,
        nodeTransitionType: NodeTransitionType, nodeInstanceId: string,
        stopDurationInSeconds: number, callback: ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: nodeTransitionType
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeTransitionType" />
          description: >-
            Indicates the type of transition to perform. 
            NodeTransitionType.Start

            will start a stopped node.  NodeTransitionType.Stop will stop a node
            that is up. Possible values

            include: 'Invalid', 'Start', 'Stop'
        - id: nodeInstanceId
          type: string
          description: >-
            The node instance ID of the target node.  This can be determined
            through

            GetNodeInfo API.
        - id: stopDurationInSeconds
          type: number
          description: >-
            The duration, in seconds, to keep the node stopped.  The minimum

            value is 600, the maximum is 14400.  After this time expires, the
            node will automatically come

            back up.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startNodeTransition(string, string, NodeTransitionType, string, number,
      ServiceFabricClientStartNodeTransitionOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.startNodeTransition'
    package: '@azure/servicefabric'
    summary: >-
      Starts or stops a cluster node.  A cluster node is a process, not the OS
      instance itself.  To

      start a node, pass in "Start" for the NodeTransitionType parameter.

      To stop a node, pass in "Stop" for the NodeTransitionType parameter.  This
      API starts the

      operation - when the API returns the node may not have finished
      transitioning yet.

      Call GetNodeTransitionProgress with the same OperationId to get the
      progress of the operation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startNodeTransition(nodeName: string, operationId: string,
        nodeTransitionType: NodeTransitionType, nodeInstanceId: string,
        stopDurationInSeconds: number, options?:
        ServiceFabricClientStartNodeTransitionOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: nodeTransitionType
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeTransitionType" />
          description: >-
            Indicates the type of transition to perform. 
            NodeTransitionType.Start

            will start a stopped node.  NodeTransitionType.Stop will stop a node
            that is up. Possible values

            include: 'Invalid', 'Start', 'Stop'
        - id: nodeInstanceId
          type: string
          description: >-
            The node instance ID of the target node.  This can be determined
            through

            GetNodeInfo API.
        - id: stopDurationInSeconds
          type: number
          description: >-
            The duration, in seconds, to keep the node stopped.  The minimum

            value is 600, the maximum is 14400.  After this time expires, the
            node will automatically come

            back up.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartNodeTransitionOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      startNodeTransition(string, string, NodeTransitionType, string, number,
      ServiceFabricClientStartNodeTransitionOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startNodeTransition_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startNodeTransition(nodeName: string, operationId: string,
        nodeTransitionType: NodeTransitionType, nodeInstanceId: string,
        stopDurationInSeconds: number, options:
        ServiceFabricClientStartNodeTransitionOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: nodeName
          type: string
          description: The name of the node.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: nodeTransitionType
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.NodeTransitionType" />
          description: >-
            Indicates the type of transition to perform. 
            NodeTransitionType.Start

            will start a stopped node.  NodeTransitionType.Stop will stop a node
            that is up. Possible values

            include: 'Invalid', 'Start', 'Stop'
        - id: nodeInstanceId
          type: string
          description: >-
            The node instance ID of the target node.  This can be determined
            through

            GetNodeInfo API.
        - id: stopDurationInSeconds
          type: number
          description: >-
            The duration, in seconds, to keep the node stopped.  The minimum

            value is 600, the maximum is 14400.  After this time expires, the
            node will automatically come

            back up.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartNodeTransitionOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startPartitionRestart(string, string, string, RestartPartitionMode,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startPartitionRestart_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startPartitionRestart(serviceId: string, partitionId: string,
        operationId: string, restartPartitionMode: RestartPartitionMode,
        callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: restartPartitionMode
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RestartPartitionMode"
            />
          description: |-
            Describe which partitions to restart. Possible values include:
            'Invalid', 'AllReplicasOrInstances', 'OnlyActiveSecondaries'
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startPartitionRestart(string, string, string, RestartPartitionMode,
      ServiceFabricClientStartPartitionRestartOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.startPartitionRestart'
    package: '@azure/servicefabric'
    summary: >-
      This API is useful for testing failover.


      If used to target a stateless service partition, RestartPartitionMode must
      be

      AllReplicasOrInstances.


      Call the GetPartitionRestartProgress API using the same OperationId to get
      the progress.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startPartitionRestart(serviceId: string, partitionId: string,
        operationId: string, restartPartitionMode: RestartPartitionMode,
        options?: ServiceFabricClientStartPartitionRestartOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: restartPartitionMode
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RestartPartitionMode"
            />
          description: |-
            Describe which partitions to restart. Possible values include:
            'Invalid', 'AllReplicasOrInstances', 'OnlyActiveSecondaries'
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartPartitionRestartOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      startPartitionRestart(string, string, string, RestartPartitionMode,
      ServiceFabricClientStartPartitionRestartOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startPartitionRestart_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startPartitionRestart(serviceId: string, partitionId: string,
        operationId: string, restartPartitionMode: RestartPartitionMode,
        options: ServiceFabricClientStartPartitionRestartOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: restartPartitionMode
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RestartPartitionMode"
            />
          description: |-
            Describe which partitions to restart. Possible values include:
            'Invalid', 'AllReplicasOrInstances', 'OnlyActiveSecondaries'
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartPartitionRestartOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startQuorumLoss(string, string, string, QuorumLossMode, number,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startQuorumLoss_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startQuorumLoss(serviceId: string, partitionId: string,
        operationId: string, quorumLossMode: QuorumLossMode, quorumLossDuration:
        number, callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: quorumLossMode
          type: >-
            <xref uid="@azure/servicefabric.ServiceFabricModels.QuorumLossMode"
            />
          description: >-
            This enum is passed to the StartQuorumLoss API to indicate what type
            of

            quorum loss to induce. Possible values include: 'Invalid',
            'QuorumReplicas', 'AllReplicas'
        - id: quorumLossDuration
          type: number
          description: |-
            The amount of time for which the partition will be kept in quorum
            loss.  This must be specified in seconds.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startQuorumLoss(string, string, string, QuorumLossMode, number,
      ServiceFabricClientStartQuorumLossOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.startQuorumLoss'
    package: '@azure/servicefabric'
    summary: >-
      This API is useful for a temporary quorum loss situation on your service.


      Call the GetQuorumLossProgress API with the same OperationId to return
      information on the

      operation started with this API.


      This can only be called on stateful persisted (HasPersistedState==true)
      services.  Do not use

      this API on stateless services or stateful in-memory only services.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startQuorumLoss(serviceId: string, partitionId: string,
        operationId: string, quorumLossMode: QuorumLossMode, quorumLossDuration:
        number, options?: ServiceFabricClientStartQuorumLossOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: quorumLossMode
          type: >-
            <xref uid="@azure/servicefabric.ServiceFabricModels.QuorumLossMode"
            />
          description: >-
            This enum is passed to the StartQuorumLoss API to indicate what type
            of

            quorum loss to induce. Possible values include: 'Invalid',
            'QuorumReplicas', 'AllReplicas'
        - id: quorumLossDuration
          type: number
          description: |-
            The amount of time for which the partition will be kept in quorum
            loss.  This must be specified in seconds.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartQuorumLossOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      startQuorumLoss(string, string, string, QuorumLossMode, number,
      ServiceFabricClientStartQuorumLossOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.startQuorumLoss_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startQuorumLoss(serviceId: string, partitionId: string,
        operationId: string, quorumLossMode: QuorumLossMode, quorumLossDuration:
        number, options: ServiceFabricClientStartQuorumLossOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: operationId
          type: string
          description: |-
            A GUID that identifies a call of this API.  This is passed into the
            corresponding GetProgress API
        - id: quorumLossMode
          type: >-
            <xref uid="@azure/servicefabric.ServiceFabricModels.QuorumLossMode"
            />
          description: >-
            This enum is passed to the StartQuorumLoss API to indicate what type
            of

            quorum loss to induce. Possible values include: 'Invalid',
            'QuorumReplicas', 'AllReplicas'
        - id: quorumLossDuration
          type: number
          description: |-
            The amount of time for which the partition will be kept in quorum
            loss.  This must be specified in seconds.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartQuorumLossOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: startRollbackComposeDeploymentUpgrade(string, ServiceCallback<void>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startRollbackComposeDeploymentUpgrade(deploymentName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      startRollbackComposeDeploymentUpgrade(string,
      ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade
    package: '@azure/servicefabric'
    summary: Rollback a service fabric compose deployment upgrade.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startRollbackComposeDeploymentUpgrade(deploymentName: string,
        options?:
        ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      startRollbackComposeDeploymentUpgrade(string,
      ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams,
      ServiceCallback<void>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.startRollbackComposeDeploymentUpgrade_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function startRollbackComposeDeploymentUpgrade(deploymentName: string,
        options:
        ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: deploymentName
          type: string
          description: The identity of the deployment.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStartRollbackComposeDeploymentUpgradeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: stopChaos(ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.stopChaos_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function stopChaos(callback: ServiceCallback<void>)'
      parameters:
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: stopChaos(ServiceFabricClientStopChaosOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.stopChaos'
    package: '@azure/servicefabric'
    summary: >-
      Stops Chaos from executing new faults. In-flight faults will continue to
      execute until they are

      complete. The current Chaos Schedule is put into a stopped state.

      Once a schedule is stopped, it will stay in the stopped state and not be
      used to Chaos Schedule

      new runs of Chaos. A new Chaos Schedule must be set in order to resume
      scheduling.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function stopChaos(options?:
        ServiceFabricClientStopChaosOptionalParams): Promise<RestResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStopChaosOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      stopChaos(ServiceFabricClientStopChaosOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.stopChaos_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function stopChaos(options: ServiceFabricClientStopChaosOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientStopChaosOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      submitPropertyBatch(string, PropertyBatchDescriptionList,
      ServiceCallback<PropertyBatchInfoUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function submitPropertyBatch(nameId: string,
        propertyBatchDescriptionList: PropertyBatchDescriptionList, callback:
        ServiceCallback<PropertyBatchInfoUnion>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: propertyBatchDescriptionList
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.PropertyBatchDescriptionList"
            />
          description: Describes the property batch operations to be submitted.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PropertyBatchInfoUnion"
            />&gt;
          description: The callback
  - name: >-
      submitPropertyBatch(string, PropertyBatchDescriptionList,
      ServiceFabricClientSubmitPropertyBatchOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch'
    package: '@azure/servicefabric'
    summary: >-
      Submits a batch of property operations. Either all or none of the
      operations will be committed.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function submitPropertyBatch(nameId: string,
        propertyBatchDescriptionList: PropertyBatchDescriptionList, options?:
        ServiceFabricClientSubmitPropertyBatchOptionalParams):
        Promise<SubmitPropertyBatchResponse>
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: propertyBatchDescriptionList
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.PropertyBatchDescriptionList"
            />
          description: Describes the property batch operations to be submitted.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientSubmitPropertyBatchOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.SubmitPropertyBatchResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.SubmitPropertyBatchResponse"
          />&gt;
  - name: >-
      submitPropertyBatch(string, PropertyBatchDescriptionList,
      ServiceFabricClientSubmitPropertyBatchOptionalParams,
      ServiceCallback<PropertyBatchInfoUnion>)
    uid: '@azure/servicefabric.ServiceFabricClient.submitPropertyBatch_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function submitPropertyBatch(nameId: string,
        propertyBatchDescriptionList: PropertyBatchDescriptionList, options:
        ServiceFabricClientSubmitPropertyBatchOptionalParams, callback:
        ServiceCallback<PropertyBatchInfoUnion>)
      parameters:
        - id: nameId
          type: string
          description: The Service Fabric name, without the 'fabric:' URI scheme.
        - id: propertyBatchDescriptionList
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.PropertyBatchDescriptionList"
            />
          description: Describes the property batch operations to be submitted.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientSubmitPropertyBatchOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.PropertyBatchInfoUnion"
            />&gt;
          description: The callback
  - name: suspendApplicationBackup(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function suspendApplicationBackup(applicationId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      suspendApplicationBackup(string,
      ServiceFabricClientSuspendApplicationBackupOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup'
    package: '@azure/servicefabric'
    summary: >-
      The application which is configured to take periodic backups, is suspended
      for taking further

      backups till it is resumed again. This operation applies to the entire
      application's hierarchy.

      It means all the services and partitions under this application are now
      suspended for backup.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function suspendApplicationBackup(applicationId: string, options?:
        ServiceFabricClientSuspendApplicationBackupOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientSuspendApplicationBackupOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      suspendApplicationBackup(string,
      ServiceFabricClientSuspendApplicationBackupOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.suspendApplicationBackup_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function suspendApplicationBackup(applicationId: string, options:
        ServiceFabricClientSuspendApplicationBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientSuspendApplicationBackupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: suspendPartitionBackup(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function suspendPartitionBackup(partitionId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      suspendPartitionBackup(string,
      ServiceFabricClientSuspendPartitionBackupOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup'
    package: '@azure/servicefabric'
    summary: >-
      The partition which is configured to take periodic backups, is suspended
      for taking further

      backups till it is resumed again.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function suspendPartitionBackup(partitionId: string, options?:
        ServiceFabricClientSuspendPartitionBackupOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientSuspendPartitionBackupOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      suspendPartitionBackup(string,
      ServiceFabricClientSuspendPartitionBackupOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.suspendPartitionBackup_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function suspendPartitionBackup(partitionId: string, options:
        ServiceFabricClientSuspendPartitionBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: partitionId
          type: string
          description: The identity of the partition.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientSuspendPartitionBackupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: suspendServiceBackup(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function suspendServiceBackup(serviceId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      suspendServiceBackup(string,
      ServiceFabricClientSuspendServiceBackupOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup'
    package: '@azure/servicefabric'
    summary: >-
      The service which is configured to take periodic backups, is suspended for
      taking further

      backups till it is resumed again. This operation applies to the entire
      service's hierarchy. It

      means all the partitions under this service are now suspended for backup.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function suspendServiceBackup(serviceId: string, options?:
        ServiceFabricClientSuspendServiceBackupOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientSuspendServiceBackupOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      suspendServiceBackup(string,
      ServiceFabricClientSuspendServiceBackupOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.suspendServiceBackup_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function suspendServiceBackup(serviceId: string, options:
        ServiceFabricClientSuspendServiceBackupOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientSuspendServiceBackupOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      toggleVerboseServicePlacementHealthReporting(boolean,
      ServiceCallback<void>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting_1
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function toggleVerboseServicePlacementHealthReporting(enabled: boolean,
        callback: ServiceCallback<void>)
      parameters:
        - id: enabled
          type: boolean
          description: The verbosity of service placement health reporting.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      toggleVerboseServicePlacementHealthReporting(boolean,
      ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting
    package: '@azure/servicefabric'
    summary: >-
      If verbosity is set to true, then detailed health reports will be
      generated when replicas cannot

      be placed or dropped.

      If verbosity is set to false, then no health reports will be generated
      when replicas cannot be

      placed or dropped.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function toggleVerboseServicePlacementHealthReporting(enabled: boolean,
        options?:
        ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: enabled
          type: boolean
          description: The verbosity of service placement health reporting.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      toggleVerboseServicePlacementHealthReporting(boolean,
      ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams,
      ServiceCallback<void>)
    uid: >-
      @azure/servicefabric.ServiceFabricClient.toggleVerboseServicePlacementHealthReporting_2
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function toggleVerboseServicePlacementHealthReporting(enabled: boolean,
        options:
        ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: enabled
          type: boolean
          description: The verbosity of service placement health reporting.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientToggleVerboseServicePlacementHealthReportingOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      unprovisionApplicationType(string,
      UnprovisionApplicationTypeDescriptionInfo, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function unprovisionApplicationType(applicationTypeName: string,
        unprovisionApplicationTypeDescriptionInfo:
        UnprovisionApplicationTypeDescriptionInfo, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: unprovisionApplicationTypeDescriptionInfo
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.UnprovisionApplicationTypeDescriptionInfo"
            />
          description: |-
            The relative path for the application package
            in the image store specified during the prior copy operation.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      unprovisionApplicationType(string,
      UnprovisionApplicationTypeDescriptionInfo,
      ServiceFabricClientUnprovisionApplicationTypeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType'
    package: '@azure/servicefabric'
    summary: >-
      This operation can only be performed if all application instances of the
      application type have

      been deleted. Once the application type is unregistered, no new
      application instances can be

      created for this particular application type.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function unprovisionApplicationType(applicationTypeName: string,
        unprovisionApplicationTypeDescriptionInfo:
        UnprovisionApplicationTypeDescriptionInfo, options?:
        ServiceFabricClientUnprovisionApplicationTypeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: unprovisionApplicationTypeDescriptionInfo
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.UnprovisionApplicationTypeDescriptionInfo"
            />
          description: |-
            The relative path for the application package
            in the image store specified during the prior copy operation.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUnprovisionApplicationTypeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      unprovisionApplicationType(string,
      UnprovisionApplicationTypeDescriptionInfo,
      ServiceFabricClientUnprovisionApplicationTypeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.unprovisionApplicationType_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function unprovisionApplicationType(applicationTypeName: string,
        unprovisionApplicationTypeDescriptionInfo:
        UnprovisionApplicationTypeDescriptionInfo, options:
        ServiceFabricClientUnprovisionApplicationTypeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationTypeName
          type: string
          description: The name of the application type.
        - id: unprovisionApplicationTypeDescriptionInfo
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.UnprovisionApplicationTypeDescriptionInfo"
            />
          description: |-
            The relative path for the application package
            in the image store specified during the prior copy operation.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUnprovisionApplicationTypeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: unprovisionCluster(UnprovisionFabricDescription, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.unprovisionCluster_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function unprovisionCluster(unprovisionFabricDescription:
        UnprovisionFabricDescription, callback: ServiceCallback<void>)
      parameters:
        - id: unprovisionFabricDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.UnprovisionFabricDescription"
            />
          description: Describes the parameters for unprovisioning a cluster.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      unprovisionCluster(UnprovisionFabricDescription,
      ServiceFabricClientUnprovisionClusterOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.unprovisionCluster'
    package: '@azure/servicefabric'
    summary: It is supported to unprovision code and configuration separately.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function unprovisionCluster(unprovisionFabricDescription:
        UnprovisionFabricDescription, options?:
        ServiceFabricClientUnprovisionClusterOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: unprovisionFabricDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.UnprovisionFabricDescription"
            />
          description: Describes the parameters for unprovisioning a cluster.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUnprovisionClusterOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      unprovisionCluster(UnprovisionFabricDescription,
      ServiceFabricClientUnprovisionClusterOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.unprovisionCluster_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function unprovisionCluster(unprovisionFabricDescription:
        UnprovisionFabricDescription, options:
        ServiceFabricClientUnprovisionClusterOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: unprovisionFabricDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.UnprovisionFabricDescription"
            />
          description: Describes the parameters for unprovisioning a cluster.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUnprovisionClusterOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      updateApplicationUpgrade(string, ApplicationUpgradeUpdateDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateApplicationUpgrade(applicationId: string,
        applicationUpgradeUpdateDescription:
        ApplicationUpgradeUpdateDescription, callback: ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: applicationUpgradeUpdateDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationUpgradeUpdateDescription"
            />
          description: |-
            Parameters for updating an existing application
            upgrade.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      updateApplicationUpgrade(string, ApplicationUpgradeUpdateDescription,
      ServiceFabricClientUpdateApplicationUpgradeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade'
    package: '@azure/servicefabric'
    summary: >-
      Updates the parameters of an ongoing application upgrade from the ones
      specified at the time of

      starting the application upgrade. This may be required to mitigate stuck
      application upgrades

      due to incorrect parameters or issues in the application to make progress.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateApplicationUpgrade(applicationId: string,
        applicationUpgradeUpdateDescription:
        ApplicationUpgradeUpdateDescription, options?:
        ServiceFabricClientUpdateApplicationUpgradeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: applicationUpgradeUpdateDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationUpgradeUpdateDescription"
            />
          description: |-
            Parameters for updating an existing application
            upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUpdateApplicationUpgradeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      updateApplicationUpgrade(string, ApplicationUpgradeUpdateDescription,
      ServiceFabricClientUpdateApplicationUpgradeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.updateApplicationUpgrade_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateApplicationUpgrade(applicationId: string,
        applicationUpgradeUpdateDescription:
        ApplicationUpgradeUpdateDescription, options:
        ServiceFabricClientUpdateApplicationUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: applicationId
          type: string
          description: >-
            The identity of the application. This is typically the full name of
            the

            application without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the application name is "fabric:/myapp/app1", the
            application identity would be

            "myapp~app1" in 6.0+ and "myapp/app1" in previous versions.
        - id: applicationUpgradeUpdateDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ApplicationUpgradeUpdateDescription"
            />
          description: |-
            Parameters for updating an existing application
            upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUpdateApplicationUpgradeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: updateBackupPolicy(BackupPolicyDescription, string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateBackupPolicy(backupPolicyDescription:
        BackupPolicyDescription, backupPolicyName: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: backupPolicyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.BackupPolicyDescription"
            />
          description: Describes the backup policy.
        - id: backupPolicyName
          type: string
          description: The name of the backup policy.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      updateBackupPolicy(BackupPolicyDescription, string,
      ServiceFabricClientUpdateBackupPolicyOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy'
    package: '@azure/servicefabric'
    summary: Updates the backup policy identified by {backupPolicyName}
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateBackupPolicy(backupPolicyDescription:
        BackupPolicyDescription, backupPolicyName: string, options?:
        ServiceFabricClientUpdateBackupPolicyOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: backupPolicyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.BackupPolicyDescription"
            />
          description: Describes the backup policy.
        - id: backupPolicyName
          type: string
          description: The name of the backup policy.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUpdateBackupPolicyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      updateBackupPolicy(BackupPolicyDescription, string,
      ServiceFabricClientUpdateBackupPolicyOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.updateBackupPolicy_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateBackupPolicy(backupPolicyDescription:
        BackupPolicyDescription, backupPolicyName: string, options:
        ServiceFabricClientUpdateBackupPolicyOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: backupPolicyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.BackupPolicyDescription"
            />
          description: Describes the backup policy.
        - id: backupPolicyName
          type: string
          description: The name of the backup policy.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUpdateBackupPolicyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      updateClusterUpgrade(UpdateClusterUpgradeDescription,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateClusterUpgrade(updateClusterUpgradeDescription:
        UpdateClusterUpgradeDescription, callback: ServiceCallback<void>)
      parameters:
        - id: updateClusterUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.UpdateClusterUpgradeDescription"
            />
          description: Parameters for updating a cluster upgrade.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      updateClusterUpgrade(UpdateClusterUpgradeDescription,
      ServiceFabricClientUpdateClusterUpgradeOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade'
    package: '@azure/servicefabric'
    summary: >-
      Update the upgrade parameters used during a Service Fabric cluster
      upgrade.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateClusterUpgrade(updateClusterUpgradeDescription:
        UpdateClusterUpgradeDescription, options?:
        ServiceFabricClientUpdateClusterUpgradeOptionalParams):
        Promise<RestResponse>
      parameters:
        - id: updateClusterUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.UpdateClusterUpgradeDescription"
            />
          description: Parameters for updating a cluster upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUpdateClusterUpgradeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      updateClusterUpgrade(UpdateClusterUpgradeDescription,
      ServiceFabricClientUpdateClusterUpgradeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.updateClusterUpgrade_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateClusterUpgrade(updateClusterUpgradeDescription:
        UpdateClusterUpgradeDescription, options:
        ServiceFabricClientUpdateClusterUpgradeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: updateClusterUpgradeDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.UpdateClusterUpgradeDescription"
            />
          description: Parameters for updating a cluster upgrade.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUpdateClusterUpgradeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: updateRepairExecutionState(RepairTask, RequestOptionsBase)
    uid: '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState'
    package: '@azure/servicefabric'
    summary: >-
      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateRepairExecutionState(repairTask: RepairTask, options?:
        RequestOptionsBase): Promise<UpdateRepairExecutionStateResponse>
      parameters:
        - id: repairTask
          type: <xref uid="@azure/servicefabric.ServiceFabricModels.RepairTask" />
          description: Describes the repair task to be created or updated.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
      return:
        description: Promise<Models.UpdateRepairExecutionStateResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.UpdateRepairExecutionStateResponse"
          />&gt;
  - name: >-
      updateRepairExecutionState(RepairTask, RequestOptionsBase,
      ServiceCallback<RepairTaskUpdateInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateRepairExecutionState(repairTask: RepairTask, options:
        RequestOptionsBase, callback: ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTask
          type: <xref uid="@azure/servicefabric.ServiceFabricModels.RepairTask" />
          description: Describes the repair task to be created or updated.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateInfo"
            />&gt;
          description: The callback
  - name: >-
      updateRepairExecutionState(RepairTask,
      ServiceCallback<RepairTaskUpdateInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.updateRepairExecutionState_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateRepairExecutionState(repairTask: RepairTask, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTask
          type: <xref uid="@azure/servicefabric.ServiceFabricModels.RepairTask" />
          description: Describes the repair task to be created or updated.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateInfo"
            />&gt;
          description: The callback
  - name: >-
      updateRepairTaskHealthPolicy(RepairTaskUpdateHealthPolicyDescription,
      RequestOptionsBase)
    uid: '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy'
    package: '@azure/servicefabric'
    summary: >-
      This API supports the Service Fabric platform; it is not meant to be used
      directly from your

      code.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription:
        RepairTaskUpdateHealthPolicyDescription, options?: RequestOptionsBase):
        Promise<UpdateRepairTaskHealthPolicyResponse>
      parameters:
        - id: repairTaskUpdateHealthPolicyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateHealthPolicyDescription"
            />
          description: |-
            Describes the repair task healthy policy to be
            updated.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
      return:
        description: Promise<Models.UpdateRepairTaskHealthPolicyResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/servicefabric.ServiceFabricModels.UpdateRepairTaskHealthPolicyResponse"
          />&gt;
  - name: >-
      updateRepairTaskHealthPolicy(RepairTaskUpdateHealthPolicyDescription,
      RequestOptionsBase, ServiceCallback<RepairTaskUpdateInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription:
        RepairTaskUpdateHealthPolicyDescription, options: RequestOptionsBase,
        callback: ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTaskUpdateHealthPolicyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateHealthPolicyDescription"
            />
          description: |-
            Describes the repair task healthy policy to be
            updated.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateInfo"
            />&gt;
          description: The callback
  - name: >-
      updateRepairTaskHealthPolicy(RepairTaskUpdateHealthPolicyDescription,
      ServiceCallback<RepairTaskUpdateInfo>)
    uid: '@azure/servicefabric.ServiceFabricClient.updateRepairTaskHealthPolicy_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function
        updateRepairTaskHealthPolicy(repairTaskUpdateHealthPolicyDescription:
        RepairTaskUpdateHealthPolicyDescription, callback:
        ServiceCallback<RepairTaskUpdateInfo>)
      parameters:
        - id: repairTaskUpdateHealthPolicyDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateHealthPolicyDescription"
            />
          description: |-
            Describes the repair task healthy policy to be
            updated.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/servicefabric.ServiceFabricModels.RepairTaskUpdateInfo"
            />&gt;
          description: The callback
  - name: >-
      updateService(string, ServiceUpdateDescriptionUnion,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.updateService_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateService(serviceId: string, serviceUpdateDescription:
        ServiceUpdateDescriptionUnion, callback: ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: serviceUpdateDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceUpdateDescriptionUnion"
            />
          description: The information necessary to update a service.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      updateService(string, ServiceUpdateDescriptionUnion,
      ServiceFabricClientUpdateServiceOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.updateService'
    package: '@azure/servicefabric'
    summary: >-
      This API allows updating properties of a running Service Fabric service.
      The set of properties

      that can be updated are a subset of the properties that were specified at
      the time of creating

      the service. The current set of properties can be obtained using
      `GetServiceDescription` API.

      Note that updating the properties of a running service is different than
      upgrading your

      application using `StartApplicationUpgrade` API. The upgrade is a long
      running background

      operation that involves moving the application from one version to
      another, one upgrade domain

      at a time, whereas update applies the new properties immediately to the
      service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateService(serviceId: string, serviceUpdateDescription:
        ServiceUpdateDescriptionUnion, options?:
        ServiceFabricClientUpdateServiceOptionalParams): Promise<RestResponse>
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: serviceUpdateDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceUpdateDescriptionUnion"
            />
          description: The information necessary to update a service.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUpdateServiceOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      updateService(string, ServiceUpdateDescriptionUnion,
      ServiceFabricClientUpdateServiceOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.updateService_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateService(serviceId: string, serviceUpdateDescription:
        ServiceUpdateDescriptionUnion, options:
        ServiceFabricClientUpdateServiceOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: serviceId
          type: string
          description: >-
            The identity of the service. This ID is typically the full name of
            the service

            without the 'fabric:' URI scheme.

            Starting from version 6.0, hierarchical names are delimited with the
            "~" character.

            For example, if the service name is "fabric:/myapp/app1/svc1", the
            service identity would be

            "myapp~app1~svc1" in 6.0+ and "myapp/app1/svc1" in previous
            versions.
        - id: serviceUpdateDescription
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceUpdateDescriptionUnion"
            />
          description: The information necessary to update a service.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUpdateServiceOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: uploadFile(string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.uploadFile_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadFile(contentPath: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: uploadFile(string, ServiceFabricClientUploadFileOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.uploadFile'
    package: '@azure/servicefabric'
    summary: >-
      Uploads contents of the file to the image store. Use this API if the file
      is small enough to

      upload again if the connection fails. The file's data needs to be added to
      the request body. The

      contents will be uploaded to the specified path. Image store service uses
      a mark file to

      indicate the availability of the folder. The mark file is an empty file
      named "_.dir". The mark

      file is generated by the image store service when all files in a folder
      are uploaded. When using

      File-by-File approach to upload application package in REST, the image
      store service isn't aware

      of the file hierarchy of the application package; you need to create a
      mark file per folder and

      upload it last, to let the image store service know that the folder is
      complete.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadFile(contentPath: string, options?:
        ServiceFabricClientUploadFileOptionalParams): Promise<RestResponse>
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUploadFileOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      uploadFile(string, ServiceFabricClientUploadFileOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.uploadFile_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadFile(contentPath: string, options:
        ServiceFabricClientUploadFileOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUploadFileOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: uploadFileChunk(string, string, string, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.uploadFileChunk_1'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadFileChunk(contentPath: string, sessionId: string,
        contentRange: string, callback: ServiceCallback<void>)
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: sessionId
          type: string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: contentRange
          type: string
          description: >-
            When uploading file chunks to the image store, the Content-Range
            header

            field need to be configured and sent with a request. The format
            should looks like "bytes

            {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For
            example, Content-Range:bytes

            300-5000/20000 indicates that user is sending bytes 300 through
            5,000 and the total file length

            is 20,000 bytes.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      uploadFileChunk(string, string, string,
      ServiceFabricClientUploadFileChunkOptionalParams)
    uid: '@azure/servicefabric.ServiceFabricClient.uploadFileChunk'
    package: '@azure/servicefabric'
    summary: >-
      Uploads a file chunk to the image store with the specified upload session
      ID and image store

      relative path. This API allows user to resume the file upload operation.
      user doesn't have to

      restart the file upload from scratch whenever there is a network
      interruption. Use this option

      if the file size is large.


      To perform a resumable file upload, user need to break the file into
      multiple chunks and upload

      these chunks to the image store one-by-one. Chunks don't have to be
      uploaded in order. If the

      file represented by the image store relative path already exists, it will
      be overwritten when

      the upload session commits.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadFileChunk(contentPath: string, sessionId: string,
        contentRange: string, options?:
        ServiceFabricClientUploadFileChunkOptionalParams): Promise<RestResponse>
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: sessionId
          type: string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: contentRange
          type: string
          description: >-
            When uploading file chunks to the image store, the Content-Range
            header

            field need to be configured and sent with a request. The format
            should looks like "bytes

            {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For
            example, Content-Range:bytes

            300-5000/20000 indicates that user is sending bytes 300 through
            5,000 and the total file length

            is 20,000 bytes.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUploadFileChunkOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: >-
      uploadFileChunk(string, string, string,
      ServiceFabricClientUploadFileChunkOptionalParams, ServiceCallback<void>)
    uid: '@azure/servicefabric.ServiceFabricClient.uploadFileChunk_2'
    package: '@azure/servicefabric'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadFileChunk(contentPath: string, sessionId: string,
        contentRange: string, options:
        ServiceFabricClientUploadFileChunkOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: contentPath
          type: string
          description: Relative path to file or folder in the image store from its root.
        - id: sessionId
          type: string
          description: >-
            A GUID generated by the user for a file uploading. It identifies an
            image store

            upload session which keeps track of all file chunks until it is
            committed.
        - id: contentRange
          type: string
          description: >-
            When uploading file chunks to the image store, the Content-Range
            header

            field need to be configured and sent with a request. The format
            should looks like "bytes

            {First-Byte-Position}-{Last-Byte-Position}/{File-Length}". For
            example, Content-Range:bytes

            300-5000/20000 indicates that user is sending bytes 300 through
            5,000 and the total file length

            is 20,000 bytes.
        - id: options
          type: >-
            <xref
            uid="@azure/servicefabric.ServiceFabricModels.ServiceFabricClientUploadFileChunkOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
extends: <xref uid="@azure/servicefabric.ServiceFabricClientContext" />
