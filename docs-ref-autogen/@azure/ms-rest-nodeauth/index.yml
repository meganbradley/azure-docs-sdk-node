### YamlMime:TSPackage
uid: '@azure/ms-rest-nodeauth'
name: '@azure/ms-rest-nodeauth'
summary: ''
type: package
classes:
  - '@azure/ms-rest-nodeauth.ApplicationTokenCertificateCredentials'
  - '@azure/ms-rest-nodeauth.ApplicationTokenCredentials'
  - '@azure/ms-rest-nodeauth.AzureCliCredentials'
  - '@azure/ms-rest-nodeauth.DeviceTokenCredentials'
  - '@azure/ms-rest-nodeauth.MSIAppServiceTokenCredentials'
  - '@azure/ms-rest-nodeauth.MSITokenCredentials'
  - '@azure/ms-rest-nodeauth.MSIVmTokenCredentials'
  - '@azure/ms-rest-nodeauth.TokenCredentialsBase'
  - '@azure/ms-rest-nodeauth.UserTokenCredentials'
interfaces:
  - '@azure/ms-rest-nodeauth.AuthResponse'
  - '@azure/ms-rest-nodeauth.AzureTokenCredentialsOptions'
  - '@azure/ms-rest-nodeauth.CliAccessToken'
  - '@azure/ms-rest-nodeauth.InteractiveLoginOptions'
  - '@azure/ms-rest-nodeauth.LinkedSubscription'
  - '@azure/ms-rest-nodeauth.LinkedUser'
  - '@azure/ms-rest-nodeauth.ListAllSubscriptionOptions'
  - '@azure/ms-rest-nodeauth.LoginWithAuthFileOptions'
  - '@azure/ms-rest-nodeauth.LoginWithUsernamePasswordOptions'
  - '@azure/ms-rest-nodeauth.MSIAppServiceOptions'
  - '@azure/ms-rest-nodeauth.MSIOptions'
  - '@azure/ms-rest-nodeauth.MSITokenResponse'
  - '@azure/ms-rest-nodeauth.MSIVmOptions'
typeAliases:
  - '@azure/ms-rest-nodeauth.TokenAudience'
  - '@azure/ms-rest-nodeauth.UserType'
functions:
  - name: buildTenantList(TokenCredentialsBase, string)
    uid: '@azure/ms-rest-nodeauth.buildTenantList'
    package: '@azure/ms-rest-nodeauth'
    summary: Builds an array of tenantIds.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function buildTenantList(credentials: TokenCredentialsBase, apiVersion?:
        string): Promise<string[]>
      parameters:
        - id: credentials
          type: <xref uid="@azure/ms-rest-nodeauth.TokenCredentialsBase" />
          description: The credentials.
        - id: apiVersion
          type: string
          description: default value 2016-06-01
      return:
        description: >-
          A promise that resolves to an array of tenantIds and rejects with an
          error.
        type: Promise&lt;string[]&gt;
  - name: createAuthenticator(MSITokenCredentials)
    uid: '@azure/ms-rest-nodeauth.createAuthenticator'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createAuthenticator(credentials: MSITokenCredentials):
        Authenticator
      parameters:
        - id: credentials
          type: <xref uid="@azure/ms-rest-nodeauth.MSITokenCredentials" />
          description: ''
      return:
        description: ''
        type: <xref uid="@azure/ms-rest-js.Authenticator" />
  - name: interactiveLogin()
    uid: '@azure/ms-rest-nodeauth.interactiveLogin'
    package: '@azure/ms-rest-nodeauth'
    summary: >-
      Provides a url and code that needs to be copy and pasted in a browser and
      authenticated over there. If successful, the user will get a
      DeviceTokenCredentials object and the list of subscriptions associated
      with that userId across all the applicable tenants.


      When using personal accounts, the `domain` property in the `options`
      parameter is required to be set to the Id of a tenant for that account.
      Otherwise, the resulting credential will not be able to access the
      account's resources.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function interactiveLogin(): Promise<DeviceTokenCredentials>'
      return:
        description: >-
          If a callback was passed as the last parameter then it returns void
          else returns a Promise.

          The callback is called with the resulting DeviceTokenCredentials
          object and a list of

          associated subscriptions across all the applicable tenants.
        type: >-
          Promise&lt;<xref uid="@azure/ms-rest-nodeauth.DeviceTokenCredentials"
          />&gt;
  - name: interactiveLogin(InteractiveLoginOptions)
    uid: '@azure/ms-rest-nodeauth.interactiveLogin_1'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function interactiveLogin(options: InteractiveLoginOptions):
        Promise<DeviceTokenCredentials>
      parameters:
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.InteractiveLoginOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/ms-rest-nodeauth.DeviceTokenCredentials"
          />&gt;
  - name: >-
      interactiveLogin(InteractiveLoginOptions, (err: Error, credentials:
      DeviceTokenCredentials, subscriptions: LinkedSubscription[]) => void)
    uid: '@azure/ms-rest-nodeauth.interactiveLogin_2'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function interactiveLogin(options: InteractiveLoginOptions, callback:
        (err: Error, credentials: DeviceTokenCredentials, subscriptions:
        LinkedSubscription[]) => void)
      parameters:
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.InteractiveLoginOptions" />
          description: ''
        - id: callback
          type: >-
            (err: Error, credentials: DeviceTokenCredentials, subscriptions:
            LinkedSubscription[]) =&gt; void
          description: ''
  - name: interactiveLogin(any)
    uid: '@azure/ms-rest-nodeauth.interactiveLogin_3'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function interactiveLogin(callback: any)'
      parameters:
        - id: callback
          type: any
          description: ''
  - name: interactiveLoginWithAuthResponse(InteractiveLoginOptions)
    uid: '@azure/ms-rest-nodeauth.interactiveLoginWithAuthResponse'
    package: '@azure/ms-rest-nodeauth'
    summary: >-
      Provides a url and code that needs to be copy and pasted in a browser and
      authenticated over there. If successful, the user will get a
      DeviceTokenCredentials object and the list of subscriptions associated
      with that userId across all the applicable tenants.


      When using personal accounts, the `domain` property in the `options`
      parameter is required to be set to the Id of a tenant for that account.
      Otherwise, the resulting credential will not be able to access the
      account's resources.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function interactiveLoginWithAuthResponse(options?:
        InteractiveLoginOptions): Promise<AuthResponse<DeviceTokenCredentials>>
      parameters:
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.InteractiveLoginOptions" />
          description: Object representing optional parameters.
      return:
        description: >-
          A Promise that resolves to AuthResponse, which contains "credentials"
          and optional "subscriptions" array and rejects with an Error.
        type: >-
          Promise&lt;<xref uid="@azure/ms-rest-nodeauth.AuthResponse"
          />&lt;<xref uid="@azure/ms-rest-nodeauth.DeviceTokenCredentials"
          />&gt;&gt;
  - name: loginWithAppServiceMSI()
    uid: '@azure/ms-rest-nodeauth.loginWithAppServiceMSI'
    package: '@azure/ms-rest-nodeauth'
    summary: Authenticate using the App Service MSI.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithAppServiceMSI():
        Promise<MSIAppServiceTokenCredentials>
      return:
        description: >-
          If a callback was passed as the last parameter then it returns void
          else returns a Promise.

          The callback is called with the resulting
          MSIAppServiceTokenCredentials object.
        type: >-
          Promise&lt;<xref
          uid="@azure/ms-rest-nodeauth.MSIAppServiceTokenCredentials" />&gt;
  - name: loginWithAppServiceMSI(MSIAppServiceOptions)
    uid: '@azure/ms-rest-nodeauth.loginWithAppServiceMSI_1'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithAppServiceMSI(options: MSIAppServiceOptions):
        Promise<MSIAppServiceTokenCredentials>
      parameters:
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.MSIAppServiceOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ms-rest-nodeauth.MSIAppServiceTokenCredentials" />&gt;
  - name: >-
      loginWithAppServiceMSI(MSIAppServiceOptions,
      Callback<MSIAppServiceTokenCredentials>)
    uid: '@azure/ms-rest-nodeauth.loginWithAppServiceMSI_2'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithAppServiceMSI(options: MSIAppServiceOptions, callback:
        Callback<MSIAppServiceTokenCredentials>)
      parameters:
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.MSIAppServiceOptions" />
          description: ''
        - id: callback
          type: >-
            Callback&lt;<xref
            uid="@azure/ms-rest-nodeauth.MSIAppServiceTokenCredentials" />&gt;
          description: ''
  - name: loginWithAppServiceMSI(Callback<MSIAppServiceTokenCredentials>)
    uid: '@azure/ms-rest-nodeauth.loginWithAppServiceMSI_3'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithAppServiceMSI(callback:
        Callback<MSIAppServiceTokenCredentials>)
      parameters:
        - id: callback
          type: >-
            Callback&lt;<xref
            uid="@azure/ms-rest-nodeauth.MSIAppServiceTokenCredentials" />&gt;
          description: ''
  - name: loginWithAuthFile()
    uid: '@azure/ms-rest-nodeauth.loginWithAuthFile'
    package: '@azure/ms-rest-nodeauth'
    summary: >-
      Before using this method please install az cli from
      https://github.com/Azure/azure-cli/releases. Then execute `az ad sp
      create-for-rbac --sdk-auth > ${yourFilename.json}`.

      If you want to create the sp for a different cloud/environment then please
      execute:

      1. az cloud list

      2. az cloud set –n <name of the environment>

      3. az ad sp create-for-rbac --sdk-auth > auth.json // create sp with
      secret
       **OR**
      3. az ad sp create-for-rbac --create-cert --sdk-auth > auth.json // create
      sp with certificate

      If the service principal is already created then login with service
      principal info:

      4. az login --service-principal -u <clientId> -p <clientSecret> -t
      <tenantId>

      5. az account show --sdk-auth > auth.json


      Authenticates using the service principal information provided in the auth
      file. This method will set

      the subscriptionId from the auth file to the user provided environment
      variable in the options

      parameter or the default "AZURE_SUBSCRIPTION_ID".
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithAuthFile(): Promise<ApplicationTokenCredentials |
        ApplicationTokenCertificateCredentials>
      return:
        description: >-
          If a callback was passed as the last parameter then it returns void
          else returns a Promise.

          The callback is called with the resulting ApplicationTokenCredentials
          or ApplicationTokenCertificateCredentials

          object and a list of associated subscriptions across all the
          applicable tenants.
        type: >-
          Promise&lt;<xref
          uid="@azure/ms-rest-nodeauth.ApplicationTokenCredentials" /> | <xref
          uid="@azure/ms-rest-nodeauth.ApplicationTokenCertificateCredentials"
          />&gt;
  - name: loginWithAuthFile(LoginWithAuthFileOptions)
    uid: '@azure/ms-rest-nodeauth.loginWithAuthFile_1'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithAuthFile(options: LoginWithAuthFileOptions):
        Promise<ApplicationTokenCredentials |
        ApplicationTokenCertificateCredentials>
      parameters:
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.LoginWithAuthFileOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ms-rest-nodeauth.ApplicationTokenCredentials" /> | <xref
          uid="@azure/ms-rest-nodeauth.ApplicationTokenCertificateCredentials"
          />&gt;
  - name: >-
      loginWithAuthFile(LoginWithAuthFileOptions, (err: Error, credentials:
      ApplicationTokenCredentials | ApplicationTokenCertificateCredentials,
      subscriptions: LinkedSubscription[]) => void)
    uid: '@azure/ms-rest-nodeauth.loginWithAuthFile_2'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithAuthFile(options: LoginWithAuthFileOptions, callback:
        (err: Error, credentials: ApplicationTokenCredentials |
        ApplicationTokenCertificateCredentials, subscriptions:
        LinkedSubscription[]) => void)
      parameters:
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.LoginWithAuthFileOptions" />
          description: ''
        - id: callback
          type: >-
            (err: Error, credentials: ApplicationTokenCredentials |
            ApplicationTokenCertificateCredentials, subscriptions:
            LinkedSubscription[]) =&gt; void
          description: ''
  - name: loginWithAuthFile(any)
    uid: '@azure/ms-rest-nodeauth.loginWithAuthFile_3'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function loginWithAuthFile(callback: any)'
      parameters:
        - id: callback
          type: any
          description: ''
  - name: loginWithAuthFileWithAuthResponse(LoginWithAuthFileOptions)
    uid: '@azure/ms-rest-nodeauth.loginWithAuthFileWithAuthResponse'
    package: '@azure/ms-rest-nodeauth'
    summary: >-
      Before using this method please install az cli from
      https://github.com/Azure/azure-cli/releases. Then execute `az ad sp
      create-for-rbac --sdk-auth > ${yourFilename.json}`.

      If you want to create the sp for a different cloud/environment then please
      execute:

      1. az cloud list

      2. az cloud set –n <name of the environment>

      3. az ad sp create-for-rbac --sdk-auth > auth.json // create sp with
      secret
       **OR**
      3. az ad sp create-for-rbac --create-cert --sdk-auth > auth.json // create
      sp with certificate

      If the service principal is already created then login with service
      principal info:

      4. az login --service-principal -u <clientId> -p <clientSecret> -t
      <tenantId>

      5. az account show --sdk-auth > auth.json


      Authenticates using the service principal information provided in the auth
      file. This method will set

      the subscriptionId from the auth file to the user provided environment
      variable in the options

      parameter or the default "AZURE_SUBSCRIPTION_ID".
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithAuthFileWithAuthResponse(options?:
        LoginWithAuthFileOptions):
        Promise<AuthResponse<ApplicationTokenCredentials |
        ApplicationTokenCertificateCredentials>>
      parameters:
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.LoginWithAuthFileOptions" />
          description: Optional parameters
      return:
        description: >-
          A Promise that resolves to AuthResponse, which contains "credentials"
          and optional "subscriptions" array and rejects with an Error.
        type: >-
          Promise&lt;<xref uid="@azure/ms-rest-nodeauth.AuthResponse"
          />&lt;<xref uid="@azure/ms-rest-nodeauth.ApplicationTokenCredentials"
          /> | <xref
          uid="@azure/ms-rest-nodeauth.ApplicationTokenCertificateCredentials"
          />&gt;&gt;
  - name: loginWithServicePrincipalCertificate(string, string, string)
    uid: '@azure/ms-rest-nodeauth.loginWithServicePrincipalCertificate'
    package: '@azure/ms-rest-nodeauth'
    summary: >-
      Provides an ApplicationTokenCertificateCredentials object and the list of
      subscriptions associated with that servicePrincipalId/clientId across all
      the applicable tenants.


      When using personal accounts, the `domain` parameter is required to be set
      to the Id of a tenant for that account. Otherwise, the resulting
      credential will not be able to access the account's resources.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithServicePrincipalCertificate(clientId: string,
        certificateStringOrFilePath: string, domain: string):
        Promise<ApplicationTokenCertificateCredentials>
      parameters:
        - id: clientId
          type: string
          description: >-
            The active directory application client Id also known as the SPN
            (ServicePrincipal Name).

            See [Active Directory Quickstart for
            .Net](https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/)

            for an example.
        - id: certificateStringOrFilePath
          type: string
          description: >-
            A PEM encoded certificate and private key OR an absolute filepath to
            the .pem file containing that information. For example:

            - CertificateString: "-----BEGIN PRIVATE KEY-----\n<xxxxx>\n-----END
            PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\n<yyyyy>\n-----END
            CERTIFICATE-----\n"

            - CertificateFilePath: **Absolute** file path of the .pem file.
        - id: domain
          type: string
          description: The domain or tenant Id containing this application.
      return:
        description: >-
          If a callback was passed as the last parameter then it returns void
          else returns a Promise.

          The callback is called with the resulting
          ApplicationTokenCertificateCredentials object and a list of

          associated subscriptions across all the applicable tenants.
        type: >-
          Promise&lt;<xref
          uid="@azure/ms-rest-nodeauth.ApplicationTokenCertificateCredentials"
          />&gt;
  - name: >-
      loginWithServicePrincipalCertificate(string, string, string,
      AzureTokenCredentialsOptions)
    uid: '@azure/ms-rest-nodeauth.loginWithServicePrincipalCertificate_1'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithServicePrincipalCertificate(clientId: string,
        certificateStringOrFilePath: string, domain: string, options:
        AzureTokenCredentialsOptions):
        Promise<ApplicationTokenCertificateCredentials>
      parameters:
        - id: clientId
          type: string
          description: ''
        - id: certificateStringOrFilePath
          type: string
          description: ''
        - id: domain
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.AzureTokenCredentialsOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ms-rest-nodeauth.ApplicationTokenCertificateCredentials"
          />&gt;
  - name: >-
      loginWithServicePrincipalCertificate(string, string, string,
      AzureTokenCredentialsOptions, (err: Error, credentials:
      ApplicationTokenCertificateCredentials, subscriptions:
      LinkedSubscription[]) => void)
    uid: '@azure/ms-rest-nodeauth.loginWithServicePrincipalCertificate_2'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithServicePrincipalCertificate(clientId: string,
        certificateStringOrFilePath: string, domain: string, options:
        AzureTokenCredentialsOptions, callback: (err: Error, credentials:
        ApplicationTokenCertificateCredentials, subscriptions:
        LinkedSubscription[]) => void)
      parameters:
        - id: clientId
          type: string
          description: ''
        - id: certificateStringOrFilePath
          type: string
          description: ''
        - id: domain
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.AzureTokenCredentialsOptions" />
          description: ''
        - id: callback
          type: >-
            (err: Error, credentials: ApplicationTokenCertificateCredentials,
            subscriptions: LinkedSubscription[]) =&gt; void
          description: ''
  - name: loginWithServicePrincipalCertificate(string, string, string, any)
    uid: '@azure/ms-rest-nodeauth.loginWithServicePrincipalCertificate_3'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithServicePrincipalCertificate(clientId: string,
        certificateStringOrFilePath: string, domain: string, callback: any)
      parameters:
        - id: clientId
          type: string
          description: ''
        - id: certificateStringOrFilePath
          type: string
          description: ''
        - id: domain
          type: string
          description: ''
        - id: callback
          type: any
          description: ''
  - name: >-
      loginWithServicePrincipalCertificateWithAuthResponse(string, string,
      string, AzureTokenCredentialsOptions)
    uid: >-
      @azure/ms-rest-nodeauth.loginWithServicePrincipalCertificateWithAuthResponse
    package: '@azure/ms-rest-nodeauth'
    summary: >-
      Provides an ApplicationTokenCertificateCredentials object and the list of
      subscriptions associated with that servicePrincipalId/clientId across all
      the applicable tenants.


      When using personal accounts, the `domain` parameter is required to be set
      to the Id of a tenant for that account. Otherwise, the resulting
      credential will not be able to access the account's resources.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithServicePrincipalCertificateWithAuthResponse(clientId:
        string, certificateStringOrFilePath: string, domain: string, options?:
        AzureTokenCredentialsOptions):
        Promise<AuthResponse<ApplicationTokenCertificateCredentials>>
      parameters:
        - id: clientId
          type: string
          description: >-
            The active directory application client Id also known as the SPN
            (ServicePrincipal Name).

            See [Active Directory Quickstart for
            .Net](https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/)

            for an example.
        - id: certificateStringOrFilePath
          type: string
          description: >-
            A PEM encoded certificate and private key OR an absolute filepath to
            the .pem file containing that information. For example:

            - CertificateString: "-----BEGIN PRIVATE KEY-----\n<xxxxx>\n-----END
            PRIVATE KEY-----\n-----BEGIN CERTIFICATE-----\n<yyyyy>\n-----END
            CERTIFICATE-----\n"

            - CertificateFilePath: **Absolute** file path of the .pem file.
        - id: domain
          type: string
          description: The domain or tenant Id containing this application.
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.AzureTokenCredentialsOptions" />
          description: Object representing optional parameters.
      return:
        description: >-
          A Promise that resolves to AuthResponse, which contains "credentials"
          and optional "subscriptions" array and rejects with an Error.
        type: >-
          Promise&lt;<xref uid="@azure/ms-rest-nodeauth.AuthResponse"
          />&lt;<xref
          uid="@azure/ms-rest-nodeauth.ApplicationTokenCertificateCredentials"
          />&gt;&gt;
  - name: loginWithServicePrincipalSecret(string, string, string)
    uid: '@azure/ms-rest-nodeauth.loginWithServicePrincipalSecret'
    package: '@azure/ms-rest-nodeauth'
    summary: >-
      Provides an ApplicationTokenCredentials object and the list of
      subscriptions associated with that servicePrincipalId/clientId across all
      the applicable tenants.


      When using personal accounts, the `domain` parameter is required to be set
      to the Id of a tenant for that account. Otherwise, the resulting
      credential will not be able to access the account's resources.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithServicePrincipalSecret(clientId: string, secret:
        string, domain: string): Promise<ApplicationTokenCredentials>
      parameters:
        - id: clientId
          type: string
          description: >-
            The active directory application client Id also known as the SPN
            (ServicePrincipal Name).

            See [Active Directory Quickstart for
            .Net](https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/)

            for an example.
        - id: secret
          type: string
          description: The application secret for the service principal.
        - id: domain
          type: string
          description: The domain or tenant Id containing this application.
      return:
        description: >-
          If a callback was passed as the last parameter then it returns void
          else returns a Promise.

          The callback is called with the resulting ApplicationTokenCredentials
          object and a list of

          associated subscriptions across all the applicable tenants.
        type: >-
          Promise&lt;<xref
          uid="@azure/ms-rest-nodeauth.ApplicationTokenCredentials" />&gt;
  - name: >-
      loginWithServicePrincipalSecret(string, string, string,
      AzureTokenCredentialsOptions)
    uid: '@azure/ms-rest-nodeauth.loginWithServicePrincipalSecret_1'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithServicePrincipalSecret(clientId: string, secret:
        string, domain: string, options: AzureTokenCredentialsOptions):
        Promise<ApplicationTokenCredentials>
      parameters:
        - id: clientId
          type: string
          description: ''
        - id: secret
          type: string
          description: ''
        - id: domain
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.AzureTokenCredentialsOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/ms-rest-nodeauth.ApplicationTokenCredentials" />&gt;
  - name: >-
      loginWithServicePrincipalSecret(string, string, string,
      AzureTokenCredentialsOptions, (err: Error, credentials:
      ApplicationTokenCredentials, subscriptions: LinkedSubscription[]) => void)
    uid: '@azure/ms-rest-nodeauth.loginWithServicePrincipalSecret_2'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithServicePrincipalSecret(clientId: string, secret:
        string, domain: string, options: AzureTokenCredentialsOptions, callback:
        (err: Error, credentials: ApplicationTokenCredentials, subscriptions:
        LinkedSubscription[]) => void)
      parameters:
        - id: clientId
          type: string
          description: ''
        - id: secret
          type: string
          description: ''
        - id: domain
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.AzureTokenCredentialsOptions" />
          description: ''
        - id: callback
          type: >-
            (err: Error, credentials: ApplicationTokenCredentials,
            subscriptions: LinkedSubscription[]) =&gt; void
          description: ''
  - name: loginWithServicePrincipalSecret(string, string, string, any)
    uid: '@azure/ms-rest-nodeauth.loginWithServicePrincipalSecret_3'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithServicePrincipalSecret(clientId: string, secret:
        string, domain: string, callback: any)
      parameters:
        - id: clientId
          type: string
          description: ''
        - id: secret
          type: string
          description: ''
        - id: domain
          type: string
          description: ''
        - id: callback
          type: any
          description: ''
  - name: >-
      loginWithServicePrincipalSecretWithAuthResponse(string, string, string,
      AzureTokenCredentialsOptions)
    uid: '@azure/ms-rest-nodeauth.loginWithServicePrincipalSecretWithAuthResponse'
    package: '@azure/ms-rest-nodeauth'
    summary: >-
      Provides an ApplicationTokenCredentials object and the list of
      subscriptions associated with that servicePrincipalId/clientId across all
      the applicable tenants.


      When using personal accounts, the `domain` parameter is required to be set
      to the Id of a tenant for that account. Otherwise, the resulting
      credential will not be able to access the account's resources.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithServicePrincipalSecretWithAuthResponse(clientId:
        string, secret: string, domain: string, options?:
        AzureTokenCredentialsOptions):
        Promise<AuthResponse<ApplicationTokenCredentials>>
      parameters:
        - id: clientId
          type: string
          description: >-
            The active directory application client Id also known as the SPN
            (ServicePrincipal Name).

            See [Active Directory Quickstart for
            .Net](https://azure.microsoft.com/en-us/documentation/articles/active-directory-devquickstarts-dotnet/)

            for an example.
        - id: secret
          type: string
          description: The application secret for the service principal.
        - id: domain
          type: string
          description: The domain or tenant Id containing this application.
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.AzureTokenCredentialsOptions" />
          description: Object representing optional parameters.
      return:
        description: >-
          A Promise that resolves to AuthResponse, which contains "credentials"
          and optional "subscriptions" array and rejects with an Error.
        type: >-
          Promise&lt;<xref uid="@azure/ms-rest-nodeauth.AuthResponse"
          />&lt;<xref uid="@azure/ms-rest-nodeauth.ApplicationTokenCredentials"
          />&gt;&gt;
  - name: loginWithUsernamePassword(string, string)
    uid: '@azure/ms-rest-nodeauth.loginWithUsernamePassword'
    package: '@azure/ms-rest-nodeauth'
    summary: >-
      Provides a UserTokenCredentials object and the list of subscriptions
      associated with that userId across all the applicable tenants.


      This method is applicable only for organizational ids that are not 2FA
      enabled otherwise please use interactive login.


      When using personal accounts, the `domain` property in the `options`
      parameter is required to be set to the Id of a tenant for that account.
      Otherwise, the resulting credential will not be able to access the
      account's resources.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithUsernamePassword(username: string, password: string):
        Promise<UserTokenCredentials>
      parameters:
        - id: username
          type: string
          description: The user name for the Organization Id account.
        - id: password
          type: string
          description: The password for the Organization Id account.
      return:
        description: >-
          If a callback was passed as the last parameter then it returns void
          else returns a Promise.

          The callback is called with the resulting UserTokenCredentials object
          and a list of

          associated subscriptions across all the applicable tenants.
        type: >-
          Promise&lt;<xref uid="@azure/ms-rest-nodeauth.UserTokenCredentials"
          />&gt;
  - name: >-
      loginWithUsernamePassword(string, string,
      LoginWithUsernamePasswordOptions)
    uid: '@azure/ms-rest-nodeauth.loginWithUsernamePassword_1'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithUsernamePassword(username: string, password: string,
        options: LoginWithUsernamePasswordOptions):
        Promise<UserTokenCredentials>
      parameters:
        - id: username
          type: string
          description: ''
        - id: password
          type: string
          description: ''
        - id: options
          type: >-
            <xref uid="@azure/ms-rest-nodeauth.LoginWithUsernamePasswordOptions"
            />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/ms-rest-nodeauth.UserTokenCredentials"
          />&gt;
  - name: loginWithUsernamePassword(string, string, any)
    uid: '@azure/ms-rest-nodeauth.loginWithUsernamePassword_2'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithUsernamePassword(username: string, password: string,
        callback: any)
      parameters:
        - id: username
          type: string
          description: ''
        - id: password
          type: string
          description: ''
        - id: callback
          type: any
          description: ''
  - name: >-
      loginWithUsernamePassword(string, string,
      LoginWithUsernamePasswordOptions, (err: Error, credentials:
      UserTokenCredentials, subscriptions: LinkedSubscription[]) => void)
    uid: '@azure/ms-rest-nodeauth.loginWithUsernamePassword_3'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithUsernamePassword(username: string, password: string,
        options: LoginWithUsernamePasswordOptions, callback: (err: Error,
        credentials: UserTokenCredentials, subscriptions: LinkedSubscription[])
        => void)
      parameters:
        - id: username
          type: string
          description: ''
        - id: password
          type: string
          description: ''
        - id: options
          type: >-
            <xref uid="@azure/ms-rest-nodeauth.LoginWithUsernamePasswordOptions"
            />
          description: ''
        - id: callback
          type: >-
            (err: Error, credentials: UserTokenCredentials, subscriptions:
            LinkedSubscription[]) =&gt; void
          description: ''
  - name: >-
      loginWithUsernamePasswordWithAuthResponse(string, string,
      LoginWithUsernamePasswordOptions)
    uid: '@azure/ms-rest-nodeauth.loginWithUsernamePasswordWithAuthResponse'
    package: '@azure/ms-rest-nodeauth'
    summary: >-
      Provides a UserTokenCredentials object and the list of subscriptions
      associated with that userId across all the applicable tenants.

      This method is applicable only for organizational ids that are not 2FA
      enabled otherwise please use interactive login.


      When using personal accounts, the `domain` property in the `options`
      parameter is required to be set to the Id of a tenant for that account.
      Otherwise, the resulting credential will not be able to access the
      account's resources.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithUsernamePasswordWithAuthResponse(username: string,
        password: string, options?: LoginWithUsernamePasswordOptions):
        Promise<AuthResponse<UserTokenCredentials>>
      parameters:
        - id: username
          type: string
          description: The user name for the Organization Id account.
        - id: password
          type: string
          description: The password for the Organization Id account.
        - id: options
          type: >-
            <xref uid="@azure/ms-rest-nodeauth.LoginWithUsernamePasswordOptions"
            />
          description: Object representing optional parameters.
      return:
        description: >-
          A Promise that resolves to AuthResponse, which contains `credentials`
          and an optional `subscriptions` array, and rejects with an Error.
        type: >-
          Promise&lt;<xref uid="@azure/ms-rest-nodeauth.AuthResponse"
          />&lt;<xref uid="@azure/ms-rest-nodeauth.UserTokenCredentials"
          />&gt;&gt;
  - name: loginWithVmMSI()
    uid: '@azure/ms-rest-nodeauth.loginWithVmMSI'
    package: '@azure/ms-rest-nodeauth'
    summary: >-
      Before using this method please install az cli from
      https://github.com/Azure/azure-cli/releases.

      If you have an Azure virtual machine provisioned with az cli and has MSI
      enabled,

      you can then use this method to get auth tokens from the VM.


      To create a new VM, enable MSI, please execute this command:

      az vm create -g <resource_group_name> -n <vm_name> --assign-identity
      --image <os_image_name>

      Note: the above command enables a service endpoint on the host, with a
      default port 50342


      To enable MSI on a already provisioned VM, execute the following command:

      az vm --assign-identity -g <resource_group_name> -n <vm_name> --port
      <custom_port_number>


      To know more about this command, please execute:

      az vm --assign-identity -h


      Authenticates using the identity service running on an Azure virtual
      machine.

      This method makes a request to the authentication service hosted on the VM

      and gets back an access token.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function loginWithVmMSI(): Promise<MSIVmTokenCredentials>'
      return:
        description: >-
          If a callback was passed as the last parameter then it returns void
          else returns a Promise.

          The callback is called with the resulting MSIVmTokenCredentials
          object.
        type: >-
          Promise&lt;<xref uid="@azure/ms-rest-nodeauth.MSIVmTokenCredentials"
          />&gt;
  - name: loginWithVmMSI(MSIVmOptions)
    uid: '@azure/ms-rest-nodeauth.loginWithVmMSI_1'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithVmMSI(options: MSIVmOptions):
        Promise<MSIVmTokenCredentials>
      parameters:
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.MSIVmOptions" />
          description: ''
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/ms-rest-nodeauth.MSIVmTokenCredentials"
          />&gt;
  - name: loginWithVmMSI(MSIVmOptions, Callback<MSIVmTokenCredentials>)
    uid: '@azure/ms-rest-nodeauth.loginWithVmMSI_2'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function loginWithVmMSI(options: MSIVmOptions, callback:
        Callback<MSIVmTokenCredentials>)
      parameters:
        - id: options
          type: <xref uid="@azure/ms-rest-nodeauth.MSIVmOptions" />
          description: ''
        - id: callback
          type: >-
            Callback&lt;<xref
            uid="@azure/ms-rest-nodeauth.MSIVmTokenCredentials" />&gt;
          description: ''
  - name: loginWithVmMSI(Callback<MSIVmTokenCredentials>)
    uid: '@azure/ms-rest-nodeauth.loginWithVmMSI_3'
    package: '@azure/ms-rest-nodeauth'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function loginWithVmMSI(callback: Callback<MSIVmTokenCredentials>)'
      parameters:
        - id: callback
          type: >-
            Callback&lt;<xref
            uid="@azure/ms-rest-nodeauth.MSIVmTokenCredentials" />&gt;
          description: ''
