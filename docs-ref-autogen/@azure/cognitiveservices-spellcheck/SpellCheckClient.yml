### YamlMime:TSType
name: SpellCheckClient
uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient'
package: '@azure/cognitiveservices-spellcheck'
summary: ''
fullName: SpellCheckClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: SpellCheckClient(ServiceClientCredentials, SpellCheckClientOptions)
    uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.constructor'
    package: '@azure/cognitiveservices-spellcheck'
    summary: Initializes a new instance of the SpellCheckClient class.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new SpellCheckClient(credentials: ServiceClientCredentials, options?:
        SpellCheckClientOptions)
      parameters:
        - id: credentials
          type: <xref uid="@azure/ms-rest-js.ServiceClientCredentials" />
          description: >-
            Subscription credentials which uniquely identify client
            subscription.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-spellcheck.SpellCheckModels.SpellCheckClientOptions"
            />
          description: The parameter options
inheritedProperties:
  - name: credentials
    uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.credentials'
    package: '@azure/cognitiveservices-spellcheck'
    summary: ''
    fullName: credentials
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'credentials: ServiceClientCredentials'
      return:
        description: ''
        type: <xref uid="@azure/ms-rest-js.ServiceClientCredentials" />
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SpellCheckClientContext.credentials](xref:@azure/cognitiveservices-spellcheck.SpellCheckClientContext.credentials)
  - name: endpoint
    uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.endpoint'
    package: '@azure/cognitiveservices-spellcheck'
    summary: ''
    fullName: endpoint
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'endpoint?: string'
      return:
        description: ''
        type: string
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SpellCheckClientContext.endpoint](xref:@azure/cognitiveservices-spellcheck.SpellCheckClientContext.endpoint)
inheritedMethods:
  - name: >-
      sendOperationRequest(OperationArguments, OperationSpec,
      ServiceCallback<any>)
    uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendOperationRequest'
    package: '@azure/cognitiveservices-spellcheck'
    summary: Send an HTTP request that is populated using the provided OperationSpec.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendOperationRequest(operationArguments: OperationArguments,
        operationSpec: OperationSpec, callback?: ServiceCallback<any>):
        Promise<RestResponse>
      parameters:
        - id: operationArguments
          type: <xref uid="@azure/ms-rest-js.OperationArguments" />
          description: >-
            The arguments that the HTTP request's templated values will be
            populated from.
        - id: operationSpec
          type: <xref uid="@azure/ms-rest-js.OperationSpec" />
          description: The OperationSpec to use to populate the httpRequest.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;any&gt;
          description: The callback to call when the response is received.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SpellCheckClientContext.sendOperationRequest](xref:@azure/cognitiveservices-spellcheck.SpellCheckClientContext.sendOperationRequest)
  - name: sendRequest(RequestPrepareOptions | WebResourceLike)
    uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.sendRequest'
    package: '@azure/cognitiveservices-spellcheck'
    summary: Send the provided httpRequest.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function sendRequest(options: RequestPrepareOptions | WebResourceLike):
        Promise<HttpOperationResponse>
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/ms-rest-js.RequestPrepareOptions" /> | <xref
            uid="@azure/ms-rest-js.WebResourceLike" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/ms-rest-js.HttpOperationResponse" />&gt;
    inheritanceDescription: >-
      <b>Inherited From</b>
      [SpellCheckClientContext.sendRequest](xref:@azure/cognitiveservices-spellcheck.SpellCheckClientContext.sendRequest)
methods:
  - name: spellChecker(string, ServiceCallback<SpellCheck>)
    uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_1'
    package: '@azure/cognitiveservices-spellcheck'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function spellChecker(text: string, callback:
        ServiceCallback<SpellCheck>)
      parameters:
        - id: text
          type: string
          description: >-
            The text string to check for spelling and grammar errors. The
            combined length of the

            text string, preContextText string, and postContextText string may
            not exceed 10,000 characters.

            You may specify this parameter in the query string of a GET request
            or in the body of a POST

            request. Because of the query string length limit, you'll typically
            use a POST request unless

            you're checking only short strings.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/cognitiveservices-spellcheck.SpellCheckModels.SpellCheck"
            />&gt;
          description: The callback
  - name: spellChecker(string, SpellCheckClientSpellCheckerOptionalParams)
    uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker'
    package: '@azure/cognitiveservices-spellcheck'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function spellChecker(text: string, options?:
        SpellCheckClientSpellCheckerOptionalParams):
        Promise<SpellCheckerResponse>
      parameters:
        - id: text
          type: string
          description: >-
            The text string to check for spelling and grammar errors. The
            combined length of the

            text string, preContextText string, and postContextText string may
            not exceed 10,000 characters.

            You may specify this parameter in the query string of a GET request
            or in the body of a POST

            request. Because of the query string length limit, you'll typically
            use a POST request unless

            you're checking only short strings.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-spellcheck.SpellCheckModels.SpellCheckClientSpellCheckerOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.SpellCheckerResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/cognitiveservices-spellcheck.SpellCheckModels.SpellCheckerResponse"
          />&gt;
  - name: >-
      spellChecker(string, SpellCheckClientSpellCheckerOptionalParams,
      ServiceCallback<SpellCheck>)
    uid: '@azure/cognitiveservices-spellcheck.SpellCheckClient.spellChecker_2'
    package: '@azure/cognitiveservices-spellcheck'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function spellChecker(text: string, options:
        SpellCheckClientSpellCheckerOptionalParams, callback:
        ServiceCallback<SpellCheck>)
      parameters:
        - id: text
          type: string
          description: >-
            The text string to check for spelling and grammar errors. The
            combined length of the

            text string, preContextText string, and postContextText string may
            not exceed 10,000 characters.

            You may specify this parameter in the query string of a GET request
            or in the body of a POST

            request. Because of the query string length limit, you'll typically
            use a POST request unless

            you're checking only short strings.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-spellcheck.SpellCheckModels.SpellCheckClientSpellCheckerOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/cognitiveservices-spellcheck.SpellCheckModels.SpellCheck"
            />&gt;
          description: The callback
extends: <xref uid="@azure/cognitiveservices-spellcheck.SpellCheckClientContext" />
