### YamlMime:TSType
name: SnapshotOperations
uid: '@azure/cognitiveservices-face.SnapshotOperations'
package: '@azure/cognitiveservices-face'
summary: Class representing a SnapshotOperations.
fullName: SnapshotOperations
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: SnapshotOperations(FaceClientContext)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.constructor'
    package: '@azure/cognitiveservices-face'
    summary: Create a SnapshotOperations.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new SnapshotOperations(client: FaceClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/cognitiveservices-face.FaceClientContext" />
          description: Reference to the service client.
methods:
  - name: apply(string, string, ServiceCallback<void>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.apply_1'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function apply(snapshotId: string, objectId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: snapshotId
          type: string
          description: Id referencing a particular snapshot.
        - id: objectId
          type: string
          description: User specified target object id to be created from the snapshot.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: apply(string, string, SnapshotApplyOptionalParams)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.apply'
    package: '@azure/cognitiveservices-face'
    summary: >-
      Submit an operation to apply a snapshot to current subscription. For each
      snapshot, only

      subscriptions included in the applyScope of Snapshot - Take can apply
      it.<br />

      The snapshot interfaces are for users to backup and restore their face
      data from one face

      subscription to another, inside same region or across regions. The
      workflow contains two phases,

      user first calls Snapshot - Take to create a copy of the source object and
      store it as a

      snapshot, then calls Snapshot - Apply to paste the snapshot to target
      subscription. The

      snapshots are stored in a centralized location (per Azure instance), so
      that they can be applied

      cross accounts and regions.<br />

      Applying snapshot is an asynchronous operation. An operation id can be
      obtained from the

      "Operation-Location" field in response header, to be used in
      OperationStatus - Get for tracking

      the progress of applying the snapshot. The target object id will be
      included in the

      "resourceLocation" field in OperationStatus - Get response when the
      operation status is

      "succeeded".<br />

      Snapshot applying time depends on the number of person and face entries in
      the snapshot object.

      It could be in seconds, or up to 1 hour for 1,000,000 persons with
      multiple faces.<br />

      Snapshots will be automatically expired and cleaned in 48 hours after it
      is created by Snapshot

      - Take. So the target subscription is required to apply the snapshot in 48
      hours since its

      creation.<br />

      Applying a snapshot will not block any other operations against the target
      object, however it is

      not recommended because the correctness cannot be guaranteed during
      snapshot applying. After

      snapshot applying is completed, all operations towards the target object
      can work as normal.

      Snapshot also includes the training results of the source object, which
      means target

      subscription the snapshot applied to does not need re-train the target
      object before calling

      Identify/FindSimilar.<br />

      One snapshot can be applied multiple times in parallel, while currently
      only CreateNew apply

      mode is supported, which means the apply operation will fail if target
      subscription already

      contains an object of same type and using the same objectId. Users can
      specify the "objectId" in

      request body to avoid such conflicts.<br />

      * Free-tier subscription quota: 100 apply operations per month.

      * S0-tier subscription quota: 100 apply operations per day.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function apply(snapshotId: string, objectId: string, options?:
        SnapshotApplyOptionalParams): Promise<SnapshotApplyResponse>
      parameters:
        - id: snapshotId
          type: string
          description: Id referencing a particular snapshot.
        - id: objectId
          type: string
          description: User specified target object id to be created from the snapshot.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-face.FaceModels.SnapshotApplyOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.SnapshotApplyResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/cognitiveservices-face.FaceModels.SnapshotApplyResponse"
          />&gt;
  - name: apply(string, string, SnapshotApplyOptionalParams, ServiceCallback<void>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.apply_2'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function apply(snapshotId: string, objectId: string, options:
        SnapshotApplyOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: snapshotId
          type: string
          description: Id referencing a particular snapshot.
        - id: objectId
          type: string
          description: User specified target object id to be created from the snapshot.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-face.FaceModels.SnapshotApplyOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteMethod(string, RequestOptionsBase)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.deleteMethod'
    package: '@azure/cognitiveservices-face'
    summary: >-
      Delete an existing snapshot according to the snapshotId. All object data
      and information in the

      snapshot will also be deleted. Only the source subscription who took the
      snapshot can delete the

      snapshot. If the user does not delete a snapshot with this API, the
      snapshot will still be

      automatically deleted in 48 hours after creation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(snapshotId: string, options?: RequestOptionsBase):
        Promise<RestResponse>
      parameters:
        - id: snapshotId
          type: string
          description: Id referencing a particular snapshot.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: deleteMethod(string, RequestOptionsBase, ServiceCallback<void>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.deleteMethod_2'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(snapshotId: string, options: RequestOptionsBase,
        callback: ServiceCallback<void>)
      parameters:
        - id: snapshotId
          type: string
          description: Id referencing a particular snapshot.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteMethod(string, ServiceCallback<void>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.deleteMethod_1'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(snapshotId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: snapshotId
          type: string
          description: Id referencing a particular snapshot.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: get(string, RequestOptionsBase)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.get'
    package: '@azure/cognitiveservices-face'
    summary: >-
      Retrieve information about a snapshot. Snapshot is only accessible to the
      source subscription

      who took it, and target subscriptions included in the applyScope in
      Snapshot - Take.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(snapshotId: string, options?: RequestOptionsBase):
        Promise<SnapshotGetResponse>
      parameters:
        - id: snapshotId
          type: string
          description: Id referencing a particular snapshot.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
      return:
        description: Promise<Models.SnapshotGetResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/cognitiveservices-face.FaceModels.SnapshotGetResponse"
          />&gt;
  - name: get(string, RequestOptionsBase, ServiceCallback<Snapshot>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.get_2'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(snapshotId: string, options: RequestOptionsBase, callback:
        ServiceCallback<Snapshot>)
      parameters:
        - id: snapshotId
          type: string
          description: Id referencing a particular snapshot.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/cognitiveservices-face.FaceModels.Snapshot" />&gt;
          description: The callback
  - name: get(string, ServiceCallback<Snapshot>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.get_1'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function get(snapshotId: string, callback: ServiceCallback<Snapshot>)'
      parameters:
        - id: snapshotId
          type: string
          description: Id referencing a particular snapshot.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/cognitiveservices-face.FaceModels.Snapshot" />&gt;
          description: The callback
  - name: getOperationStatus(string, RequestOptionsBase)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.getOperationStatus'
    package: '@azure/cognitiveservices-face'
    summary: Retrieve the status of a take/apply snapshot operation.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getOperationStatus(operationId: string, options?:
        RequestOptionsBase): Promise<SnapshotGetOperationStatusResponse>
      parameters:
        - id: operationId
          type: string
          description: Id referencing a particular take/apply snapshot operation.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
      return:
        description: Promise<Models.SnapshotGetOperationStatusResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/cognitiveservices-face.FaceModels.SnapshotGetOperationStatusResponse"
          />&gt;
  - name: >-
      getOperationStatus(string, RequestOptionsBase,
      ServiceCallback<OperationStatus>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.getOperationStatus_2'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getOperationStatus(operationId: string, options:
        RequestOptionsBase, callback: ServiceCallback<OperationStatus>)
      parameters:
        - id: operationId
          type: string
          description: Id referencing a particular take/apply snapshot operation.
        - id: options
          type: <xref uid="@azure/ms-rest-js.RequestOptionsBase" />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/cognitiveservices-face.FaceModels.OperationStatus"
            />&gt;
          description: The callback
  - name: getOperationStatus(string, ServiceCallback<OperationStatus>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.getOperationStatus_1'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getOperationStatus(operationId: string, callback:
        ServiceCallback<OperationStatus>)
      parameters:
        - id: operationId
          type: string
          description: Id referencing a particular take/apply snapshot operation.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/cognitiveservices-face.FaceModels.OperationStatus"
            />&gt;
          description: The callback
  - name: list(ServiceCallback<Snapshot[]>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.list_1'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function list(callback: ServiceCallback<Snapshot[]>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/cognitiveservices-face.FaceModels.Snapshot" />[]&gt;
          description: The callback
  - name: list(SnapshotListOptionalParams)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.list'
    package: '@azure/cognitiveservices-face'
    summary: >-
      List all accessible snapshots with related information, including
      snapshots that were taken by

      the user, or snapshots to be applied to the user (subscription id was
      included in the applyScope

      in Snapshot - Take).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(options?: SnapshotListOptionalParams):
        Promise<SnapshotListResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-face.FaceModels.SnapshotListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.SnapshotListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/cognitiveservices-face.FaceModels.SnapshotListResponse"
          />&gt;
  - name: list(SnapshotListOptionalParams, ServiceCallback<Snapshot[]>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.list_2'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(options: SnapshotListOptionalParams, callback:
        ServiceCallback<Snapshot[]>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-face.FaceModels.SnapshotListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/cognitiveservices-face.FaceModels.Snapshot" />[]&gt;
          description: The callback
  - name: take(SnapshotObjectType, string, string[], ServiceCallback<void>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.take_1'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function take(type: SnapshotObjectType, objectId: string, applyScope:
        string[], callback: ServiceCallback<void>)
      parameters:
        - id: type
          type: >-
            <xref
            uid="@azure/cognitiveservices-face.FaceModels.SnapshotObjectType" />
          description: >-
            User specified type for the source object to take snapshot from.
            Currently FaceList,

            PersonGroup, LargeFaceList and LargePersonGroup are supported.
            Possible values include:

            'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'
        - id: objectId
          type: string
          description: User specified source object id to take snapshot from.
        - id: applyScope
          type: string[]
          description: >-
            User specified array of target Face subscription ids for the
            snapshot. For

            each snapshot, only subscriptions included in the applyScope of
            Snapshot - Take can apply it.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: take(SnapshotObjectType, string, string[], SnapshotTakeOptionalParams)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.take'
    package: '@azure/cognitiveservices-face'
    summary: >-
      Submit an operation to take a snapshot of face list, large face list,
      person group or large

      person group, with user-specified snapshot type, source object id, apply
      scope and an optional

      user data.<br />

      The snapshot interfaces are for users to backup and restore their face
      data from one face

      subscription to another, inside same region or across regions. The
      workflow contains two phases,

      user first calls Snapshot - Take to create a copy of the source object and
      store it as a

      snapshot, then calls Snapshot - Apply to paste the snapshot to target
      subscription. The

      snapshots are stored in a centralized location (per Azure instance), so
      that they can be applied

      cross accounts and regions.<br />

      Taking snapshot is an asynchronous operation. An operation id can be
      obtained from the

      "Operation-Location" field in response header, to be used in
      OperationStatus - Get for tracking

      the progress of creating the snapshot. The snapshot id will be included in
      the

      "resourceLocation" field in OperationStatus - Get response when the
      operation status is

      "succeeded".<br />

      Snapshot taking time depends on the number of person and face entries in
      the source object. It

      could be in seconds, or up to several hours for 1,000,000 persons with
      multiple faces.<br />

      Snapshots will be automatically expired and cleaned in 48 hours after it
      is created by Snapshot

      - Take. User can delete the snapshot using Snapshot - Delete by themselves
      any time before

      expiration.<br />

      Taking snapshot for a certain object will not block any other operations
      against the object. All

      read-only operations (Get/List and Identify/FindSimilar/Verify) can be
      conducted as usual. For

      all writable operations, including Add/Update/Delete the source object or
      its persons/faces and

      Train, they are not blocked but not recommended because writable updates
      may not be reflected on

      the snapshot during its taking. After snapshot taking is completed, all
      readable and writable

      operations can work as normal. Snapshot will also include the training
      results of the source

      object, which means target subscription the snapshot applied to does not
      need re-train the

      target object before calling Identify/FindSimilar.<br />

      * Free-tier subscription quota: 100 take operations per month.

      * S0-tier subscription quota: 100 take operations per day.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function take(type: SnapshotObjectType, objectId: string, applyScope:
        string[], options?: SnapshotTakeOptionalParams):
        Promise<SnapshotTakeResponse>
      parameters:
        - id: type
          type: >-
            <xref
            uid="@azure/cognitiveservices-face.FaceModels.SnapshotObjectType" />
          description: >-
            User specified type for the source object to take snapshot from.
            Currently FaceList,

            PersonGroup, LargeFaceList and LargePersonGroup are supported.
            Possible values include:

            'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'
        - id: objectId
          type: string
          description: User specified source object id to take snapshot from.
        - id: applyScope
          type: string[]
          description: >-
            User specified array of target Face subscription ids for the
            snapshot. For

            each snapshot, only subscriptions included in the applyScope of
            Snapshot - Take can apply it.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-face.FaceModels.SnapshotTakeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.SnapshotTakeResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/cognitiveservices-face.FaceModels.SnapshotTakeResponse"
          />&gt;
  - name: >-
      take(SnapshotObjectType, string, string[], SnapshotTakeOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.take_2'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function take(type: SnapshotObjectType, objectId: string, applyScope:
        string[], options: SnapshotTakeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: type
          type: >-
            <xref
            uid="@azure/cognitiveservices-face.FaceModels.SnapshotObjectType" />
          description: >-
            User specified type for the source object to take snapshot from.
            Currently FaceList,

            PersonGroup, LargeFaceList and LargePersonGroup are supported.
            Possible values include:

            'FaceList', 'LargeFaceList', 'LargePersonGroup', 'PersonGroup'
        - id: objectId
          type: string
          description: User specified source object id to take snapshot from.
        - id: applyScope
          type: string[]
          description: >-
            User specified array of target Face subscription ids for the
            snapshot. For

            each snapshot, only subscriptions included in the applyScope of
            Snapshot - Take can apply it.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-face.FaceModels.SnapshotTakeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: update(string, ServiceCallback<void>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.update_1'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function update(snapshotId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: snapshotId
          type: string
          description: Id referencing a particular snapshot.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: update(string, SnapshotUpdateOptionalParams)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.update'
    package: '@azure/cognitiveservices-face'
    summary: >-
      Update the information of a snapshot. Only the source subscription who
      took the snapshot can

      update the snapshot.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function update(snapshotId: string, options?:
        SnapshotUpdateOptionalParams): Promise<RestResponse>
      parameters:
        - id: snapshotId
          type: string
          description: Id referencing a particular snapshot.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-face.FaceModels.SnapshotUpdateOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<msRest.RestResponse>
        type: Promise&lt;<xref uid="@azure/ms-rest-js.RestResponse" />&gt;
  - name: update(string, SnapshotUpdateOptionalParams, ServiceCallback<void>)
    uid: '@azure/cognitiveservices-face.SnapshotOperations.update_2'
    package: '@azure/cognitiveservices-face'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function update(snapshotId: string, options:
        SnapshotUpdateOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: snapshotId
          type: string
          description: Id referencing a particular snapshot.
        - id: options
          type: >-
            <xref
            uid="@azure/cognitiveservices-face.FaceModels.SnapshotUpdateOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
