### YamlMime:TSType
name: Task
uid: '@azure/batch.Task'
package: '@azure/batch'
summary: Class representing a Task.
fullName: Task
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: Task(BatchServiceClientContext)
    uid: '@azure/batch.Task.constructor'
    package: '@azure/batch'
    summary: Create a Task.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new Task(client: BatchServiceClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/batch.BatchServiceClientContext" />
          description: Reference to the service client.
methods:
  - name: add(string, TaskAddParameter, ServiceCallback<void>)
    uid: '@azure/batch.Task.add_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function add(jobId: string, task: TaskAddParameter, callback:
        ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to which the Task is to be added.
        - id: task
          type: <xref uid="@azure/batch.BatchServiceModels.TaskAddParameter" />
          description: The Task to be added.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: add(string, TaskAddParameter, TaskAddOptionalParams)
    uid: '@azure/batch.Task.add'
    package: '@azure/batch'
    summary: >-
      The maximum lifetime of a Task from addition to completion is 180 days. If
      a Task has not

      completed within 180 days of being added it will be terminated by the
      Batch service and left in

      whatever state it was in at that time.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function add(jobId: string, task: TaskAddParameter, options?:
        TaskAddOptionalParams): Promise<TaskAddResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to which the Task is to be added.
        - id: task
          type: <xref uid="@azure/batch.BatchServiceModels.TaskAddParameter" />
          description: The Task to be added.
        - id: options
          type: <xref uid="@azure/batch.BatchServiceModels.TaskAddOptionalParams" />
          description: The optional parameters
      return:
        description: Promise<Models.TaskAddResponse>
        type: >-
          Promise&lt;<xref uid="@azure/batch.BatchServiceModels.TaskAddResponse"
          />&gt;
  - name: >-
      add(string, TaskAddParameter, TaskAddOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.Task.add_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function add(jobId: string, task: TaskAddParameter, options:
        TaskAddOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to which the Task is to be added.
        - id: task
          type: <xref uid="@azure/batch.BatchServiceModels.TaskAddParameter" />
          description: The Task to be added.
        - id: options
          type: <xref uid="@azure/batch.BatchServiceModels.TaskAddOptionalParams" />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      addCollection(string, TaskAddParameter[],
      ServiceCallback<TaskAddCollectionResult>)
    uid: '@azure/batch.Task.addCollection_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addCollection(jobId: string, value: TaskAddParameter[],
        callback: ServiceCallback<TaskAddCollectionResult>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to which the Task collection is to be added.
        - id: value
          type: <xref uid="@azure/batch.BatchServiceModels.TaskAddParameter" />[]
          description: >-
            The collection of Tasks to add. The maximum count of Tasks is 100.
            The total

            serialized size of this collection must be less than 1MB. If it is
            greater than 1MB (for example

            if each Task has 100's of resource files or environment variables),
            the request will fail with

            code 'RequestBodyTooLarge' and should be retried again with fewer
            Tasks.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.TaskAddCollectionResult" />&gt;
          description: The callback
  - name: addCollection(string, TaskAddParameter[], TaskAddCollectionOptionalParams)
    uid: '@azure/batch.Task.addCollection'
    package: '@azure/batch'
    summary: >-
      Note that each Task must have a unique ID. The Batch service may not
      return the results for each

      Task in the same order the Tasks were submitted in this request. If the
      server times out or the

      connection is closed during the request, the request may have been
      partially or fully processed,

      or not at all. In such cases, the user should re-issue the request. Note
      that it is up to the

      user to correctly handle failures when re-issuing a request. For example,
      you should use the

      same Task IDs during a retry so that if the prior operation succeeded, the
      retry will not create

      extra Tasks unexpectedly. If the response contains any Tasks which failed
      to add, a client can

      retry the request. In a retry, it is most efficient to resubmit only Tasks
      that failed to add,

      and to omit Tasks that were successfully added on the first attempt. The
      maximum lifetime of a

      Task from addition to completion is 180 days. If a Task has not completed
      within 180 days of

      being added it will be terminated by the Batch service and left in
      whatever state it was in at

      that time.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addCollection(jobId: string, value: TaskAddParameter[],
        options?: TaskAddCollectionOptionalParams):
        Promise<TaskAddCollectionResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to which the Task collection is to be added.
        - id: value
          type: <xref uid="@azure/batch.BatchServiceModels.TaskAddParameter" />[]
          description: >-
            The collection of Tasks to add. The maximum count of Tasks is 100.
            The total

            serialized size of this collection must be less than 1MB. If it is
            greater than 1MB (for example

            if each Task has 100's of resource files or environment variables),
            the request will fail with

            code 'RequestBodyTooLarge' and should be retried again with fewer
            Tasks.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.TaskAddCollectionOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.TaskAddCollectionResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.TaskAddCollectionResponse" />&gt;
  - name: >-
      addCollection(string, TaskAddParameter[], TaskAddCollectionOptionalParams,
      ServiceCallback<TaskAddCollectionResult>)
    uid: '@azure/batch.Task.addCollection_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addCollection(jobId: string, value: TaskAddParameter[],
        options: TaskAddCollectionOptionalParams, callback:
        ServiceCallback<TaskAddCollectionResult>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to which the Task collection is to be added.
        - id: value
          type: <xref uid="@azure/batch.BatchServiceModels.TaskAddParameter" />[]
          description: >-
            The collection of Tasks to add. The maximum count of Tasks is 100.
            The total

            serialized size of this collection must be less than 1MB. If it is
            greater than 1MB (for example

            if each Task has 100's of resource files or environment variables),
            the request will fail with

            code 'RequestBodyTooLarge' and should be retried again with fewer
            Tasks.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.TaskAddCollectionOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.TaskAddCollectionResult" />&gt;
          description: The callback
  - name: deleteMethod(string, string, ServiceCallback<void>)
    uid: '@azure/batch.Task.deleteMethod_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(jobId: string, taskId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job from which to delete the Task.
        - id: taskId
          type: string
          description: The ID of the Task to delete.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteMethod(string, string, TaskDeleteMethodOptionalParams)
    uid: '@azure/batch.Task.deleteMethod'
    package: '@azure/batch'
    summary: >-
      When a Task is deleted, all of the files in its directory on the Compute
      Node where it ran are

      also deleted (regardless of the retention time). For multi-instance Tasks,
      the delete Task

      operation applies synchronously to the primary task; subtasks and their
      files are then deleted

      asynchronously in the background.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(jobId: string, taskId: string, options?:
        TaskDeleteMethodOptionalParams): Promise<TaskDeleteResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job from which to delete the Task.
        - id: taskId
          type: string
          description: The ID of the Task to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.TaskDeleteMethodOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.TaskDeleteResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.TaskDeleteResponse" />&gt;
  - name: >-
      deleteMethod(string, string, TaskDeleteMethodOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.Task.deleteMethod_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(jobId: string, taskId: string, options:
        TaskDeleteMethodOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job from which to delete the Task.
        - id: taskId
          type: string
          description: The ID of the Task to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.TaskDeleteMethodOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: get(string, string, ServiceCallback<CloudTask>)
    uid: '@azure/batch.Task.get_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(jobId: string, taskId: string, callback:
        ServiceCallback<CloudTask>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task to get information about.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudTask" />&gt;
          description: The callback
  - name: get(string, string, TaskGetOptionalParams)
    uid: '@azure/batch.Task.get'
    package: '@azure/batch'
    summary: >-
      For multi-instance Tasks, information such as affinityId, executionInfo
      and nodeInfo refer to

      the primary Task. Use the list subtasks API to retrieve information about
      subtasks.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(jobId: string, taskId: string, options?:
        TaskGetOptionalParams): Promise<TaskGetResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task to get information about.
        - id: options
          type: <xref uid="@azure/batch.BatchServiceModels.TaskGetOptionalParams" />
          description: The optional parameters
      return:
        description: Promise<Models.TaskGetResponse>
        type: >-
          Promise&lt;<xref uid="@azure/batch.BatchServiceModels.TaskGetResponse"
          />&gt;
  - name: get(string, string, TaskGetOptionalParams, ServiceCallback<CloudTask>)
    uid: '@azure/batch.Task.get_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(jobId: string, taskId: string, options:
        TaskGetOptionalParams, callback: ServiceCallback<CloudTask>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task to get information about.
        - id: options
          type: <xref uid="@azure/batch.BatchServiceModels.TaskGetOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudTask" />&gt;
          description: The callback
  - name: list(string, ServiceCallback<CloudTaskListResult>)
    uid: '@azure/batch.Task.list_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(jobId: string, callback:
        ServiceCallback<CloudTaskListResult>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudTaskListResult" />&gt;
          description: The callback
  - name: list(string, TaskListOptionalParams)
    uid: '@azure/batch.Task.list'
    package: '@azure/batch'
    summary: >-
      For multi-instance Tasks, information such as affinityId, executionInfo
      and nodeInfo refer to

      the primary Task. Use the list subtasks API to retrieve information about
      subtasks.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(jobId: string, options?: TaskListOptionalParams):
        Promise<TaskListResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: options
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.TaskListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.TaskListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.TaskListResponse" />&gt;
  - name: list(string, TaskListOptionalParams, ServiceCallback<CloudTaskListResult>)
    uid: '@azure/batch.Task.list_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(jobId: string, options: TaskListOptionalParams, callback:
        ServiceCallback<CloudTaskListResult>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: options
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.TaskListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudTaskListResult" />&gt;
          description: The callback
  - name: listNext(string, ServiceCallback<CloudTaskListResult>)
    uid: '@azure/batch.Task.listNext_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, callback:
        ServiceCallback<CloudTaskListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudTaskListResult" />&gt;
          description: The callback
  - name: listNext(string, TaskListNextOptionalParams)
    uid: '@azure/batch.Task.listNext'
    package: '@azure/batch'
    summary: >-
      For multi-instance Tasks, information such as affinityId, executionInfo
      and nodeInfo refer to

      the primary Task. Use the list subtasks API to retrieve information about
      subtasks.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options?:
        TaskListNextOptionalParams): Promise<TaskListResponse>
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.TaskListNextOptionalParams" />
          description: The optional parameters
      return:
        description: Promise<Models.TaskListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.TaskListResponse" />&gt;
  - name: >-
      listNext(string, TaskListNextOptionalParams,
      ServiceCallback<CloudTaskListResult>)
    uid: '@azure/batch.Task.listNext_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options:
        TaskListNextOptionalParams, callback:
        ServiceCallback<CloudTaskListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.TaskListNextOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudTaskListResult" />&gt;
          description: The callback
  - name: listSubtasks(string, string, ServiceCallback<CloudTaskListSubtasksResult>)
    uid: '@azure/batch.Task.listSubtasks_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listSubtasks(jobId: string, taskId: string, callback:
        ServiceCallback<CloudTaskListSubtasksResult>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: taskId
          type: string
          description: The ID of the Task.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudTaskListSubtasksResult"
            />&gt;
          description: The callback
  - name: listSubtasks(string, string, TaskListSubtasksOptionalParams)
    uid: '@azure/batch.Task.listSubtasks'
    package: '@azure/batch'
    summary: >-
      If the Task is not a multi-instance Task then this returns an empty
      collection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listSubtasks(jobId: string, taskId: string, options?:
        TaskListSubtasksOptionalParams): Promise<TaskListSubtasksResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: taskId
          type: string
          description: The ID of the Task.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.TaskListSubtasksOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.TaskListSubtasksResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.TaskListSubtasksResponse" />&gt;
  - name: >-
      listSubtasks(string, string, TaskListSubtasksOptionalParams,
      ServiceCallback<CloudTaskListSubtasksResult>)
    uid: '@azure/batch.Task.listSubtasks_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listSubtasks(jobId: string, taskId: string, options:
        TaskListSubtasksOptionalParams, callback:
        ServiceCallback<CloudTaskListSubtasksResult>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: taskId
          type: string
          description: The ID of the Task.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.TaskListSubtasksOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudTaskListSubtasksResult"
            />&gt;
          description: The callback
  - name: reactivate(string, string, ServiceCallback<void>)
    uid: '@azure/batch.Task.reactivate_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reactivate(jobId: string, taskId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job containing the Task.
        - id: taskId
          type: string
          description: The ID of the Task to reactivate.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: reactivate(string, string, TaskReactivateOptionalParams)
    uid: '@azure/batch.Task.reactivate'
    package: '@azure/batch'
    summary: >-
      Reactivation makes a Task eligible to be retried again up to its maximum
      retry count. The Task's

      state is changed to active. As the Task is no longer in the completed
      state, any previous exit

      code or failure information is no longer available after reactivation.
      Each time a Task is

      reactivated, its retry count is reset to 0. Reactivation will fail for
      Tasks that are not

      completed or that previously completed successfully (with an exit code of
      0). Additionally, it

      will fail if the Job has completed (or is terminating or deleting).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reactivate(jobId: string, taskId: string, options?:
        TaskReactivateOptionalParams): Promise<TaskReactivateResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job containing the Task.
        - id: taskId
          type: string
          description: The ID of the Task to reactivate.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.TaskReactivateOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.TaskReactivateResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.TaskReactivateResponse" />&gt;
  - name: >-
      reactivate(string, string, TaskReactivateOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.Task.reactivate_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reactivate(jobId: string, taskId: string, options:
        TaskReactivateOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job containing the Task.
        - id: taskId
          type: string
          description: The ID of the Task to reactivate.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.TaskReactivateOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: terminate(string, string, ServiceCallback<void>)
    uid: '@azure/batch.Task.terminate_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function terminate(jobId: string, taskId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job containing the Task.
        - id: taskId
          type: string
          description: The ID of the Task to terminate.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: terminate(string, string, TaskTerminateOptionalParams)
    uid: '@azure/batch.Task.terminate'
    package: '@azure/batch'
    summary: >-
      When the Task has been terminated, it moves to the completed state. For
      multi-instance Tasks,

      the terminate Task operation applies synchronously to the primary task;
      subtasks are then

      terminated asynchronously in the background.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function terminate(jobId: string, taskId: string, options?:
        TaskTerminateOptionalParams): Promise<TaskTerminateResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job containing the Task.
        - id: taskId
          type: string
          description: The ID of the Task to terminate.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.TaskTerminateOptionalParams" />
          description: The optional parameters
      return:
        description: Promise<Models.TaskTerminateResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.TaskTerminateResponse" />&gt;
  - name: >-
      terminate(string, string, TaskTerminateOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.Task.terminate_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function terminate(jobId: string, taskId: string, options:
        TaskTerminateOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job containing the Task.
        - id: taskId
          type: string
          description: The ID of the Task to terminate.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.TaskTerminateOptionalParams" />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: update(string, string, ServiceCallback<void>)
    uid: '@azure/batch.Task.update_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function update(jobId: string, taskId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job containing the Task.
        - id: taskId
          type: string
          description: The ID of the Task to update.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: update(string, string, TaskUpdateOptionalParams)
    uid: '@azure/batch.Task.update'
    package: '@azure/batch'
    summary: Updates the properties of the specified Task.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function update(jobId: string, taskId: string, options?:
        TaskUpdateOptionalParams): Promise<TaskUpdateResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job containing the Task.
        - id: taskId
          type: string
          description: The ID of the Task to update.
        - id: options
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.TaskUpdateOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.TaskUpdateResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.TaskUpdateResponse" />&gt;
  - name: update(string, string, TaskUpdateOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.Task.update_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function update(jobId: string, taskId: string, options:
        TaskUpdateOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job containing the Task.
        - id: taskId
          type: string
          description: The ID of the Task to update.
        - id: options
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.TaskUpdateOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
