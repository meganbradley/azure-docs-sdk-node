### YamlMime:TSType
name: ComputeNodeOperations
uid: '@azure/batch.ComputeNodeOperations'
package: '@azure/batch'
summary: Class representing a ComputeNodeOperations.
fullName: ComputeNodeOperations
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: ComputeNodeOperations(BatchServiceClientContext)
    uid: '@azure/batch.ComputeNodeOperations.constructor'
    package: '@azure/batch'
    summary: Create a ComputeNodeOperations.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new ComputeNodeOperations(client: BatchServiceClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/batch.BatchServiceClientContext" />
          description: Reference to the service client.
methods:
  - name: addUser(string, string, ComputeNodeUser, ComputeNodeAddUserOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.addUser'
    package: '@azure/batch'
    summary: >-
      You can add a user Account to a Compute Node only when it is in the idle
      or running state.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addUser(poolId: string, nodeId: string, user: ComputeNodeUser,
        options?: ComputeNodeAddUserOptionalParams):
        Promise<ComputeNodeAddUserResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the machine on which you want to create a user Account.
        - id: user
          type: <xref uid="@azure/batch.BatchServiceModels.ComputeNodeUser" />
          description: The user Account to be created.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeAddUserOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeAddUserResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeAddUserResponse"
          />&gt;
  - name: >-
      addUser(string, string, ComputeNodeUser, ComputeNodeAddUserOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.addUser_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addUser(poolId: string, nodeId: string, user: ComputeNodeUser,
        options: ComputeNodeAddUserOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the machine on which you want to create a user Account.
        - id: user
          type: <xref uid="@azure/batch.BatchServiceModels.ComputeNodeUser" />
          description: The user Account to be created.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeAddUserOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: addUser(string, string, ComputeNodeUser, ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.addUser_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function addUser(poolId: string, nodeId: string, user: ComputeNodeUser,
        callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the machine on which you want to create a user Account.
        - id: user
          type: <xref uid="@azure/batch.BatchServiceModels.ComputeNodeUser" />
          description: The user Account to be created.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteUser(string, string, string, ComputeNodeDeleteUserOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.deleteUser'
    package: '@azure/batch'
    summary: >-
      You can delete a user Account to a Compute Node only when it is in the
      idle or running state.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteUser(poolId: string, nodeId: string, userName: string,
        options?: ComputeNodeDeleteUserOptionalParams):
        Promise<ComputeNodeDeleteUserResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the machine on which you want to delete a user Account.
        - id: userName
          type: string
          description: The name of the user Account to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeDeleteUserOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeDeleteUserResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeDeleteUserResponse"
          />&gt;
  - name: >-
      deleteUser(string, string, string, ComputeNodeDeleteUserOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.deleteUser_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteUser(poolId: string, nodeId: string, userName: string,
        options: ComputeNodeDeleteUserOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the machine on which you want to delete a user Account.
        - id: userName
          type: string
          description: The name of the user Account to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeDeleteUserOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteUser(string, string, string, ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.deleteUser_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteUser(poolId: string, nodeId: string, userName: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the machine on which you want to delete a user Account.
        - id: userName
          type: string
          description: The name of the user Account to delete.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      disableScheduling(string, string,
      ComputeNodeDisableSchedulingOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.disableScheduling'
    package: '@azure/batch'
    summary: >-
      You can disable Task scheduling on a Compute Node only if its current
      scheduling state is

      enabled.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableScheduling(poolId: string, nodeId: string, options?:
        ComputeNodeDisableSchedulingOptionalParams):
        Promise<ComputeNodeDisableSchedulingResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node on which you want to disable Task
            scheduling.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeDisableSchedulingOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeDisableSchedulingResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeDisableSchedulingResponse"
          />&gt;
  - name: >-
      disableScheduling(string, string,
      ComputeNodeDisableSchedulingOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.disableScheduling_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableScheduling(poolId: string, nodeId: string, options:
        ComputeNodeDisableSchedulingOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node on which you want to disable Task
            scheduling.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeDisableSchedulingOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: disableScheduling(string, string, ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.disableScheduling_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disableScheduling(poolId: string, nodeId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node on which you want to disable Task
            scheduling.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      enableScheduling(string, string,
      ComputeNodeEnableSchedulingOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.enableScheduling'
    package: '@azure/batch'
    summary: >-
      You can enable Task scheduling on a Compute Node only if its current
      scheduling state is

      disabled
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enableScheduling(poolId: string, nodeId: string, options?:
        ComputeNodeEnableSchedulingOptionalParams):
        Promise<ComputeNodeEnableSchedulingResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node on which you want to enable Task
            scheduling.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeEnableSchedulingOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeEnableSchedulingResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeEnableSchedulingResponse"
          />&gt;
  - name: >-
      enableScheduling(string, string,
      ComputeNodeEnableSchedulingOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.enableScheduling_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enableScheduling(poolId: string, nodeId: string, options:
        ComputeNodeEnableSchedulingOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node on which you want to enable Task
            scheduling.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeEnableSchedulingOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: enableScheduling(string, string, ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.enableScheduling_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enableScheduling(poolId: string, nodeId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node on which you want to enable Task
            scheduling.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: get(string, string, ComputeNodeGetOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.get'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(poolId: string, nodeId: string, options?:
        ComputeNodeGetOptionalParams): Promise<ComputeNodeGetResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that you want to get information about.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeGetOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeGetResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeGetResponse" />&gt;
  - name: >-
      get(string, string, ComputeNodeGetOptionalParams,
      ServiceCallback<ComputeNode>)
    uid: '@azure/batch.ComputeNodeOperations.get_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(poolId: string, nodeId: string, options:
        ComputeNodeGetOptionalParams, callback: ServiceCallback<ComputeNode>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that you want to get information about.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeGetOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.ComputeNode" />&gt;
          description: The callback
  - name: get(string, string, ServiceCallback<ComputeNode>)
    uid: '@azure/batch.ComputeNodeOperations.get_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(poolId: string, nodeId: string, callback:
        ServiceCallback<ComputeNode>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that you want to get information about.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.ComputeNode" />&gt;
          description: The callback
  - name: >-
      getRemoteDesktop(string, string,
      ComputeNodeGetRemoteDesktopOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.getRemoteDesktop'
    package: '@azure/batch'
    summary: >-
      Before you can access a Compute Node by using the RDP file, you must
      create a user Account on

      the Compute Node. This API can only be invoked on Pools created with a
      cloud service

      configuration. For Pools created with a virtual machine configuration, see
      the

      GetRemoteLoginSettings API.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRemoteDesktop(poolId: string, nodeId: string, options?:
        ComputeNodeGetRemoteDesktopOptionalParams):
        Promise<ComputeNodeGetRemoteDesktopResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node for which you want to get the Remote
            Desktop Protocol

            file.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeGetRemoteDesktopOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeGetRemoteDesktopResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeGetRemoteDesktopResponse"
          />&gt;
  - name: >-
      getRemoteDesktop(string, string,
      ComputeNodeGetRemoteDesktopOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.getRemoteDesktop_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRemoteDesktop(poolId: string, nodeId: string, options:
        ComputeNodeGetRemoteDesktopOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node for which you want to get the Remote
            Desktop Protocol

            file.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeGetRemoteDesktopOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: getRemoteDesktop(string, string, ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.getRemoteDesktop_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRemoteDesktop(poolId: string, nodeId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node for which you want to get the Remote
            Desktop Protocol

            file.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      getRemoteLoginSettings(string, string,
      ComputeNodeGetRemoteLoginSettingsOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.getRemoteLoginSettings'
    package: '@azure/batch'
    summary: >-
      Before you can remotely login to a Compute Node using the remote login
      settings, you must create

      a user Account on the Compute Node. This API can be invoked only on Pools
      created with the

      virtual machine configuration property. For Pools created with a cloud
      service configuration,

      see the GetRemoteDesktop API.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRemoteLoginSettings(poolId: string, nodeId: string,
        options?: ComputeNodeGetRemoteLoginSettingsOptionalParams):
        Promise<ComputeNodeGetRemoteLoginSettingsResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node for which to obtain the remote login
            settings.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeGetRemoteLoginSettingsOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeGetRemoteLoginSettingsResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeGetRemoteLoginSettingsResponse"
          />&gt;
  - name: >-
      getRemoteLoginSettings(string, string,
      ComputeNodeGetRemoteLoginSettingsOptionalParams,
      ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult>)
    uid: '@azure/batch.ComputeNodeOperations.getRemoteLoginSettings_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRemoteLoginSettings(poolId: string, nodeId: string, options:
        ComputeNodeGetRemoteLoginSettingsOptionalParams, callback:
        ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node for which to obtain the remote login
            settings.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeGetRemoteLoginSettingsOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeGetRemoteLoginSettingsResult"
            />&gt;
          description: The callback
  - name: >-
      getRemoteLoginSettings(string, string,
      ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult>)
    uid: '@azure/batch.ComputeNodeOperations.getRemoteLoginSettings_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRemoteLoginSettings(poolId: string, nodeId: string,
        callback: ServiceCallback<ComputeNodeGetRemoteLoginSettingsResult>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node for which to obtain the remote login
            settings.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeGetRemoteLoginSettingsResult"
            />&gt;
          description: The callback
  - name: list(string, ComputeNodeListOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.list'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(poolId: string, options?: ComputeNodeListOptionalParams):
        Promise<ComputeNodeListResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool from which you want to list Compute Nodes.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeListOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeListResponse" />&gt;
  - name: >-
      list(string, ComputeNodeListOptionalParams,
      ServiceCallback<ComputeNodeListResult>)
    uid: '@azure/batch.ComputeNodeOperations.list_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(poolId: string, options: ComputeNodeListOptionalParams,
        callback: ServiceCallback<ComputeNodeListResult>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool from which you want to list Compute Nodes.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeListOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeListResult" />&gt;
          description: The callback
  - name: list(string, ServiceCallback<ComputeNodeListResult>)
    uid: '@azure/batch.ComputeNodeOperations.list_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(poolId: string, callback:
        ServiceCallback<ComputeNodeListResult>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool from which you want to list Compute Nodes.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeListResult" />&gt;
          description: The callback
  - name: listNext(string, ComputeNodeListNextOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.listNext'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options?:
        ComputeNodeListNextOptionalParams): Promise<ComputeNodeListResponse>
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeListNextOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeListResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeListResponse" />&gt;
  - name: >-
      listNext(string, ComputeNodeListNextOptionalParams,
      ServiceCallback<ComputeNodeListResult>)
    uid: '@azure/batch.ComputeNodeOperations.listNext_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options:
        ComputeNodeListNextOptionalParams, callback:
        ServiceCallback<ComputeNodeListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeListNextOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeListResult" />&gt;
          description: The callback
  - name: listNext(string, ServiceCallback<ComputeNodeListResult>)
    uid: '@azure/batch.ComputeNodeOperations.listNext_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, callback:
        ServiceCallback<ComputeNodeListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeListResult" />&gt;
          description: The callback
  - name: reboot(string, string, ComputeNodeRebootOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.reboot'
    package: '@azure/batch'
    summary: You can restart a Compute Node only if it is in an idle or running state.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reboot(poolId: string, nodeId: string, options?:
        ComputeNodeRebootOptionalParams): Promise<ComputeNodeRebootResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that you want to restart.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeRebootOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeRebootResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeRebootResponse" />&gt;
  - name: >-
      reboot(string, string, ComputeNodeRebootOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.reboot_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reboot(poolId: string, nodeId: string, options:
        ComputeNodeRebootOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that you want to restart.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeRebootOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: reboot(string, string, ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.reboot_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reboot(poolId: string, nodeId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that you want to restart.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: reimage(string, string, ComputeNodeReimageOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.reimage'
    package: '@azure/batch'
    summary: >-
      You can reinstall the operating system on a Compute Node only if it is in
      an idle or running

      state. This API can be invoked only on Pools created with the cloud
      service configuration

      property.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reimage(poolId: string, nodeId: string, options?:
        ComputeNodeReimageOptionalParams): Promise<ComputeNodeReimageResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that you want to restart.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeReimageOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeReimageResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeReimageResponse"
          />&gt;
  - name: >-
      reimage(string, string, ComputeNodeReimageOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.reimage_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reimage(poolId: string, nodeId: string, options:
        ComputeNodeReimageOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that you want to restart.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeReimageOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: reimage(string, string, ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.reimage_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reimage(poolId: string, nodeId: string, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that you want to restart.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      updateUser(string, string, string, NodeUpdateUserParameter,
      ComputeNodeUpdateUserOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.updateUser'
    package: '@azure/batch'
    summary: >-
      This operation replaces of all the updatable properties of the Account.
      For example, if the

      expiryTime element is not specified, the current value is replaced with
      the default value, not

      left unmodified. You can update a user Account on a Compute Node only when
      it is in the idle or

      running state.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateUser(poolId: string, nodeId: string, userName: string,
        nodeUpdateUserParameter: NodeUpdateUserParameter, options?:
        ComputeNodeUpdateUserOptionalParams):
        Promise<ComputeNodeUpdateUserResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the machine on which you want to update a user Account.
        - id: userName
          type: string
          description: The name of the user Account to update.
        - id: nodeUpdateUserParameter
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.NodeUpdateUserParameter"
            />
          description: The parameters for the request.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeUpdateUserOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeUpdateUserResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeUpdateUserResponse"
          />&gt;
  - name: >-
      updateUser(string, string, string, NodeUpdateUserParameter,
      ComputeNodeUpdateUserOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.updateUser_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateUser(poolId: string, nodeId: string, userName: string,
        nodeUpdateUserParameter: NodeUpdateUserParameter, options:
        ComputeNodeUpdateUserOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the machine on which you want to update a user Account.
        - id: userName
          type: string
          description: The name of the user Account to update.
        - id: nodeUpdateUserParameter
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.NodeUpdateUserParameter"
            />
          description: The parameters for the request.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeUpdateUserOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      updateUser(string, string, string, NodeUpdateUserParameter,
      ServiceCallback<void>)
    uid: '@azure/batch.ComputeNodeOperations.updateUser_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateUser(poolId: string, nodeId: string, userName: string,
        nodeUpdateUserParameter: NodeUpdateUserParameter, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the machine on which you want to update a user Account.
        - id: userName
          type: string
          description: The name of the user Account to update.
        - id: nodeUpdateUserParameter
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.NodeUpdateUserParameter"
            />
          description: The parameters for the request.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      uploadBatchServiceLogs(string, string,
      UploadBatchServiceLogsConfiguration,
      ComputeNodeUploadBatchServiceLogsOptionalParams)
    uid: '@azure/batch.ComputeNodeOperations.uploadBatchServiceLogs'
    package: '@azure/batch'
    summary: >-
      This is for gathering Azure Batch service log files in an automated
      fashion from Compute Nodes

      if you are experiencing an error and wish to escalate to Azure support.
      The Azure Batch service

      log files should be shared with Azure support to aid in debugging issues
      with the Batch service.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadBatchServiceLogs(poolId: string, nodeId: string,
        uploadBatchServiceLogsConfiguration:
        UploadBatchServiceLogsConfiguration, options?:
        ComputeNodeUploadBatchServiceLogsOptionalParams):
        Promise<ComputeNodeUploadBatchServiceLogsResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node from which you want to upload the Azure
            Batch service

            log files.
        - id: uploadBatchServiceLogsConfiguration
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.UploadBatchServiceLogsConfiguration"
            />
          description: |-
            The Azure Batch service log files upload
            configuration.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeUploadBatchServiceLogsOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.ComputeNodeUploadBatchServiceLogsResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.ComputeNodeUploadBatchServiceLogsResponse"
          />&gt;
  - name: >-
      uploadBatchServiceLogs(string, string,
      UploadBatchServiceLogsConfiguration,
      ComputeNodeUploadBatchServiceLogsOptionalParams,
      ServiceCallback<UploadBatchServiceLogsResult>)
    uid: '@azure/batch.ComputeNodeOperations.uploadBatchServiceLogs_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadBatchServiceLogs(poolId: string, nodeId: string,
        uploadBatchServiceLogsConfiguration:
        UploadBatchServiceLogsConfiguration, options:
        ComputeNodeUploadBatchServiceLogsOptionalParams, callback:
        ServiceCallback<UploadBatchServiceLogsResult>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node from which you want to upload the Azure
            Batch service

            log files.
        - id: uploadBatchServiceLogsConfiguration
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.UploadBatchServiceLogsConfiguration"
            />
          description: |-
            The Azure Batch service log files upload
            configuration.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.ComputeNodeUploadBatchServiceLogsOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.UploadBatchServiceLogsResult"
            />&gt;
          description: The callback
  - name: >-
      uploadBatchServiceLogs(string, string,
      UploadBatchServiceLogsConfiguration,
      ServiceCallback<UploadBatchServiceLogsResult>)
    uid: '@azure/batch.ComputeNodeOperations.uploadBatchServiceLogs_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function uploadBatchServiceLogs(poolId: string, nodeId: string,
        uploadBatchServiceLogsConfiguration:
        UploadBatchServiceLogsConfiguration, callback:
        ServiceCallback<UploadBatchServiceLogsResult>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: >-
            The ID of the Compute Node from which you want to upload the Azure
            Batch service

            log files.
        - id: uploadBatchServiceLogsConfiguration
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.UploadBatchServiceLogsConfiguration"
            />
          description: |-
            The Azure Batch service log files upload
            configuration.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.UploadBatchServiceLogsResult"
            />&gt;
          description: The callback
