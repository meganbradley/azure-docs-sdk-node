### YamlMime:TSType
name: File
uid: '@azure/batch.File'
package: '@azure/batch'
summary: Class representing a File.
fullName: File
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: File(BatchServiceClientContext)
    uid: '@azure/batch.File.constructor'
    package: '@azure/batch'
    summary: Create a File.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new File(client: BatchServiceClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/batch.BatchServiceClientContext" />
          description: Reference to the service client.
methods:
  - name: >-
      deleteFromComputeNode(string, string, string,
      FileDeleteFromComputeNodeOptionalParams)
    uid: '@azure/batch.File.deleteFromComputeNode'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteFromComputeNode(poolId: string, nodeId: string, filePath:
        string, options?: FileDeleteFromComputeNodeOptionalParams):
        Promise<FileDeleteFromComputeNodeResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node from which you want to delete the file.
        - id: filePath
          type: string
          description: The path to the file or directory that you want to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileDeleteFromComputeNodeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.FileDeleteFromComputeNodeResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.FileDeleteFromComputeNodeResponse"
          />&gt;
  - name: >-
      deleteFromComputeNode(string, string, string,
      FileDeleteFromComputeNodeOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.File.deleteFromComputeNode_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteFromComputeNode(poolId: string, nodeId: string, filePath:
        string, options: FileDeleteFromComputeNodeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node from which you want to delete the file.
        - id: filePath
          type: string
          description: The path to the file or directory that you want to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileDeleteFromComputeNodeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteFromComputeNode(string, string, string, ServiceCallback<void>)
    uid: '@azure/batch.File.deleteFromComputeNode_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteFromComputeNode(poolId: string, nodeId: string, filePath:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node from which you want to delete the file.
        - id: filePath
          type: string
          description: The path to the file or directory that you want to delete.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteFromTask(string, string, string, FileDeleteFromTaskOptionalParams)
    uid: '@azure/batch.File.deleteFromTask'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteFromTask(jobId: string, taskId: string, filePath: string,
        options?: FileDeleteFromTaskOptionalParams):
        Promise<FileDeleteFromTaskResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task whose file you want to delete.
        - id: filePath
          type: string
          description: The path to the Task file or directory that you want to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileDeleteFromTaskOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.FileDeleteFromTaskResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.FileDeleteFromTaskResponse"
          />&gt;
  - name: >-
      deleteFromTask(string, string, string, FileDeleteFromTaskOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.File.deleteFromTask_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteFromTask(jobId: string, taskId: string, filePath: string,
        options: FileDeleteFromTaskOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task whose file you want to delete.
        - id: filePath
          type: string
          description: The path to the Task file or directory that you want to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileDeleteFromTaskOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteFromTask(string, string, string, ServiceCallback<void>)
    uid: '@azure/batch.File.deleteFromTask_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteFromTask(jobId: string, taskId: string, filePath: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task whose file you want to delete.
        - id: filePath
          type: string
          description: The path to the Task file or directory that you want to delete.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      getFromComputeNode(string, string, string,
      FileGetFromComputeNodeOptionalParams)
    uid: '@azure/batch.File.getFromComputeNode'
    package: '@azure/batch'
    summary: Returns the content of the specified Compute Node file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFromComputeNode(poolId: string, nodeId: string, filePath:
        string, options?: FileGetFromComputeNodeOptionalParams):
        Promise<FileGetFromComputeNodeResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that contains the file.
        - id: filePath
          type: string
          description: >-
            The path to the Compute Node file that you want to get the content
            of.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileGetFromComputeNodeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.FileGetFromComputeNodeResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.FileGetFromComputeNodeResponse"
          />&gt;
  - name: >-
      getFromComputeNode(string, string, string,
      FileGetFromComputeNodeOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.File.getFromComputeNode_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFromComputeNode(poolId: string, nodeId: string, filePath:
        string, options: FileGetFromComputeNodeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that contains the file.
        - id: filePath
          type: string
          description: >-
            The path to the Compute Node file that you want to get the content
            of.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileGetFromComputeNodeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: getFromComputeNode(string, string, string, ServiceCallback<void>)
    uid: '@azure/batch.File.getFromComputeNode_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFromComputeNode(poolId: string, nodeId: string, filePath:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that contains the file.
        - id: filePath
          type: string
          description: >-
            The path to the Compute Node file that you want to get the content
            of.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: getFromTask(string, string, string, FileGetFromTaskOptionalParams)
    uid: '@azure/batch.File.getFromTask'
    package: '@azure/batch'
    summary: Returns the content of the specified Task file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFromTask(jobId: string, taskId: string, filePath: string,
        options?: FileGetFromTaskOptionalParams):
        Promise<FileGetFromTaskResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task whose file you want to retrieve.
        - id: filePath
          type: string
          description: The path to the Task file that you want to get the content of.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileGetFromTaskOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.FileGetFromTaskResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.FileGetFromTaskResponse" />&gt;
  - name: >-
      getFromTask(string, string, string, FileGetFromTaskOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.File.getFromTask_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFromTask(jobId: string, taskId: string, filePath: string,
        options: FileGetFromTaskOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task whose file you want to retrieve.
        - id: filePath
          type: string
          description: The path to the Task file that you want to get the content of.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileGetFromTaskOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: getFromTask(string, string, string, ServiceCallback<void>)
    uid: '@azure/batch.File.getFromTask_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getFromTask(jobId: string, taskId: string, filePath: string,
        callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task whose file you want to retrieve.
        - id: filePath
          type: string
          description: The path to the Task file that you want to get the content of.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      getPropertiesFromComputeNode(string, string, string,
      FileGetPropertiesFromComputeNodeOptionalParams)
    uid: '@azure/batch.File.getPropertiesFromComputeNode'
    package: '@azure/batch'
    summary: Gets the properties of the specified Compute Node file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPropertiesFromComputeNode(poolId: string, nodeId: string,
        filePath: string, options?:
        FileGetPropertiesFromComputeNodeOptionalParams):
        Promise<FileGetPropertiesFromComputeNodeResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that contains the file.
        - id: filePath
          type: string
          description: >-
            The path to the Compute Node file that you want to get the
            properties of.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileGetPropertiesFromComputeNodeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.FileGetPropertiesFromComputeNodeResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.FileGetPropertiesFromComputeNodeResponse"
          />&gt;
  - name: >-
      getPropertiesFromComputeNode(string, string, string,
      FileGetPropertiesFromComputeNodeOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.File.getPropertiesFromComputeNode_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPropertiesFromComputeNode(poolId: string, nodeId: string,
        filePath: string, options:
        FileGetPropertiesFromComputeNodeOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that contains the file.
        - id: filePath
          type: string
          description: >-
            The path to the Compute Node file that you want to get the
            properties of.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileGetPropertiesFromComputeNodeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      getPropertiesFromComputeNode(string, string, string,
      ServiceCallback<void>)
    uid: '@azure/batch.File.getPropertiesFromComputeNode_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPropertiesFromComputeNode(poolId: string, nodeId: string,
        filePath: string, callback: ServiceCallback<void>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node that contains the file.
        - id: filePath
          type: string
          description: >-
            The path to the Compute Node file that you want to get the
            properties of.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: >-
      getPropertiesFromTask(string, string, string,
      FileGetPropertiesFromTaskOptionalParams)
    uid: '@azure/batch.File.getPropertiesFromTask'
    package: '@azure/batch'
    summary: Gets the properties of the specified Task file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPropertiesFromTask(jobId: string, taskId: string, filePath:
        string, options?: FileGetPropertiesFromTaskOptionalParams):
        Promise<FileGetPropertiesFromTaskResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task whose file you want to get the properties of.
        - id: filePath
          type: string
          description: The path to the Task file that you want to get the properties of.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileGetPropertiesFromTaskOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.FileGetPropertiesFromTaskResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.FileGetPropertiesFromTaskResponse"
          />&gt;
  - name: >-
      getPropertiesFromTask(string, string, string,
      FileGetPropertiesFromTaskOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.File.getPropertiesFromTask_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPropertiesFromTask(jobId: string, taskId: string, filePath:
        string, options: FileGetPropertiesFromTaskOptionalParams, callback:
        ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task whose file you want to get the properties of.
        - id: filePath
          type: string
          description: The path to the Task file that you want to get the properties of.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileGetPropertiesFromTaskOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: getPropertiesFromTask(string, string, string, ServiceCallback<void>)
    uid: '@azure/batch.File.getPropertiesFromTask_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPropertiesFromTask(jobId: string, taskId: string, filePath:
        string, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task whose file you want to get the properties of.
        - id: filePath
          type: string
          description: The path to the Task file that you want to get the properties of.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: listFromComputeNode(string, string, FileListFromComputeNodeOptionalParams)
    uid: '@azure/batch.File.listFromComputeNode'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromComputeNode(poolId: string, nodeId: string, options?:
        FileListFromComputeNodeOptionalParams):
        Promise<FileListFromComputeNodeResponse>
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node whose files you want to list.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileListFromComputeNodeOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.FileListFromComputeNodeResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.FileListFromComputeNodeResponse"
          />&gt;
  - name: >-
      listFromComputeNode(string, string, FileListFromComputeNodeOptionalParams,
      ServiceCallback<NodeFileListResult>)
    uid: '@azure/batch.File.listFromComputeNode_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromComputeNode(poolId: string, nodeId: string, options:
        FileListFromComputeNodeOptionalParams, callback:
        ServiceCallback<NodeFileListResult>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node whose files you want to list.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileListFromComputeNodeOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.NodeFileListResult" />&gt;
          description: The callback
  - name: listFromComputeNode(string, string, ServiceCallback<NodeFileListResult>)
    uid: '@azure/batch.File.listFromComputeNode_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromComputeNode(poolId: string, nodeId: string, callback:
        ServiceCallback<NodeFileListResult>)
      parameters:
        - id: poolId
          type: string
          description: The ID of the Pool that contains the Compute Node.
        - id: nodeId
          type: string
          description: The ID of the Compute Node whose files you want to list.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.NodeFileListResult" />&gt;
          description: The callback
  - name: listFromComputeNodeNext(string, FileListFromComputeNodeNextOptionalParams)
    uid: '@azure/batch.File.listFromComputeNodeNext'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromComputeNodeNext(nextPageLink: string, options?:
        FileListFromComputeNodeNextOptionalParams):
        Promise<FileListFromComputeNodeResponse>
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileListFromComputeNodeNextOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.FileListFromComputeNodeResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.FileListFromComputeNodeResponse"
          />&gt;
  - name: >-
      listFromComputeNodeNext(string, FileListFromComputeNodeNextOptionalParams,
      ServiceCallback<NodeFileListResult>)
    uid: '@azure/batch.File.listFromComputeNodeNext_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromComputeNodeNext(nextPageLink: string, options:
        FileListFromComputeNodeNextOptionalParams, callback:
        ServiceCallback<NodeFileListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileListFromComputeNodeNextOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.NodeFileListResult" />&gt;
          description: The callback
  - name: listFromComputeNodeNext(string, ServiceCallback<NodeFileListResult>)
    uid: '@azure/batch.File.listFromComputeNodeNext_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromComputeNodeNext(nextPageLink: string, callback:
        ServiceCallback<NodeFileListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.NodeFileListResult" />&gt;
          description: The callback
  - name: listFromTask(string, string, FileListFromTaskOptionalParams)
    uid: '@azure/batch.File.listFromTask'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromTask(jobId: string, taskId: string, options?:
        FileListFromTaskOptionalParams): Promise<FileListFromTaskResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task whose files you want to list.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileListFromTaskOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.FileListFromTaskResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.FileListFromTaskResponse" />&gt;
  - name: >-
      listFromTask(string, string, FileListFromTaskOptionalParams,
      ServiceCallback<NodeFileListResult>)
    uid: '@azure/batch.File.listFromTask_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromTask(jobId: string, taskId: string, options:
        FileListFromTaskOptionalParams, callback:
        ServiceCallback<NodeFileListResult>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task whose files you want to list.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileListFromTaskOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.NodeFileListResult" />&gt;
          description: The callback
  - name: listFromTask(string, string, ServiceCallback<NodeFileListResult>)
    uid: '@azure/batch.File.listFromTask_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromTask(jobId: string, taskId: string, callback:
        ServiceCallback<NodeFileListResult>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job that contains the Task.
        - id: taskId
          type: string
          description: The ID of the Task whose files you want to list.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.NodeFileListResult" />&gt;
          description: The callback
  - name: listFromTaskNext(string, FileListFromTaskNextOptionalParams)
    uid: '@azure/batch.File.listFromTaskNext'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromTaskNext(nextPageLink: string, options?:
        FileListFromTaskNextOptionalParams): Promise<FileListFromTaskResponse>
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileListFromTaskNextOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.FileListFromTaskResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.FileListFromTaskResponse" />&gt;
  - name: >-
      listFromTaskNext(string, FileListFromTaskNextOptionalParams,
      ServiceCallback<NodeFileListResult>)
    uid: '@azure/batch.File.listFromTaskNext_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromTaskNext(nextPageLink: string, options:
        FileListFromTaskNextOptionalParams, callback:
        ServiceCallback<NodeFileListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.FileListFromTaskNextOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.NodeFileListResult" />&gt;
          description: The callback
  - name: listFromTaskNext(string, ServiceCallback<NodeFileListResult>)
    uid: '@azure/batch.File.listFromTaskNext_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromTaskNext(nextPageLink: string, callback:
        ServiceCallback<NodeFileListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.NodeFileListResult" />&gt;
          description: The callback
