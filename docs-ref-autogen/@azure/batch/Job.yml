### YamlMime:TSType
name: Job
uid: '@azure/batch.Job'
package: '@azure/batch'
summary: Class representing a Job.
fullName: Job
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: Job(BatchServiceClientContext)
    uid: '@azure/batch.Job.constructor'
    package: '@azure/batch'
    summary: Create a Job.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'new Job(client: BatchServiceClientContext)'
      parameters:
        - id: client
          type: <xref uid="@azure/batch.BatchServiceClientContext" />
          description: Reference to the service client.
methods:
  - name: add(JobAddParameter, JobAddOptionalParams)
    uid: '@azure/batch.Job.add'
    package: '@azure/batch'
    summary: >-
      The Batch service supports two ways to control the work done as part of a
      Job. In the first

      approach, the user specifies a Job Manager Task. The Batch service
      launches this Task when it is

      ready to start the Job. The Job Manager Task controls all other Tasks that
      run under this Job,

      by using the Task APIs. In the second approach, the user directly controls
      the execution of

      Tasks under an active Job, by using the Task APIs. Also note: when naming
      Jobs, avoid including

      sensitive information such as user names or secret project names. This
      information may appear in

      telemetry logs accessible to Microsoft Support engineers.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function add(job: JobAddParameter, options?: JobAddOptionalParams):
        Promise<JobAddResponse>
      parameters:
        - id: job
          type: <xref uid="@azure/batch.BatchServiceModels.JobAddParameter" />
          description: The Job to be added.
        - id: options
          type: <xref uid="@azure/batch.BatchServiceModels.JobAddOptionalParams" />
          description: The optional parameters
      return:
        description: Promise<Models.JobAddResponse>
        type: >-
          Promise&lt;<xref uid="@azure/batch.BatchServiceModels.JobAddResponse"
          />&gt;
  - name: add(JobAddParameter, JobAddOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.Job.add_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function add(job: JobAddParameter, options: JobAddOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: job
          type: <xref uid="@azure/batch.BatchServiceModels.JobAddParameter" />
          description: The Job to be added.
        - id: options
          type: <xref uid="@azure/batch.BatchServiceModels.JobAddOptionalParams" />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: add(JobAddParameter, ServiceCallback<void>)
    uid: '@azure/batch.Job.add_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function add(job: JobAddParameter, callback: ServiceCallback<void>)'
      parameters:
        - id: job
          type: <xref uid="@azure/batch.BatchServiceModels.JobAddParameter" />
          description: The Job to be added.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteMethod(string, JobDeleteMethodOptionalParams)
    uid: '@azure/batch.Job.deleteMethod'
    package: '@azure/batch'
    summary: >-
      Deleting a Job also deletes all Tasks that are part of that Job, and all
      Job statistics. This

      also overrides the retention period for Task data; that is, if the Job
      contains Tasks which are

      still retained on Compute Nodes, the Batch services deletes those Tasks'
      working directories and

      all their contents.  When a Delete Job request is received, the Batch
      service sets the Job to

      the deleting state. All update operations on a Job that is in deleting
      state will fail with

      status code 409 (Conflict), with additional information indicating that
      the Job is being

      deleted.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(jobId: string, options?:
        JobDeleteMethodOptionalParams): Promise<JobDeleteResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobDeleteMethodOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.JobDeleteResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.JobDeleteResponse" />&gt;
  - name: deleteMethod(string, JobDeleteMethodOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.Job.deleteMethod_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteMethod(jobId: string, options:
        JobDeleteMethodOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to delete.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobDeleteMethodOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: deleteMethod(string, ServiceCallback<void>)
    uid: '@azure/batch.Job.deleteMethod_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function deleteMethod(jobId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to delete.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: disable(string, DisableJobOption, JobDisableOptionalParams)
    uid: '@azure/batch.Job.disable'
    package: '@azure/batch'
    summary: >-
      The Batch Service immediately moves the Job to the disabling state. Batch
      then uses the

      disableTasks parameter to determine what to do with the currently running
      Tasks of the Job. The

      Job remains in the disabling state until the disable operation is
      completed and all Tasks have

      been dealt with according to the disableTasks option; the Job then moves
      to the disabled state.

      No new Tasks are started under the Job until it moves back to active
      state. If you try to

      disable a Job that is in any state other than active, disabling, or
      disabled, the request fails

      with status code 409.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disable(jobId: string, disableTasks: DisableJobOption,
        options?: JobDisableOptionalParams): Promise<JobDisableResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to disable.
        - id: disableTasks
          type: <xref uid="@azure/batch.BatchServiceModels.DisableJobOption" />
          description: >-
            What to do with active Tasks associated with the Job. Possible
            values

            include: 'requeue', 'terminate', 'wait'
        - id: options
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.JobDisableOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.JobDisableResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.JobDisableResponse" />&gt;
  - name: >-
      disable(string, DisableJobOption, JobDisableOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.Job.disable_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disable(jobId: string, disableTasks: DisableJobOption, options:
        JobDisableOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to disable.
        - id: disableTasks
          type: <xref uid="@azure/batch.BatchServiceModels.DisableJobOption" />
          description: >-
            What to do with active Tasks associated with the Job. Possible
            values

            include: 'requeue', 'terminate', 'wait'
        - id: options
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.JobDisableOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: disable(string, DisableJobOption, ServiceCallback<void>)
    uid: '@azure/batch.Job.disable_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function disable(jobId: string, disableTasks: DisableJobOption,
        callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to disable.
        - id: disableTasks
          type: <xref uid="@azure/batch.BatchServiceModels.DisableJobOption" />
          description: >-
            What to do with active Tasks associated with the Job. Possible
            values

            include: 'requeue', 'terminate', 'wait'
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: enable(string, JobEnableOptionalParams)
    uid: '@azure/batch.Job.enable'
    package: '@azure/batch'
    summary: >-
      When you call this API, the Batch service sets a disabled Job to the
      enabling state. After the

      this operation is completed, the Job moves to the active state, and
      scheduling of new Tasks

      under the Job resumes. The Batch service does not allow a Task to remain
      in the active state for

      more than 180 days. Therefore, if you enable a Job containing active Tasks
      which were added more

      than 180 days ago, those Tasks will not run.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enable(jobId: string, options?: JobEnableOptionalParams):
        Promise<JobEnableResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to enable.
        - id: options
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.JobEnableOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.JobEnableResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.JobEnableResponse" />&gt;
  - name: enable(string, JobEnableOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.Job.enable_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enable(jobId: string, options: JobEnableOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to enable.
        - id: options
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.JobEnableOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: enable(string, ServiceCallback<void>)
    uid: '@azure/batch.Job.enable_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function enable(jobId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to enable.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: get(string, JobGetOptionalParams)
    uid: '@azure/batch.Job.get'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(jobId: string, options?: JobGetOptionalParams):
        Promise<JobGetResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: options
          type: <xref uid="@azure/batch.BatchServiceModels.JobGetOptionalParams" />
          description: The optional parameters
      return:
        description: Promise<Models.JobGetResponse>
        type: >-
          Promise&lt;<xref uid="@azure/batch.BatchServiceModels.JobGetResponse"
          />&gt;
  - name: get(string, JobGetOptionalParams, ServiceCallback<CloudJob>)
    uid: '@azure/batch.Job.get_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(jobId: string, options: JobGetOptionalParams, callback:
        ServiceCallback<CloudJob>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: options
          type: <xref uid="@azure/batch.BatchServiceModels.JobGetOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJob" />&gt;
          description: The callback
  - name: get(string, ServiceCallback<CloudJob>)
    uid: '@azure/batch.Job.get_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function get(jobId: string, callback: ServiceCallback<CloudJob>)'
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJob" />&gt;
          description: The callback
  - name: getAllLifetimeStatistics(JobGetAllLifetimeStatisticsOptionalParams)
    uid: '@azure/batch.Job.getAllLifetimeStatistics'
    package: '@azure/batch'
    summary: >-
      Statistics are aggregated across all Jobs that have ever existed in the
      Account, from Account

      creation to the last update time of the statistics. The statistics may not
      be immediately

      available. The Batch service performs periodic roll-up of statistics. The
      typical delay is about

      30 minutes.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAllLifetimeStatistics(options?:
        JobGetAllLifetimeStatisticsOptionalParams):
        Promise<JobGetAllLifetimeStatisticsResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobGetAllLifetimeStatisticsOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.JobGetAllLifetimeStatisticsResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.JobGetAllLifetimeStatisticsResponse"
          />&gt;
  - name: >-
      getAllLifetimeStatistics(JobGetAllLifetimeStatisticsOptionalParams,
      ServiceCallback<JobStatistics>)
    uid: '@azure/batch.Job.getAllLifetimeStatistics_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAllLifetimeStatistics(options:
        JobGetAllLifetimeStatisticsOptionalParams, callback:
        ServiceCallback<JobStatistics>)
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobGetAllLifetimeStatisticsOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.JobStatistics" />&gt;
          description: The callback
  - name: getAllLifetimeStatistics(ServiceCallback<JobStatistics>)
    uid: '@azure/batch.Job.getAllLifetimeStatistics_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAllLifetimeStatistics(callback:
        ServiceCallback<JobStatistics>)
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.JobStatistics" />&gt;
          description: The callback
  - name: getTaskCounts(string, JobGetTaskCountsOptionalParams)
    uid: '@azure/batch.Job.getTaskCounts'
    package: '@azure/batch'
    summary: >-
      Task counts provide a count of the Tasks by active, running or completed
      Task state, and a count

      of Tasks which succeeded or failed. Tasks in the preparing state are
      counted as running. Note

      that the numbers returned may not always be up to date. If you need exact
      task counts, use a

      list query.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getTaskCounts(jobId: string, options?:
        JobGetTaskCountsOptionalParams): Promise<JobGetTaskCountsResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobGetTaskCountsOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.JobGetTaskCountsResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.JobGetTaskCountsResponse" />&gt;
  - name: >-
      getTaskCounts(string, JobGetTaskCountsOptionalParams,
      ServiceCallback<TaskCountsResult>)
    uid: '@azure/batch.Job.getTaskCounts_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getTaskCounts(jobId: string, options:
        JobGetTaskCountsOptionalParams, callback:
        ServiceCallback<TaskCountsResult>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobGetTaskCountsOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.TaskCountsResult" />&gt;
          description: The callback
  - name: getTaskCounts(string, ServiceCallback<TaskCountsResult>)
    uid: '@azure/batch.Job.getTaskCounts_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getTaskCounts(jobId: string, callback:
        ServiceCallback<TaskCountsResult>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.TaskCountsResult" />&gt;
          description: The callback
  - name: list(JobListOptionalParams)
    uid: '@azure/batch.Job.list'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function list(options?: JobListOptionalParams): Promise<JobListResponse>'
      parameters:
        - id: options
          type: <xref uid="@azure/batch.BatchServiceModels.JobListOptionalParams" />
          description: The optional parameters
      return:
        description: Promise<Models.JobListResponse>
        type: >-
          Promise&lt;<xref uid="@azure/batch.BatchServiceModels.JobListResponse"
          />&gt;
  - name: list(JobListOptionalParams, ServiceCallback<CloudJobListResult>)
    uid: '@azure/batch.Job.list_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(options: JobListOptionalParams, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: options
          type: <xref uid="@azure/batch.BatchServiceModels.JobListOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJobListResult" />&gt;
          description: The callback
  - name: list(ServiceCallback<CloudJobListResult>)
    uid: '@azure/batch.Job.list_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function list(callback: ServiceCallback<CloudJobListResult>)'
      parameters:
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJobListResult" />&gt;
          description: The callback
  - name: listFromJobSchedule(string, JobListFromJobScheduleOptionalParams)
    uid: '@azure/batch.Job.listFromJobSchedule'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromJobSchedule(jobScheduleId: string, options?:
        JobListFromJobScheduleOptionalParams):
        Promise<JobListFromJobScheduleResponse>
      parameters:
        - id: jobScheduleId
          type: string
          description: >-
            The ID of the Job Schedule from which you want to get a list of
            Jobs.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobListFromJobScheduleOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.JobListFromJobScheduleResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.JobListFromJobScheduleResponse"
          />&gt;
  - name: >-
      listFromJobSchedule(string, JobListFromJobScheduleOptionalParams,
      ServiceCallback<CloudJobListResult>)
    uid: '@azure/batch.Job.listFromJobSchedule_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromJobSchedule(jobScheduleId: string, options:
        JobListFromJobScheduleOptionalParams, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: jobScheduleId
          type: string
          description: >-
            The ID of the Job Schedule from which you want to get a list of
            Jobs.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobListFromJobScheduleOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJobListResult" />&gt;
          description: The callback
  - name: listFromJobSchedule(string, ServiceCallback<CloudJobListResult>)
    uid: '@azure/batch.Job.listFromJobSchedule_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromJobSchedule(jobScheduleId: string, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: jobScheduleId
          type: string
          description: >-
            The ID of the Job Schedule from which you want to get a list of
            Jobs.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJobListResult" />&gt;
          description: The callback
  - name: listFromJobScheduleNext(string, JobListFromJobScheduleNextOptionalParams)
    uid: '@azure/batch.Job.listFromJobScheduleNext'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromJobScheduleNext(nextPageLink: string, options?:
        JobListFromJobScheduleNextOptionalParams):
        Promise<JobListFromJobScheduleResponse>
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobListFromJobScheduleNextOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.JobListFromJobScheduleResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.JobListFromJobScheduleResponse"
          />&gt;
  - name: >-
      listFromJobScheduleNext(string, JobListFromJobScheduleNextOptionalParams,
      ServiceCallback<CloudJobListResult>)
    uid: '@azure/batch.Job.listFromJobScheduleNext_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromJobScheduleNext(nextPageLink: string, options:
        JobListFromJobScheduleNextOptionalParams, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobListFromJobScheduleNextOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJobListResult" />&gt;
          description: The callback
  - name: listFromJobScheduleNext(string, ServiceCallback<CloudJobListResult>)
    uid: '@azure/batch.Job.listFromJobScheduleNext_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listFromJobScheduleNext(nextPageLink: string, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJobListResult" />&gt;
          description: The callback
  - name: listNext(string, JobListNextOptionalParams)
    uid: '@azure/batch.Job.listNext'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options?:
        JobListNextOptionalParams): Promise<JobListResponse>
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobListNextOptionalParams" />
          description: The optional parameters
      return:
        description: Promise<Models.JobListResponse>
        type: >-
          Promise&lt;<xref uid="@azure/batch.BatchServiceModels.JobListResponse"
          />&gt;
  - name: >-
      listNext(string, JobListNextOptionalParams,
      ServiceCallback<CloudJobListResult>)
    uid: '@azure/batch.Job.listNext_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, options:
        JobListNextOptionalParams, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobListNextOptionalParams" />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJobListResult" />&gt;
          description: The callback
  - name: listNext(string, ServiceCallback<CloudJobListResult>)
    uid: '@azure/batch.Job.listNext_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listNext(nextPageLink: string, callback:
        ServiceCallback<CloudJobListResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJobListResult" />&gt;
          description: The callback
  - name: >-
      listPreparationAndReleaseTaskStatus(string,
      JobListPreparationAndReleaseTaskStatusOptionalParams)
    uid: '@azure/batch.Job.listPreparationAndReleaseTaskStatus'
    package: '@azure/batch'
    summary: >-
      This API returns the Job Preparation and Job Release Task status on all
      Compute Nodes that have

      run the Job Preparation or Job Release Task. This includes Compute Nodes
      which have since been

      removed from the Pool. If this API is invoked on a Job which has no Job
      Preparation or Job

      Release Task, the Batch service returns HTTP status code 409 (Conflict)
      with an error code of

      JobPreparationTaskNotSpecified.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listPreparationAndReleaseTaskStatus(jobId: string, options?:
        JobListPreparationAndReleaseTaskStatusOptionalParams):
        Promise<JobListPreparationAndReleaseTaskStatusResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobListPreparationAndReleaseTaskStatusOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.JobListPreparationAndReleaseTaskStatusResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.JobListPreparationAndReleaseTaskStatusResponse"
          />&gt;
  - name: >-
      listPreparationAndReleaseTaskStatus(string,
      JobListPreparationAndReleaseTaskStatusOptionalParams,
      ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
    uid: '@azure/batch.Job.listPreparationAndReleaseTaskStatus_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listPreparationAndReleaseTaskStatus(jobId: string, options:
        JobListPreparationAndReleaseTaskStatusOptionalParams, callback:
        ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobListPreparationAndReleaseTaskStatusOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJobListPreparationAndReleaseTaskStatusResult"
            />&gt;
          description: The callback
  - name: >-
      listPreparationAndReleaseTaskStatus(string,
      ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
    uid: '@azure/batch.Job.listPreparationAndReleaseTaskStatus_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listPreparationAndReleaseTaskStatus(jobId: string, callback:
        ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJobListPreparationAndReleaseTaskStatusResult"
            />&gt;
          description: The callback
  - name: >-
      listPreparationAndReleaseTaskStatusNext(string,
      JobListPreparationAndReleaseTaskStatusNextOptionalParams)
    uid: '@azure/batch.Job.listPreparationAndReleaseTaskStatusNext'
    package: '@azure/batch'
    summary: >-
      This API returns the Job Preparation and Job Release Task status on all
      Compute Nodes that have

      run the Job Preparation or Job Release Task. This includes Compute Nodes
      which have since been

      removed from the Pool. If this API is invoked on a Job which has no Job
      Preparation or Job

      Release Task, the Batch service returns HTTP status code 409 (Conflict)
      with an error code of

      JobPreparationTaskNotSpecified.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listPreparationAndReleaseTaskStatusNext(nextPageLink: string,
        options?: JobListPreparationAndReleaseTaskStatusNextOptionalParams):
        Promise<JobListPreparationAndReleaseTaskStatusResponse>
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobListPreparationAndReleaseTaskStatusNextOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.JobListPreparationAndReleaseTaskStatusResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.JobListPreparationAndReleaseTaskStatusResponse"
          />&gt;
  - name: >-
      listPreparationAndReleaseTaskStatusNext(string,
      JobListPreparationAndReleaseTaskStatusNextOptionalParams,
      ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
    uid: '@azure/batch.Job.listPreparationAndReleaseTaskStatusNext_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listPreparationAndReleaseTaskStatusNext(nextPageLink: string,
        options: JobListPreparationAndReleaseTaskStatusNextOptionalParams,
        callback:
        ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobListPreparationAndReleaseTaskStatusNextOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJobListPreparationAndReleaseTaskStatusResult"
            />&gt;
          description: The callback
  - name: >-
      listPreparationAndReleaseTaskStatusNext(string,
      ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
    uid: '@azure/batch.Job.listPreparationAndReleaseTaskStatusNext_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listPreparationAndReleaseTaskStatusNext(nextPageLink: string,
        callback:
        ServiceCallback<CloudJobListPreparationAndReleaseTaskStatusResult>)
      parameters:
        - id: nextPageLink
          type: string
          description: The NextLink from the previous successful call to List operation.
        - id: callback
          type: >-
            <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;<xref
            uid="@azure/batch.BatchServiceModels.CloudJobListPreparationAndReleaseTaskStatusResult"
            />&gt;
          description: The callback
  - name: patch(string, JobPatchParameter, JobPatchOptionalParams)
    uid: '@azure/batch.Job.patch'
    package: '@azure/batch'
    summary: >-
      This replaces only the Job properties specified in the request. For
      example, if the Job has

      constraints, and a request does not specify the constraints element, then
      the Job keeps the

      existing constraints.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function patch(jobId: string, jobPatchParameter: JobPatchParameter,
        options?: JobPatchOptionalParams): Promise<JobPatchResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job whose properties you want to update.
        - id: jobPatchParameter
          type: <xref uid="@azure/batch.BatchServiceModels.JobPatchParameter" />
          description: The parameters for the request.
        - id: options
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.JobPatchOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.JobPatchResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.JobPatchResponse" />&gt;
  - name: >-
      patch(string, JobPatchParameter, JobPatchOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.Job.patch_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function patch(jobId: string, jobPatchParameter: JobPatchParameter,
        options: JobPatchOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job whose properties you want to update.
        - id: jobPatchParameter
          type: <xref uid="@azure/batch.BatchServiceModels.JobPatchParameter" />
          description: The parameters for the request.
        - id: options
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.JobPatchOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: patch(string, JobPatchParameter, ServiceCallback<void>)
    uid: '@azure/batch.Job.patch_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function patch(jobId: string, jobPatchParameter: JobPatchParameter,
        callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job whose properties you want to update.
        - id: jobPatchParameter
          type: <xref uid="@azure/batch.BatchServiceModels.JobPatchParameter" />
          description: The parameters for the request.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: terminate(string, JobTerminateOptionalParams)
    uid: '@azure/batch.Job.terminate'
    package: '@azure/batch'
    summary: >-
      When a Terminate Job request is received, the Batch service sets the Job
      to the terminating

      state. The Batch service then terminates any running Tasks associated with
      the Job and runs any

      required Job release Tasks. Then the Job moves into the completed state.
      If there are any Tasks

      in the Job in the active state, they will remain in the active state. Once
      a Job is terminated,

      new Tasks cannot be added and any remaining active Tasks will not be
      scheduled.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function terminate(jobId: string, options?: JobTerminateOptionalParams):
        Promise<JobTerminateResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to terminate.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobTerminateOptionalParams" />
          description: The optional parameters
      return:
        description: Promise<Models.JobTerminateResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.JobTerminateResponse" />&gt;
  - name: terminate(string, JobTerminateOptionalParams, ServiceCallback<void>)
    uid: '@azure/batch.Job.terminate_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function terminate(jobId: string, options: JobTerminateOptionalParams,
        callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to terminate.
        - id: options
          type: >-
            <xref
            uid="@azure/batch.BatchServiceModels.JobTerminateOptionalParams" />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: terminate(string, ServiceCallback<void>)
    uid: '@azure/batch.Job.terminate_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function terminate(jobId: string, callback: ServiceCallback<void>)'
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job to terminate.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: update(string, JobUpdateParameter, JobUpdateOptionalParams)
    uid: '@azure/batch.Job.update'
    package: '@azure/batch'
    summary: >-
      This fully replaces all the updatable properties of the Job. For example,
      if the Job has

      constraints associated with it and if constraints is not specified with
      this request, then the

      Batch service will remove the existing constraints.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function update(jobId: string, jobUpdateParameter: JobUpdateParameter,
        options?: JobUpdateOptionalParams): Promise<JobUpdateResponse>
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job whose properties you want to update.
        - id: jobUpdateParameter
          type: <xref uid="@azure/batch.BatchServiceModels.JobUpdateParameter" />
          description: The parameters for the request.
        - id: options
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.JobUpdateOptionalParams"
            />
          description: The optional parameters
      return:
        description: Promise<Models.JobUpdateResponse>
        type: >-
          Promise&lt;<xref
          uid="@azure/batch.BatchServiceModels.JobUpdateResponse" />&gt;
  - name: >-
      update(string, JobUpdateParameter, JobUpdateOptionalParams,
      ServiceCallback<void>)
    uid: '@azure/batch.Job.update_2'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function update(jobId: string, jobUpdateParameter: JobUpdateParameter,
        options: JobUpdateOptionalParams, callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job whose properties you want to update.
        - id: jobUpdateParameter
          type: <xref uid="@azure/batch.BatchServiceModels.JobUpdateParameter" />
          description: The parameters for the request.
        - id: options
          type: >-
            <xref uid="@azure/batch.BatchServiceModels.JobUpdateOptionalParams"
            />
          description: The optional parameters
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
  - name: update(string, JobUpdateParameter, ServiceCallback<void>)
    uid: '@azure/batch.Job.update_1'
    package: '@azure/batch'
    summary: ''
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function update(jobId: string, jobUpdateParameter: JobUpdateParameter,
        callback: ServiceCallback<void>)
      parameters:
        - id: jobId
          type: string
          description: The ID of the Job whose properties you want to update.
        - id: jobUpdateParameter
          type: <xref uid="@azure/batch.BatchServiceModels.JobUpdateParameter" />
          description: The parameters for the request.
        - id: callback
          type: <xref uid="@azure/ms-rest-js.ServiceCallback" />&lt;void&gt;
          description: The callback
