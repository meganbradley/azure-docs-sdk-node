### YamlMime:TSType
name: EntityRemoveLabelsByUniqueAttribute
uid: '@azure-rest/purview-datamap.EntityRemoveLabelsByUniqueAttribute'
package: '@azure-rest/purview-datamap'
summary: ''
fullName: EntityRemoveLabelsByUniqueAttribute
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: delete(EntityRemoveLabelsByUniqueAttributeParameters)
    uid: '@azure-rest/purview-datamap.EntityRemoveLabelsByUniqueAttribute.delete'
    package: '@azure-rest/purview-datamap'
    summary: >-
      Delete given labels to a given entity identified by its type and unique

      attribute.


      If labels is null/empty, no labels will be removed.


      If any labels

      in labels set are non-existing labels, they will be ignored, only existing

      labels will be removed. In addition to the typeName path parameter,
      attribute

      key-value pair(s) can be provided in the following format:

      attr:<attrName>=<attrValue>. NOTE: The attrName and attrValue should be
      unique

      across entities, eg. qualifiedName. The REST request would look something
      like

      this: DELETE

      /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function delete(options?:
        EntityRemoveLabelsByUniqueAttributeParameters):
        StreamableMethod<EntityRemoveLabelsByUniqueAttribute204Response |
        EntityRemoveLabelsByUniqueAttributeDefaultResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure-rest/purview-datamap.EntityRemoveLabelsByUniqueAttributeParameters"
            />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure-rest/core-client.StreamableMethod" />&lt;<xref
          uid="@azure-rest/purview-datamap.EntityRemoveLabelsByUniqueAttribute204Response"
          /> | <xref
          uid="@azure-rest/purview-datamap.EntityRemoveLabelsByUniqueAttributeDefaultResponse"
          />&gt;
  - name: post(EntitySetLabelsByUniqueAttributeParameters)
    uid: '@azure-rest/purview-datamap.EntityRemoveLabelsByUniqueAttribute.post'
    package: '@azure-rest/purview-datamap'
    summary: >-
      Set labels to a given entity identified by its type and unique attributes.


      If

      labels is null/empty, existing labels will all be removed.


      In addition to the

      typeName path parameter, attribute key-value pair(s) can be provided in
      the

      following format: attr:<attrName>=<attrValue>.


      NOTE: The attrName and

      attrValue should be unique across entities, eg. qualifiedName.


      The REST

      request would look something like this: POST

      /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function post(options?: EntitySetLabelsByUniqueAttributeParameters):
        StreamableMethod<EntitySetLabelsByUniqueAttribute204Response |
        EntitySetLabelsByUniqueAttributeDefaultResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure-rest/purview-datamap.EntitySetLabelsByUniqueAttributeParameters"
            />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure-rest/core-client.StreamableMethod" />&lt;<xref
          uid="@azure-rest/purview-datamap.EntitySetLabelsByUniqueAttribute204Response"
          /> | <xref
          uid="@azure-rest/purview-datamap.EntitySetLabelsByUniqueAttributeDefaultResponse"
          />&gt;
  - name: put(EntityAddLabelsByUniqueAttributeParameters)
    uid: '@azure-rest/purview-datamap.EntityRemoveLabelsByUniqueAttribute.put'
    package: '@azure-rest/purview-datamap'
    summary: >-
      Add given labels to a given entity identified by its type and unique

      attributes.


      If labels is null/empty, no labels will be added.


      In addition to

      the typeName path parameter, attribute key-value pair(s) can be provided
      in the

      following format: attr:<attrName>=<attrValue>.


      NOTE: The attrName and

      attrValue should be unique across entities, eg. qualifiedName.


      The REST

      request would look something like this: PUT

      /v2/entity/uniqueAttribute/type/aType?attr:aTypeAttribute=someValue.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function put(options?: EntityAddLabelsByUniqueAttributeParameters):
        StreamableMethod<EntityAddLabelsByUniqueAttribute204Response |
        EntityAddLabelsByUniqueAttributeDefaultResponse>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure-rest/purview-datamap.EntityAddLabelsByUniqueAttributeParameters"
            />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure-rest/core-client.StreamableMethod" />&lt;<xref
          uid="@azure-rest/purview-datamap.EntityAddLabelsByUniqueAttribute204Response"
          /> | <xref
          uid="@azure-rest/purview-datamap.EntityAddLabelsByUniqueAttributeDefaultResponse"
          />&gt;
