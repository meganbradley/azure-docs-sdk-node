### YamlMime:TSType
name: MapsSearchClient
uid: '@azure/maps-search.MapsSearchClient'
package: '@azure/maps-search'
summary: Client class for interacting with Azure Maps Search Service.
fullName: MapsSearchClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: MapsSearchClient(AzureKeyCredential, MapsSearchClientOptions)
    uid: '@azure/maps-search.MapsSearchClient.constructor'
    package: '@azure/maps-search'
    summary: |+
      Creates an instance of MapsSearchClient from a subscription key.

      **Example**

      ```ts
      import { MapsSearchClient, AzureKeyCredential } from "@azure/maps-search";

      const credential = new AzureKeyCredential("<subscription-key>");
      const client = new MapsSearchClient(credential);
      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new MapsSearchClient(credential: AzureKeyCredential, options?:
        MapsSearchClientOptions)
      parameters:
        - id: credential
          type: <xref uid="@azure/maps-search.AzureKeyCredential" />
          description: >-
            An AzureKeyCredential instance used to authenticate requests to the
            service
        - id: options
          type: <xref uid="@azure/maps-search.MapsSearchClientOptions" />
          description: Options used to configure the Search Client
  - name: MapsSearchClient(TokenCredential, string, MapsSearchClientOptions)
    uid: '@azure/maps-search.MapsSearchClient.constructor_1'
    package: '@azure/maps-search'
    summary: >+
      Creates an instance of MapsSearchClient from an Azure Identity
      `TokenCredential`.


      **Example**


      ```ts

      import { MapsSearchClient } from "@azure/maps-search";

      import { DefaultAzureCredential } from "@azure/identity";


      const credential = new DefaultAzureCredential();

      const client = new MapsSearchClient(credential,
      "<maps-account-client-id>");

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new MapsSearchClient(credential: TokenCredential, mapsAccountClientId:
        string, options?: MapsSearchClientOptions)
      parameters:
        - id: credential
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: >-
            An TokenCredential instance used to authenticate requests to the
            service
        - id: mapsAccountClientId
          type: string
          description: The Azure Maps client id of a specific map resource
        - id: options
          type: <xref uid="@azure/maps-search.MapsSearchClientOptions" />
          description: Options used to configure the Search Client
methods:
  - name: beginFuzzySearchBatch(FuzzySearchRequest[], FuzzySearchBatchOptions)
    uid: '@azure/maps-search.MapsSearchClient.beginFuzzySearchBatch'
    package: '@azure/maps-search'
    summary: |-
      Sends batches of fuzzy search requests.
      The method returns a poller for retrieving the result later.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginFuzzySearchBatch(requests: FuzzySearchRequest[], options?:
        FuzzySearchBatchOptions): Promise<FuzzySearchBatchPoller>
      parameters:
        - id: requests
          type: <xref uid="@azure/maps-search.FuzzySearchRequest" />[]
          description: >-
            The array of search requests to process. The array can contain a max
            of 10,000 requests and must contain at least 1 request.
        - id: options
          type: <xref uid="@azure/maps-search.FuzzySearchBatchOptions" />
          description: Optional parameters for the operation
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/maps-search.FuzzySearchBatchPoller"
          />&gt;
  - name: >-
      beginReverseSearchAddressBatch(ReverseSearchAddressRequest[],
      ReverseSearchAddressBatchOptions)
    uid: '@azure/maps-search.MapsSearchClient.beginReverseSearchAddressBatch'
    package: '@azure/maps-search'
    summary: |-
      Sends batches of reverse geocoding requests.
      The method returns a poller for retrieving the result later.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginReverseSearchAddressBatch(requests:
        ReverseSearchAddressRequest[], options?:
        ReverseSearchAddressBatchOptions):
        Promise<ReverseSearchAddressBatchPoller>
      parameters:
        - id: requests
          type: <xref uid="@azure/maps-search.ReverseSearchAddressRequest" />[]
          description: >-
            The array of search requests to process. The array can contain a max
            of 10,000 requests and must contain at least 1 request.
        - id: options
          type: <xref uid="@azure/maps-search.ReverseSearchAddressBatchOptions" />
          description: Optional parameters for the operation
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/maps-search.ReverseSearchAddressBatchPoller" />&gt;
  - name: beginSearchAddressBatch(SearchAddressRequest[], SearchAddressBatchOptions)
    uid: '@azure/maps-search.MapsSearchClient.beginSearchAddressBatch'
    package: '@azure/maps-search'
    summary: |-
      Sends batches of geocoding requests.
      The method returns a poller for retrieving the result later.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginSearchAddressBatch(requests: SearchAddressRequest[],
        options?: SearchAddressBatchOptions): Promise<FuzzySearchBatchPoller>
      parameters:
        - id: requests
          type: <xref uid="@azure/maps-search.SearchAddressRequest" />[]
          description: >-
            The array of search requests to process. The array can contain a max
            of 10,000 requests and must contain at least 1 request.
        - id: options
          type: <xref uid="@azure/maps-search.SearchAddressBatchOptions" />
          description: Optional parameters for the operation
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/maps-search.FuzzySearchBatchPoller"
          />&gt;
  - name: fuzzySearch(SearchQuery, FuzzySearchBaseOptions & OperationOptions)
    uid: '@azure/maps-search.MapsSearchClient.fuzzySearch'
    package: '@azure/maps-search'
    summary: >-
      Performs a free-form Search which handles the most fuzzy of inputs
      handling any combination of address or POI tokens.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function fuzzySearch(searchQuery: SearchQuery, options?:
        FuzzySearchBaseOptions & OperationOptions): Promise<SearchAddressResult>
      parameters:
        - id: searchQuery
          type: <xref uid="@azure/maps-search.SearchQuery" />
          description: Text query and location information to search
        - id: options
          type: >-
            <xref uid="@azure/maps-search.FuzzySearchBaseOptions" /> & <xref
            uid="@azure/core-client.OperationOptions" />
          description: Options for fuzzy search
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/maps-search.SearchAddressResult" />&gt;
  - name: getGeometries(string[], OperationOptions)
    uid: '@azure/maps-search.MapsSearchClient.getGeometries'
    package: '@azure/maps-search'
    summary: >-
      Requests the geometry data such as a city or country outline for a set of
      entities.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getGeometries(geometryIds: string[], options?:
        OperationOptions): Promise<EntityGeometry[]>
      parameters:
        - id: geometryIds
          type: string[]
          description: >-
            Comma separated list of geometry UUIDs, previously retrieved from an
            Online Search request.
        - id: options
          type: <xref uid="@azure/core-client.OperationOptions" />
          description: Optional parameters for the operation
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/maps-search.EntityGeometry" />[]&gt;
  - name: getPointOfInterestCategories(GetPointOfInterestCategoriesOptions)
    uid: '@azure/maps-search.MapsSearchClient.getPointOfInterestCategories'
    package: '@azure/maps-search'
    summary: Requests a full list of supported Points of Interest (POI) categories.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPointOfInterestCategories(options?:
        GetPointOfInterestCategoriesOptions): Promise<PointOfInterestCategory[]>
      parameters:
        - id: options
          type: >-
            <xref uid="@azure/maps-search.GetPointOfInterestCategoriesOptions"
            />
          description: Optional parameters for the operation
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/maps-search.PointOfInterestCategory"
          />[]&gt;
  - name: resumeFuzzySearchBatch(string, FuzzySearchBatchOptions)
    uid: '@azure/maps-search.MapsSearchClient.resumeFuzzySearchBatch'
    package: '@azure/maps-search'
    summary: >+
      Continue the fuzzy search request with a serialized state from other
      poller.


      **Example**


      ```js

      const serializedState = poller.toString()

      const rehydratedPoller = resumeFuzzySearchBatch(serializedState)

      rehydratedPoller.poll()

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeFuzzySearchBatch(restoreFrom: string, options?:
        FuzzySearchBatchOptions): Promise<FuzzySearchBatchPoller>
      parameters:
        - id: restoreFrom
          type: string
          description: The serialized state from the previous poller.
        - id: options
          type: <xref uid="@azure/maps-search.FuzzySearchBatchOptions" />
          description: Optional parameters for the operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/maps-search.FuzzySearchBatchPoller"
          />&gt;
  - name: resumeReverseSearchAddressBatch(string, ReverseSearchAddressBatchOptions)
    uid: '@azure/maps-search.MapsSearchClient.resumeReverseSearchAddressBatch'
    package: '@azure/maps-search'
    summary: >+
      Continue the reverse address search request with a serialized state from
      other poller.


      **Example**


      ```js

      const serializedState = poller.toString()

      const rehydratedPoller = resumeReverseSearchAddressBatch(serializedState)

      rehydratedPoller.poll()

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeReverseSearchAddressBatch(restoreFrom: string, options?:
        ReverseSearchAddressBatchOptions):
        Promise<ReverseSearchAddressBatchPoller>
      parameters:
        - id: restoreFrom
          type: string
          description: The serialized state from the previous poller.
        - id: options
          type: <xref uid="@azure/maps-search.ReverseSearchAddressBatchOptions" />
          description: Optional parameters for the operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/maps-search.ReverseSearchAddressBatchPoller" />&gt;
  - name: resumeSearchAddressBatch(string, SearchAddressBatchOptions)
    uid: '@azure/maps-search.MapsSearchClient.resumeSearchAddressBatch'
    package: '@azure/maps-search'
    summary: >+
      Continue the address search request with a serialized state from other
      poller.


      **Example**


      ```js

      const serializedState = poller.toString()

      const rehydratedPoller = resumeSearchAddressBatch(serializedState)

      rehydratedPoller.poll()

      ```

    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function resumeSearchAddressBatch(restoreFrom: string, options?:
        SearchAddressBatchOptions): Promise<FuzzySearchBatchPoller>
      parameters:
        - id: restoreFrom
          type: string
          description: The serialized state from the previous poller.
        - id: options
          type: <xref uid="@azure/maps-search.SearchAddressBatchOptions" />
          description: Optional parameters for the operation.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/maps-search.FuzzySearchBatchPoller"
          />&gt;
  - name: >-
      reverseSearchAddress(LatLon, ReverseSearchAddressOptions &
      OperationOptions)
    uid: '@azure/maps-search.MapsSearchClient.reverseSearchAddress'
    package: '@azure/maps-search'
    summary: Translates a coordinates into a human understandable street address.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reverseSearchAddress(coordinates: LatLon, options?:
        ReverseSearchAddressOptions & OperationOptions):
        Promise<ReverseSearchAddressResult>
      parameters:
        - id: coordinates
          type: <xref uid="@azure/maps-search.LatLon" />
          description: The coordinates for the reverse search query
        - id: options
          type: >-
            <xref uid="@azure/maps-search.ReverseSearchAddressOptions" /> &
            <xref uid="@azure/core-client.OperationOptions" />
          description: Optional parameters for the operation
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/maps-search.ReverseSearchAddressResult"
          />&gt;
  - name: >-
      reverseSearchCrossStreetAddress(LatLon,
      ReverseSearchCrossStreetAddressOptions)
    uid: '@azure/maps-search.MapsSearchClient.reverseSearchCrossStreetAddress'
    package: '@azure/maps-search'
    summary: Translates a coordinates into a human understandable cross street.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function reverseSearchCrossStreetAddress(coordinates: LatLon, options?:
        ReverseSearchCrossStreetAddressOptions):
        Promise<ReverseSearchCrossStreetAddressResult>
      parameters:
        - id: coordinates
          type: <xref uid="@azure/maps-search.LatLon" />
          description: The coordinates for the reverse search query
        - id: options
          type: >-
            <xref
            uid="@azure/maps-search.ReverseSearchCrossStreetAddressOptions" />
          description: Optional parameters for the operation
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/maps-search.ReverseSearchCrossStreetAddressResult" />&gt;
  - name: searchAddress(string, SearchAddressOptions & OperationOptions)
    uid: '@azure/maps-search.MapsSearchClient.searchAddress'
    package: '@azure/maps-search'
    summary: Geocodes a address.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function searchAddress(query: string, options?: SearchAddressOptions &
        OperationOptions): Promise<SearchAddressResult>
      parameters:
        - id: query
          type: string
          description: The address to search for (e.g., "1 Microsoft way, Redmond, WA")
        - id: options
          type: >-
            <xref uid="@azure/maps-search.SearchAddressOptions" /> & <xref
            uid="@azure/core-client.OperationOptions" />
          description: Optional parameters for the operation
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/maps-search.SearchAddressResult" />&gt;
  - name: >-
      searchAlongRoute(string, number, GeoJsonLineString,
      SearchAlongRouteOptions)
    uid: '@azure/maps-search.MapsSearchClient.searchAlongRoute'
    package: '@azure/maps-search'
    summary: Performs a fuzzy search for POIs along a specified route.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function searchAlongRoute(query: string, maxDetourTimeInSeconds: number,
        route: GeoJsonLineString, options?: SearchAlongRouteOptions):
        Promise<SearchAddressResult>
      parameters:
        - id: query
          type: string
          description: >-
            The POI name to search for (e.g., "statue of liberty", "starbucks",
            "pizza").
        - id: maxDetourTimeInSeconds
          type: number
          description: >-
            Maximum detour time of the point of interest in seconds. Max value
            is 3600 seconds
        - id: route
          type: <xref uid="@azure/maps-search.GeoJsonLineString" />
          description: >-
            This represents the route to search along and should be a valid
            `GeoJSON LineString` type.
        - id: options
          type: <xref uid="@azure/maps-search.SearchAlongRouteOptions" />
          description: Optional parameters for the operation
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/maps-search.SearchAddressResult" />&gt;
  - name: searchInsideGeometry(string, SearchGeometry, SearchInsideGeometryOptions)
    uid: '@azure/maps-search.MapsSearchClient.searchInsideGeometry'
    package: '@azure/maps-search'
    summary: Performs a free form search inside a single geometry or many of them.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function searchInsideGeometry(query: string, geometry: SearchGeometry,
        options?: SearchInsideGeometryOptions): Promise<SearchAddressResult>
      parameters:
        - id: query
          type: string
          description: >-
            The POI name to search for (e.g., "statue of liberty", "starbucks",
            "pizza").
        - id: geometry
          type: <xref uid="@azure/maps-search.SearchGeometry" />
          description: >-
            This represents the geometry for one or more geographical features
            (parks, state
                              boundary etc.) to search in and should be a GeoJSON compliant type. Please refer to [RFC
                              7946](https://tools.ietf.org/html/rfc7946) for details.
        - id: options
          type: <xref uid="@azure/maps-search.SearchInsideGeometryOptions" />
          description: Optional parameters for the operation
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/maps-search.SearchAddressResult" />&gt;
  - name: searchNearbyPointOfInterest(LatLon, SearchNearbyPointOfInterestOptions)
    uid: '@azure/maps-search.MapsSearchClient.searchNearbyPointOfInterest'
    package: '@azure/maps-search'
    summary: Requests points of interest (POI) results around a specific location.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function searchNearbyPointOfInterest(coordinates: LatLon, options?:
        SearchNearbyPointOfInterestOptions): Promise<SearchAddressResult>
      parameters:
        - id: coordinates
          type: <xref uid="@azure/maps-search.LatLon" />
          description: The coordinates for the nearby POI search
        - id: options
          type: <xref uid="@azure/maps-search.SearchNearbyPointOfInterestOptions" />
          description: Optional parameters for the operation
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/maps-search.SearchAddressResult" />&gt;
  - name: searchPointOfInterest(SearchQuery, SearchPointOfInterestOptions)
    uid: '@azure/maps-search.MapsSearchClient.searchPointOfInterest'
    package: '@azure/maps-search'
    summary: Requests points of interest (POI) results by name
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function searchPointOfInterest(searchQuery: SearchQuery, options?:
        SearchPointOfInterestOptions): Promise<SearchAddressResult>
      parameters:
        - id: searchQuery
          type: <xref uid="@azure/maps-search.SearchQuery" />
          description: Text query and location information to search
        - id: options
          type: <xref uid="@azure/maps-search.SearchPointOfInterestOptions" />
          description: Options for search POI
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/maps-search.SearchAddressResult" />&gt;
  - name: searchPointOfInterestCategory(SearchQuery, SearchPointOfInterestOptions)
    uid: '@azure/maps-search.MapsSearchClient.searchPointOfInterestCategory'
    package: '@azure/maps-search'
    summary: Requests points of interests (POI) results from given category.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function searchPointOfInterestCategory(searchQuery: SearchQuery,
        options?: SearchPointOfInterestOptions): Promise<SearchAddressResult>
      parameters:
        - id: searchQuery
          type: <xref uid="@azure/maps-search.SearchQuery" />
          description: Text query and location information to search
        - id: options
          type: <xref uid="@azure/maps-search.SearchPointOfInterestOptions" />
          description: Options for search POI category
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/maps-search.SearchAddressResult" />&gt;
  - name: searchStructuredAddress(StructuredAddress, SearchStructuredAddressOptions)
    uid: '@azure/maps-search.MapsSearchClient.searchStructuredAddress'
    package: '@azure/maps-search'
    summary: Geocodes a structured address.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function searchStructuredAddress(structuredAddress: StructuredAddress,
        options?: SearchStructuredAddressOptions): Promise<SearchAddressResult>
      parameters:
        - id: structuredAddress
          type: <xref uid="@azure/maps-search.StructuredAddress" />
          description: Structured address used for geocoding
        - id: options
          type: <xref uid="@azure/maps-search.SearchStructuredAddressOptions" />
          description: Optional parameters for the operation
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/maps-search.SearchAddressResult" />&gt;
