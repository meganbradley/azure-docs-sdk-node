### YamlMime:TSType
name: GovernanceRules
uid: '@azure/arm-security.GovernanceRules'
package: '@azure/arm-security'
summary: Interface representing a GovernanceRules.
fullName: GovernanceRules
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: beginDelete(string, string, GovernanceRulesDeleteOptionalParams)
    uid: '@azure/arm-security.GovernanceRules.beginDelete'
    package: '@azure/arm-security'
    summary: Delete a Governance rule over a given scope
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDelete(scope: string, ruleId: string, options?:
        GovernanceRulesDeleteOptionalParams):
        Promise<SimplePollerLike<OperationState<void>, void>>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the Governance rules. Valid scopes are: management
            group (format:
                         'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         'subscriptions/{subscriptionId}'), or security connector (format:
                         'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        - id: ruleId
          type: string
          description: >-
            The governance rule key - unique key for the standard governance
            rule (GUID)
        - id: options
          type: >-
            <xref uid="@azure/arm-security.GovernanceRulesDeleteOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;void&gt;, void&gt;&gt;
  - name: beginDeleteAndWait(string, string, GovernanceRulesDeleteOptionalParams)
    uid: '@azure/arm-security.GovernanceRules.beginDeleteAndWait'
    package: '@azure/arm-security'
    summary: Delete a Governance rule over a given scope
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAndWait(scope: string, ruleId: string, options?:
        GovernanceRulesDeleteOptionalParams): Promise<void>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the Governance rules. Valid scopes are: management
            group (format:
                         'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         'subscriptions/{subscriptionId}'), or security connector (format:
                         'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        - id: ruleId
          type: string
          description: >-
            The governance rule key - unique key for the standard governance
            rule (GUID)
        - id: options
          type: >-
            <xref uid="@azure/arm-security.GovernanceRulesDeleteOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: beginExecute(string, string, GovernanceRulesExecuteOptionalParams)
    uid: '@azure/arm-security.GovernanceRules.beginExecute'
    package: '@azure/arm-security'
    summary: Execute a governance rule
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginExecute(scope: string, ruleId: string, options?:
        GovernanceRulesExecuteOptionalParams):
        Promise<SimplePollerLike<OperationState<GovernanceRulesExecuteHeaders>,
        GovernanceRulesExecuteHeaders>>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the Governance rules. Valid scopes are: management
            group (format:
                         'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         'subscriptions/{subscriptionId}'), or security connector (format:
                         'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        - id: ruleId
          type: string
          description: >-
            The governance rule key - unique key for the standard governance
            rule (GUID)
        - id: options
          type: >-
            <xref uid="@azure/arm-security.GovernanceRulesExecuteOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-security.GovernanceRulesExecuteHeaders" />&gt;, <xref
          uid="@azure/arm-security.GovernanceRulesExecuteHeaders" />&gt;&gt;
  - name: beginExecuteAndWait(string, string, GovernanceRulesExecuteOptionalParams)
    uid: '@azure/arm-security.GovernanceRules.beginExecuteAndWait'
    package: '@azure/arm-security'
    summary: Execute a governance rule
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginExecuteAndWait(scope: string, ruleId: string, options?:
        GovernanceRulesExecuteOptionalParams):
        Promise<GovernanceRulesExecuteHeaders>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the Governance rules. Valid scopes are: management
            group (format:
                         'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         'subscriptions/{subscriptionId}'), or security connector (format:
                         'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        - id: ruleId
          type: string
          description: >-
            The governance rule key - unique key for the standard governance
            rule (GUID)
        - id: options
          type: >-
            <xref uid="@azure/arm-security.GovernanceRulesExecuteOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-security.GovernanceRulesExecuteHeaders" />&gt;
  - name: >-
      createOrUpdate(string, string, GovernanceRule,
      GovernanceRulesCreateOrUpdateOptionalParams)
    uid: '@azure/arm-security.GovernanceRules.createOrUpdate'
    package: '@azure/arm-security'
    summary: Creates or updates a governance rule over a given scope
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createOrUpdate(scope: string, ruleId: string, governanceRule:
        GovernanceRule, options?: GovernanceRulesCreateOrUpdateOptionalParams):
        Promise<GovernanceRule>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the Governance rules. Valid scopes are: management
            group (format:
                         'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         'subscriptions/{subscriptionId}'), or security connector (format:
                         'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        - id: ruleId
          type: string
          description: >-
            The governance rule key - unique key for the standard governance
            rule (GUID)
        - id: governanceRule
          type: <xref uid="@azure/arm-security.GovernanceRule" />
          description: Governance rule over a given scope
        - id: options
          type: >-
            <xref
            uid="@azure/arm-security.GovernanceRulesCreateOrUpdateOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-security.GovernanceRule" />&gt;
  - name: get(string, string, GovernanceRulesGetOptionalParams)
    uid: '@azure/arm-security.GovernanceRules.get'
    package: '@azure/arm-security'
    summary: Get a specific governance rule for the requested scope by ruleId
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(scope: string, ruleId: string, options?:
        GovernanceRulesGetOptionalParams): Promise<GovernanceRule>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the Governance rules. Valid scopes are: management
            group (format:
                         'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         'subscriptions/{subscriptionId}'), or security connector (format:
                         'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        - id: ruleId
          type: string
          description: >-
            The governance rule key - unique key for the standard governance
            rule (GUID)
        - id: options
          type: <xref uid="@azure/arm-security.GovernanceRulesGetOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-security.GovernanceRule" />&gt;
  - name: list(string, GovernanceRulesListOptionalParams)
    uid: '@azure/arm-security.GovernanceRules.list'
    package: '@azure/arm-security'
    summary: Get a list of all relevant governance rules over a scope
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(scope: string, options?:
        GovernanceRulesListOptionalParams):
        PagedAsyncIterableIterator<GovernanceRule, GovernanceRule[],
        PageSettings>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the Governance rules. Valid scopes are: management
            group (format:
                         'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         'subscriptions/{subscriptionId}'), or security connector (format:
                         'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        - id: options
          type: <xref uid="@azure/arm-security.GovernanceRulesListOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-security.GovernanceRule" />, <xref
          uid="@azure/arm-security.GovernanceRule" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      operationResults(string, string, string,
      GovernanceRulesOperationResultsOptionalParams)
    uid: '@azure/arm-security.GovernanceRules.operationResults'
    package: '@azure/arm-security'
    summary: >-
      Get governance rules long run operation result for the requested scope by
      ruleId and operationId
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function operationResults(scope: string, ruleId: string, operationId:
        string, options?: GovernanceRulesOperationResultsOptionalParams):
        Promise<OperationResultAutoGenerated>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the Governance rules. Valid scopes are: management
            group (format:
                         'providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         'subscriptions/{subscriptionId}'), or security connector (format:
                         'subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/Microsoft.Security/securityConnectors/{securityConnectorName})'
        - id: ruleId
          type: string
          description: >-
            The governance rule key - unique key for the standard governance
            rule (GUID)
        - id: operationId
          type: string
          description: The governance rule long running operation unique key
        - id: options
          type: >-
            <xref
            uid="@azure/arm-security.GovernanceRulesOperationResultsOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/arm-security.OperationResultAutoGenerated" />&gt;
