### YamlMime:TSType
name: TextAnalysisClient
uid: '@azure/ai-language-text.TextAnalysisClient'
package: '@azure/ai-language-text'
summary: >-
  A client for interacting with the text analysis features in Azure Cognitive

  Language Service.


  The client needs the endpoint of a Language resource and an authentication

  method such as an API key or AAD. The API key and endpoint can be found in

  the Language resource page in the Azure portal. They will be located in the

  resource's Keys and Endpoint page, under Resource Management.


  ### Examples for authentication:


  #### API Key


  ```js

  import { TextAnalysisClient, AzureKeyCredential } from
  "@azure/ai-language-text";


  const endpoint = "https://<resource name>.cognitiveservices.azure.com";

  const credential = new AzureKeyCredential("<api key>");


  const client = new TextAnalysisClient(endpoint, credential);

  ```


  #### Azure Active Directory


  See the [`@azure/identity`](https://npmjs.com/package/@azure/identity)

  package for more information about authenticating with Azure Active Directory.


  ```js

  import { TextAnalysisClient } from "@azure/ai-language-text";

  import { DefaultAzureCredential } from "@azure/identity";


  const endpoint = "https://<resource name>.cognitiveservices.azure.com";

  const credential = new DefaultAzureCredential();


  const client = new TextAnalysisClient(endpoint, credential);

  ```
fullName: TextAnalysisClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: TextAnalysisClient(string, KeyCredential, TextAnalysisClientOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.constructor'
    package: '@azure/ai-language-text'
    summary: >-
      Creates an instance of TextAnalysisClient with the endpoint of a Language

      resource and an authentication method such as an API key or AAD.


      The API key and endpoint can be found in the Language resource page in the

      Azure portal. They will be located in the resource's Keys and Endpoint
      page,

      under Resource Management.


      ### Example


      ```js

      import { TextAnalysisClient, AzureKeyCredential } from
      "@azure/ai-language-text";


      const endpoint = "https://<resource name>.cognitiveservices.azure.com";

      const credential = new AzureKeyCredential("<api key>");


      const client = new TextAnalysisClient(endpoint, credential);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TextAnalysisClient(endpointUrl: string, credential: KeyCredential,
        options?: TextAnalysisClientOptions)
      parameters:
        - id: endpointUrl
          type: string
          description: The URL to the endpoint of a Cognitive Language Service resource
        - id: credential
          type: KeyCredential
          description: Key credential to be used to authenticate requests to the service.
        - id: options
          type: <xref uid="@azure/ai-language-text.TextAnalysisClientOptions" />
          description: Used to configure the TextAnalytics client.
  - name: TextAnalysisClient(string, TokenCredential, TextAnalysisClientOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.constructor_1'
    package: '@azure/ai-language-text'
    summary: >-
      Creates an instance of TextAnalysisClient with the endpoint of a Language

      resource and an authentication method such as an API key or AAD.


      The API key and endpoint can be found in the Language resource page in the

      Azure portal. They will be located in the resource's Keys and Endpoint
      page,

      under Resource Management.


      ### Example


      See the [`@azure/identity`](https://npmjs.com/package/@azure/identity)

      package for more information about authenticating with Azure Active
      Directory.


      ```js

      import { TextAnalysisClient } from "@azure/ai-language-text";

      import { DefaultAzureCredential } from "@azure/identity";


      const endpoint = "https://<resource name>.cognitiveservices.azure.com";

      const credential = new DefaultAzureCredential();


      const client = new TextAnalysisClient(endpoint, credential);

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new TextAnalysisClient(endpointUrl: string, credential: TokenCredential,
        options?: TextAnalysisClientOptions)
      parameters:
        - id: endpointUrl
          type: string
          description: The URL to the endpoint of a Cognitive Language Service resource
        - id: credential
          type: TokenCredential
          description: Token credential to be used to authenticate requests to the service.
        - id: options
          type: <xref uid="@azure/ai-language-text.TextAnalysisClientOptions" />
          description: Used to configure the TextAnalytics client.
methods:
  - name: >-
      analyze<ActionName>(ActionName, LanguageDetectionInput[],
      AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.analyze'
    package: '@azure/ai-language-text'
    summary: >-
      Runs a predictive model to determine the language that the passed-in

      input strings are written in, and returns, for each one, the detected

      language as well as a score indicating the model's confidence that the

      inferred language is correct.  Scores close to 1 indicate high certainty
      in

      the result.  120 languages are supported.


      See
      https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits

      for data limits.


      ### Examples


      #### Language detection


      ```js

      const documents = [<input strings>];

      const countryHint = "us";

      const results = await client.analyze("LanguageDetection", documents,
      countryHint);


      for (let i = 0; i < results.length; i++) {
        const result = results[i];
        if (result.error) {
          // a document has an error instead of results
        } else {
          const { name, confidenceScore, iso6391Name } = result.primaryLanguage;
        }
      }

      ```


      See
      https://docs.microsoft.com//azure/cognitive-services/language-service/language-detection/overview

      for more information on language detection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function analyze<ActionName>(actionName: ActionName, documents:
        LanguageDetectionInput[], options?: AnalyzeActionParameters<ActionName>
        & TextAnalysisOperationOptions): Promise<AnalyzeResult<ActionName>>
      parameters:
        - id: actionName
          type: ActionName
          description: |-
            the name of the action to be performed on the input
              documents, see $[AnalyzeActionName](xref:@azure/ai-language-text.AnalyzeActionName)
        - id: documents
          type: <xref uid="@azure/ai-language-text.LanguageDetectionInput" />[]
          description: the input documents to be analyzed
        - id: options
          type: >-
            <xref uid="@azure/ai-language-text.AnalyzeActionParameters"
            />&lt;ActionName&gt; & <xref
            uid="@azure/ai-language-text.TextAnalysisOperationOptions" />
          description: optional action parameters and settings for the operation
      return:
        description: |-
          an array of results where each element contains the primary language
            for the corresponding input document.
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeResult"
          />&lt;ActionName&gt;&gt;
  - name: >-
      analyze<ActionName>(ActionName, string[], string,
      AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.analyze_1'
    package: '@azure/ai-language-text'
    summary: >-
      Runs a predictive model to determine the language that the passed-in

      input strings are written in, and returns, for each one, the detected

      language as well as a score indicating the model's confidence that the

      inferred language is correct.  Scores close to 1 indicate high certainty
      in

      the result.  120 languages are supported.


      See
      https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits

      for data limits.


      ### Examples


      #### Language detection


      ```js

      const documents = [<input strings>];

      const countryHint = "us";

      const results = await client.analyze("LanguageDetection", documents,
      countryHint);


      for (const result of results) {
        if (result.error) {
          // a document has an error instead of results
        } else {
          const { name, confidenceScore, iso6391Name } = result.primaryLanguage;
        }
      }

      ```


      See
      https://docs.microsoft.com//azure/cognitive-services/language-service/language-detection/overview

      for more information on language detection.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function analyze<ActionName>(actionName: ActionName, documents:
        string[], countryHint?: string, options?:
        AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions):
        Promise<AnalyzeResult<ActionName>>
      parameters:
        - id: actionName
          type: ActionName
          description: |-
            the name of the action to be performed on the input
              documents, see $[AnalyzeActionName](xref:@azure/ai-language-text.AnalyzeActionName)
        - id: documents
          type: string[]
          description: the input documents to be analyzed
        - id: countryHint
          type: string
          description: |-
            Indicates the country of origin for all of
              the input strings to assist the model in predicting the language they are
              written in.  If unspecified, this value will be set to the default
              country hint in `TextAnalysisClientOptions`. If set to an empty string,
              or the string "none", the service will apply a model where the country is
              explicitly unset. The same country hint is applied to all strings in the
              input collection.
        - id: options
          type: >-
            <xref uid="@azure/ai-language-text.AnalyzeActionParameters"
            />&lt;ActionName&gt; & <xref
            uid="@azure/ai-language-text.TextAnalysisOperationOptions" />
          description: optional action parameters and settings for the operation
      return:
        description: |-
          an array of results where each element contains the primary language
            for the corresponding input document.
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeResult"
          />&lt;ActionName&gt;&gt;
  - name: >-
      analyze<ActionName>(ActionName, string[], string,
      AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.analyze_3'
    package: '@azure/ai-language-text'
    summary: >-
      Runs a predictive model to perform the action of choice on the input

      strings. See
      $[AnalyzeActionName](xref:@azure/ai-language-text.AnalyzeActionName) for a
      list of supported

      actions.


      The layout of each item in the results array depends on the action chosen.

      For example, each PIIEntityRecognition document result consists of both

      `entities` and `redactedText` where the former is a list of all Pii
      entities

      in the text and the latter is the original text after all such Pii
      entities

      have been redacted from it.


      See
      https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits

      for data limits.


      ### Examples


      #### Opinion mining


      ```js

      const documents = ["The food and service aren't the best"];

      const results = await client.analyze("SentimentAnalysis", documents, {
        includeOpinionMining: true,
      });


      for (const result of results) {
        if (result.error) {
          // a document has an error instead of results
        } else {
          const { sentiment, confidenceScores, sentences } = result;
          for (const { sentiment, confidenceScores, opinions } of sentences) {
            for (const { target, assessments } of opinions) {
              const { text, sentiment, confidenceScores } = target;
              for (const { text, sentiment } of assessments) {
                // Do something
              }
            }
          }
        }
      }

      ```


      See
      https://docs.microsoft.com//azure/cognitive-services/language-service/sentiment-opinion-mining/overview

      for more information on opinion mining.


      #### Personally identifiable information


      ```js

      const documents = [<input strings>];

      const languageCode = "en";

      const categoriesFilter = [KnownPiiCategory.USSocialSecurityNumber];

      const domainFilter = KnownPiiDomain.Phi;

      const results = await client.analyze("PiiEntityRecognition", documents,
      languageCode, {
        domainFilter, categoriesFilter
      });


      for (const result of results) {
        if (result.error) {
          // a document has an error instead of results
        } else {
          const { entities, redactedText } = result;
          for (const { text, category, confidenceScore, length, offset } of entities) {
            // Do something
          }
        }
      }

      ```


      See
      https://docs.microsoft.com//azure/cognitive-services/language-service/personally-identifiable-information/overview

      for more information on personally identifiable information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function analyze<ActionName>(actionName: ActionName, documents:
        string[], languageCode?: string, options?:
        AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions):
        Promise<AnalyzeResult<ActionName>>
      parameters:
        - id: actionName
          type: ActionName
          description: |-
            the name of the action to be performed on the input
              documents, see $[AnalyzeActionName](xref:@azure/ai-language-text.AnalyzeActionName)
        - id: documents
          type: string[]
          description: the input documents to be analyzed
        - id: languageCode
          type: string
          description: |-
            the code of the language that all the input strings are
               written in. If unspecified, this value will be set to the default
               language in `TextAnalysisClientOptions`. If set to an empty string,
               the service will apply a model where the language is explicitly set to
               "None". Language support varies per action, for example, more information
               about the languages supported for Entity Recognition actions can be
               found in https://docs.microsoft.com//azure/cognitive-services/language-service/named-entity-recognition/language-support.
               If set to "auto", the service will automatically infer the language from
               the input text.
        - id: options
          type: >-
            <xref uid="@azure/ai-language-text.AnalyzeActionParameters"
            />&lt;ActionName&gt; & <xref
            uid="@azure/ai-language-text.TextAnalysisOperationOptions" />
          description: optional action parameters and settings for the operation
      return:
        description: an array of results corresponding to the input documents
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeResult"
          />&lt;ActionName&gt;&gt;
  - name: >-
      analyze<ActionName>(ActionName, TextDocumentInput[],
      AnalyzeActionParameters<ActionName> & TextAnalysisOperationOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.analyze_2'
    package: '@azure/ai-language-text'
    summary: >-
      Runs a predictive model to perform the action of choice on the input

      documents. See
      $[AnalyzeActionName](xref:@azure/ai-language-text.AnalyzeActionName) for a
      list of supported

      actions.


      The layout of each item in the results array depends on the action chosen.

      For example, each PIIEntityRecognition document result consists of both

      `entities` and `redactedText` where the former is a list of all Pii
      entities

      in the text and the latter is the original text after all such Pii
      entities

      have been redacted from it.


      See
      https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits

      for data limits.


      ### Examples


      #### Opinion mining


      ```js

      const documents = [{
       id: "1",
       text: "The food and service aren't the best",
       language: "en"
      }];

      const results = await client.analyze("SentimentAnalysis", documents, {
        includeOpinionMining: true,
      });


      for (const result of results) {
        if (result.error) {
          // a document has an error instead of results
        } else {
          const { sentiment, confidenceScores, sentences } = result;
          for (const { sentiment, confidenceScores, opinions } of sentences) {
            for (const { target, assessments } of opinions) {
              const { text, sentiment, confidenceScores } = target;
              for (const { text, sentiment } of assessments) {
                // Do something
              }
            }
          }
        }
      }

      ```


      See
      https://docs.microsoft.com//azure/cognitive-services/language-service/sentiment-opinion-mining/overview

      for more information on opinion mining.


      #### Personally identifiable information


      ```js

      const documents = [<input documents>];

      const categoriesFilter = [KnownPiiCategory.USSocialSecurityNumber];

      const domainFilter = KnownPiiDomain.Phi;

      const results = await client.analyze("PiiEntityRecognition", documents, {
        domainFilter, categoriesFilter
      });


      for (const result of results) {
        if (result.error) {
          // a document has an error instead of results
        } else {
          const { entities, redactedText } = result;
          for (const { text, category, confidenceScore, length, offset } of entities) {
            // Do something
          }
        }
      }

      ```


      See
      https://docs.microsoft.com//azure/cognitive-services/language-service/personally-identifiable-information/overview

      for more information on personally identifiable information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function analyze<ActionName>(actionName: ActionName, documents:
        TextDocumentInput[], options?: AnalyzeActionParameters<ActionName> &
        TextAnalysisOperationOptions): Promise<AnalyzeResult<ActionName>>
      parameters:
        - id: actionName
          type: ActionName
          description: |-
            the name of the action to be performed on the input
              documents, see $[AnalyzeActionName](xref:@azure/ai-language-text.AnalyzeActionName)
        - id: documents
          type: <xref uid="@azure/ai-language-text.TextDocumentInput" />[]
          description: the input documents to be analyzed
        - id: options
          type: >-
            <xref uid="@azure/ai-language-text.AnalyzeActionParameters"
            />&lt;ActionName&gt; & <xref
            uid="@azure/ai-language-text.TextAnalysisOperationOptions" />
          description: optional action parameters and settings for the operation
      return:
        description: an array of results corresponding to the input documents
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeResult"
          />&lt;ActionName&gt;&gt;
  - name: >-
      beginAnalyzeBatch(AnalyzeBatchAction[], string[], string,
      BeginAnalyzeBatchOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.beginAnalyzeBatch'
    package: '@azure/ai-language-text'
    summary: >-
      Performs an array (batch) of actions on the input documents. Each action
      has

      a `kind` field that specifies the nature of the action. See
      $[AnalyzeBatchActionNames](xref:54)

      for a list of supported actions. In addition to `kind`, actions could also

      have other parameters such as `disableServiceLogs` and `modelVersion`.


      The results array contains the results for those input actions where each

      item also has a `kind` field that specifies the type of the results.


      See
      https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits

      for data limits.


      ### Examples


      #### Key phrase extraction and Pii entity recognition


      ```js

      const poller = await client.beginAnalyzeBatch(
       [{ kind: "KeyPhraseExtraction" }, { kind: "PiiEntityRecognition" }],
       documents
      );

      const actionResults = await poller.pollUntilDone();


      for await (const actionResult of actionResults) {
       if (actionResult.error) {
         throw new Error(`Unexpected error`);
       }
       switch (actionResult.kind) {
         case "KeyPhraseExtraction": {
           for (const doc of actionResult.results) {
             // do something
           }
           break;
         }
         case "PiiEntityRecognition": {
           for (const doc of actionResult.results) {
             // do something
           }
           break;
         }
       }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginAnalyzeBatch(actions: AnalyzeBatchAction[], documents:
        string[], languageCode?: string, options?: BeginAnalyzeBatchOptions):
        Promise<AnalyzeBatchPoller>
      parameters:
        - id: actions
          type: <xref uid="@azure/ai-language-text.AnalyzeBatchAction" />[]
          description: an array of actions that will be run on the input documents
        - id: documents
          type: string[]
          description: the input documents to be analyzed
        - id: languageCode
          type: string
          description: |-
            the code of the language that all the input strings are
               written in. If unspecified, this value will be set to the default
               language in `TextAnalysisClientOptions`. If set to an empty string,
               the service will apply a model where the language is explicitly set to
               "None". Language support varies per action, for example, more information
               about the languages supported for Entity Recognition actions can be
               found in https://docs.microsoft.com//azure/cognitive-services/language-service/named-entity-recognition/language-support.
               If set to "auto", the service will automatically infer the language from
               the input text.
        - id: options
          type: <xref uid="@azure/ai-language-text.BeginAnalyzeBatchOptions" />
          description: optional settings for the operation
      return:
        description: an array of results corresponding to the input actions
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeBatchPoller"
          />&gt;
  - name: >-
      beginAnalyzeBatch(AnalyzeBatchAction[], TextDocumentInput[],
      BeginAnalyzeBatchOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.beginAnalyzeBatch_1'
    package: '@azure/ai-language-text'
    summary: >-
      Performs an array (batch) of actions on the input documents. Each action
      has

      a `kind` field that specifies the nature of the action. See
      $[AnalyzeBatchActionNames](xref:54)

      for a list of supported actions. In addition to `kind`, actions could also

      have other parameters such as `disableServiceLogs` and `modelVersion`.


      The results array contains the results for those input actions where each

      item also has a `kind` field that specifies the type of the results.


      See
      https://docs.microsoft.com//azure/cognitive-services/language-service/concepts/data-limits

      for data limits.


      ### Examples


      #### Keyphrase extraction and Pii entity recognition


      ```js

      const poller = await client.beginAnalyzeBatch(
       [{ kind: "KeyPhraseExtraction" }, { kind: "PiiEntityRecognition" }],
       documents
      );

      const actionResults = await poller.pollUntilDone();


      for await (const actionResult of actionResults) {
       if (actionResult.error) {
         throw new Error(`Unexpected error`);
       }
       switch (actionResult.kind) {
         case "KeyPhraseExtraction": {
           for (const doc of actionResult.results) {
             // do something
           }
           break;
         }
         case "PiiEntityRecognition": {
           for (const doc of actionResult.results) {
             // do something
           }
           break;
         }
       }
      }

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginAnalyzeBatch(actions: AnalyzeBatchAction[], documents:
        TextDocumentInput[], options?: BeginAnalyzeBatchOptions):
        Promise<AnalyzeBatchPoller>
      parameters:
        - id: actions
          type: <xref uid="@azure/ai-language-text.AnalyzeBatchAction" />[]
          description: an array of actions that will be run on the input documents
        - id: documents
          type: <xref uid="@azure/ai-language-text.TextDocumentInput" />[]
          description: the input documents to be analyzed
        - id: options
          type: <xref uid="@azure/ai-language-text.BeginAnalyzeBatchOptions" />
          description: optional settings for the operation
      return:
        description: an array of results corresponding to the input actions
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeBatchPoller"
          />&gt;
  - name: restoreAnalyzeBatchPoller(string, RestoreAnalyzeBatchPollerOptions)
    uid: '@azure/ai-language-text.TextAnalysisClient.restoreAnalyzeBatchPoller'
    package: '@azure/ai-language-text'
    summary: |-
      Creates a poller from the serialized state of another poller. This can be
      useful when you want to create pollers on a different host or a poller
      needs to be constructed after the original one is not in scope.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function restoreAnalyzeBatchPoller(serializedState: string, options?:
        RestoreAnalyzeBatchPollerOptions): Promise<AnalyzeBatchPoller>
      parameters:
        - id: serializedState
          type: string
          description: |-
            the serialized state of another poller. It is the
                                     result of `poller.toString()`
        - id: options
          type: >-
            <xref uid="@azure/ai-language-text.RestoreAnalyzeBatchPollerOptions"
            />
          description: >-
            optional settings for the operation


            # Example


            `client.beginAnalyzeBatch` returns a promise that will resolve to a
            poller.

            The state of the poller can be serialized and used to create another
            as follows:


            ```js

            const serializedState = poller.toString();

            const rehydratedPoller = await
            client.createAnalyzeBatchPoller(serializedState);

            const actionResults = await rehydratedPoller.pollUntilDone();

            ```
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/ai-language-text.AnalyzeBatchPoller"
          />&gt;
