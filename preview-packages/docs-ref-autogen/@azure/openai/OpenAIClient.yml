### YamlMime:TSType
name: OpenAIClient
uid: '@azure/openai.OpenAIClient'
package: '@azure/openai'
summary: >-
  A client for interacting with Azure OpenAI.


  The client needs the endpoint of an OpenAI resource and an authentication

  method such as an API key or token. The API key and endpoint can be found in

  the OpenAI resource page. They will be located in the resource's Keys and
  Endpoint page.


  ### Examples for authentication:


  #### API Key


  ```js

  import { OpenAIClient } from "@azure/openai";

  import { AzureKeyCredential } from "@azure/core-auth";


  const endpoint = "<azure endpoint>";

  const credential = new AzureKeyCredential("<api key>");


  const client = new OpenAIClient(endpoint, credential);

  ```


  #### Azure Active Directory


  ```js

  import { OpenAIClient } from "@azure/openai";

  import { DefaultAzureCredential } from "@azure/identity";


  const endpoint = "<azure endpoint>";

  const credential = new DefaultAzureCredential();


  const client = new OpenAIClient(endpoint, credential);

  ```
fullName: OpenAIClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: OpenAIClient(KeyCredential, OpenAIClientOptions)
    uid: '@azure/openai.OpenAIClient.constructor_2'
    package: '@azure/openai'
    summary: >-
      Initializes an instance of OpenAIClient for use with the non-Azure OpenAI
      endpoint.
    remarks: >-
      OpenAIClient objects initialized with this constructor can only be used
      with the non-Azure OpenAI inference endpoint.
        To use OpenAIClient with an Azure OpenAI resource, use a constructor that accepts a resource URI and Azure authentication credential instead.
    isDeprecated: false
    syntax:
      content: >-
        new OpenAIClient(openAiApiKey: KeyCredential, options?:
        OpenAIClientOptions)
      parameters:
        - id: openAiApiKey
          type: <xref uid="@azure/core-auth.KeyCredential" />
          description: The API key to use when connecting to the non-Azure OpenAI endpoint.
        - id: options
          type: <xref uid="@azure/openai.OpenAIClientOptions" />
          description: The options for configuring the client.
  - name: OpenAIClient(string, KeyCredential, OpenAIClientOptions)
    uid: '@azure/openai.OpenAIClient.constructor'
    package: '@azure/openai'
    summary: >-
      Initializes an instance of OpenAIClient for use with an Azure OpenAI
      resource.
    remarks: >-
      This constructor initializes an OpenAIClient object that can only be used
      with Azure OpenAI resources.
        To use OpenAIClient with a non-Azure OpenAI inference endpoint, use a constructor that accepts a non-Azure OpenAI API key instead.
    isDeprecated: false
    syntax:
      content: >-
        new OpenAIClient(endpoint: string, credential: KeyCredential, options?:
        OpenAIClientOptions)
      parameters:
        - id: endpoint
          type: string
          description: >-
            The URI for an Azure OpenAI resource, including protocol and
            hostname.
                            For example: https://my-resource.openai.azure.com.
        - id: credential
          type: <xref uid="@azure/core-auth.KeyCredential" />
          description: A key credential used to authenticate to an Azure OpenAI resource.
        - id: options
          type: <xref uid="@azure/openai.OpenAIClientOptions" />
          description: The options for configuring the client.
  - name: OpenAIClient(string, TokenCredential, OpenAIClientOptions)
    uid: '@azure/openai.OpenAIClient.constructor_1'
    package: '@azure/openai'
    summary: >-
      Initializes an instance of OpenAIClient for use with an Azure OpenAI
      resource.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new OpenAIClient(endpoint: string, credential: TokenCredential,
        options?: OpenAIClientOptions)
      parameters:
        - id: endpoint
          type: string
          description: >-
            The URI for an Azure OpenAI resource, including protocol and
            hostname.
                            For example: https://my-resource.openai.azure.com.
        - id: credential
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: >-
            A token credential used to authenticate with an Azure OpenAI
            resource.
        - id: options
          type: <xref uid="@azure/openai.OpenAIClientOptions" />
          description: The options for configuring the client.
methods:
  - name: getAudioTranscription(string, Uint8Array, GetAudioTranscriptionOptions)
    uid: '@azure/openai.OpenAIClient.getAudioTranscription'
    package: '@azure/openai'
    summary: Returns the transcription of an audio file in a simple JSON format.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAudioTranscription(deploymentName: string, fileContent:
        Uint8Array, options?: GetAudioTranscriptionOptions):
        Promise<AudioResultSimpleJson>
      parameters:
        - id: deploymentName
          type: string
          description: >-
            The name of the model deployment (when using Azure OpenAI) or model
            name (when using non-Azure OpenAI) to use for this request.
        - id: fileContent
          type: Uint8Array
          description: The content of the audio file to transcribe.
        - id: options
          type: <xref uid="@azure/openai.GetAudioTranscriptionOptions" />
          description: The options for this audio transcription request.
      return:
        description: The audio transcription result in a simple JSON format.
        type: Promise&lt;<xref uid="@azure/openai.AudioResultSimpleJson" />&gt;
  - name: >-
      getAudioTranscription<Format>(string, Uint8Array, Format,
      GetAudioTranscriptionOptions)
    uid: '@azure/openai.OpenAIClient.getAudioTranscription_1'
    package: '@azure/openai'
    summary: Returns the transcription of an audio file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAudioTranscription<Format>(deploymentName: string,
        fileContent: Uint8Array, format: Format, options?:
        GetAudioTranscriptionOptions): Promise<AudioResult<Format>>
      parameters:
        - id: deploymentName
          type: string
          description: >-
            The name of the model deployment (when using Azure OpenAI) or model
            name (when using non-Azure OpenAI) to use for this request.
        - id: fileContent
          type: Uint8Array
          description: The content of the audio file to transcribe.
        - id: format
          type: Format
          description: >-
            The format of the result object. See
            [AudioResultFormat](xref:@azure/openai.AudioResultFormat) for
            possible values.
        - id: options
          type: <xref uid="@azure/openai.GetAudioTranscriptionOptions" />
          description: The options for this audio transcription request.
      return:
        description: The audio transcription result in a format of your choice.
        type: Promise&lt;<xref uid="@azure/openai.AudioResult" />&lt;Format&gt;&gt;
  - name: getAudioTranslation(string, Uint8Array, GetAudioTranslationOptions)
    uid: '@azure/openai.OpenAIClient.getAudioTranslation'
    package: '@azure/openai'
    summary: Returns the translation of an audio file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAudioTranslation(deploymentName: string, fileContent:
        Uint8Array, options?: GetAudioTranslationOptions):
        Promise<AudioResultSimpleJson>
      parameters:
        - id: deploymentName
          type: string
          description: >-
            The name of the model deployment (when using Azure OpenAI) or model
            name (when using non-Azure OpenAI) to use for this request.
        - id: fileContent
          type: Uint8Array
          description: The content of the audio file to translate.
        - id: options
          type: <xref uid="@azure/openai.GetAudioTranslationOptions" />
          description: The options for this audio translation request.
      return:
        description: The audio translation result.
        type: Promise&lt;<xref uid="@azure/openai.AudioResultSimpleJson" />&gt;
  - name: >-
      getAudioTranslation<Format>(string, Uint8Array, Format,
      GetAudioTranslationOptions)
    uid: '@azure/openai.OpenAIClient.getAudioTranslation_1'
    package: '@azure/openai'
    summary: Returns the translation of an audio file.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getAudioTranslation<Format>(deploymentName: string,
        fileContent: Uint8Array, format: Format, options?:
        GetAudioTranslationOptions): Promise<AudioResult<Format>>
      parameters:
        - id: deploymentName
          type: string
          description: >-
            The name of the model deployment (when using Azure OpenAI) or model
            name (when using non-Azure OpenAI) to use for this request.
        - id: fileContent
          type: Uint8Array
          description: The content of the audio file to translate.
        - id: format
          type: Format
          description: >-
            The format of the result object. See
            [AudioResultFormat](xref:@azure/openai.AudioResultFormat) for
            possible values.
        - id: options
          type: <xref uid="@azure/openai.GetAudioTranslationOptions" />
          description: The options for this audio translation request.
      return:
        description: The audio translation result.
        type: Promise&lt;<xref uid="@azure/openai.AudioResult" />&lt;Format&gt;&gt;
  - name: >-
      getChatCompletions(string, ChatRequestMessageUnion[],
      GetChatCompletionsOptions)
    uid: '@azure/openai.OpenAIClient.getChatCompletions'
    package: '@azure/openai'
    summary: >-
      Gets chat completions for the provided chat messages.

      Completions support a wide variety of tasks and generate text that
      continues from or "completes"

      provided prompt data.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getChatCompletions(deploymentName: string, messages:
        ChatRequestMessageUnion[], options?: GetChatCompletionsOptions):
        Promise<ChatCompletions>
      parameters:
        - id: deploymentName
          type: string
          description: ''
        - id: messages
          type: <xref uid="@azure/openai.ChatRequestMessageUnion" />[]
          description: ''
        - id: options
          type: <xref uid="@azure/openai.GetChatCompletionsOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/openai.ChatCompletions" />&gt;
  - name: getCompletions(string, string[], GetCompletionsOptions)
    uid: '@azure/openai.OpenAIClient.getCompletions'
    package: '@azure/openai'
    summary: >-
      Gets completions for the provided input prompts.

      Completions support a wide variety of tasks and generate text that
      continues from or "completes"

      provided prompt data.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getCompletions(deploymentName: string, prompt: string[],
        options?: GetCompletionsOptions): Promise<Completions>
      parameters:
        - id: deploymentName
          type: string
          description: ''
        - id: prompt
          type: string[]
          description: ''
        - id: options
          type: <xref uid="@azure/openai.GetCompletionsOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/openai.Completions" />&gt;
  - name: getEmbeddings(string, string[], GetEmbeddingsOptions)
    uid: '@azure/openai.OpenAIClient.getEmbeddings'
    package: '@azure/openai'
    summary: Return the embeddings for a given prompt.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getEmbeddings(deploymentName: string, input: string[],
        options?: GetEmbeddingsOptions): Promise<Embeddings>
      parameters:
        - id: deploymentName
          type: string
          description: ''
        - id: input
          type: string[]
          description: ''
        - id: options
          type: <xref uid="@azure/openai.GetEmbeddingsOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/openai.Embeddings" />&gt;
  - name: getImages(string, string, GetImagesOptions)
    uid: '@azure/openai.OpenAIClient.getImages'
    package: '@azure/openai'
    summary: Creates an image given a prompt.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getImages(deploymentName: string, prompt: string, options?:
        GetImagesOptions): Promise<ImageGenerations>
      parameters:
        - id: deploymentName
          type: string
          description: ''
        - id: prompt
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/openai.GetImagesOptions" />
          description: ''
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/openai.ImageGenerations" />&gt;
  - name: >-
      streamChatCompletions(string, ChatRequestMessageUnion[],
      GetChatCompletionsOptions)
    uid: '@azure/openai.OpenAIClient.streamChatCompletions'
    package: '@azure/openai'
    summary: >-
      Lists the chat completions tokens as they become available for a chat
      context.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function streamChatCompletions(deploymentName: string, messages:
        ChatRequestMessageUnion[], options?: GetChatCompletionsOptions):
        Promise<EventStream<ChatCompletions>>
      parameters:
        - id: deploymentName
          type: string
          description: >-
            The name of the model deployment (when using Azure OpenAI) or model
            name (when using non-Azure OpenAI) to use for this request.
        - id: messages
          type: <xref uid="@azure/openai.ChatRequestMessageUnion" />[]
          description: The chat context messages to use for this request.
        - id: options
          type: <xref uid="@azure/openai.GetChatCompletionsOptions" />
          description: The chat completions options for this chat completions request.
      return:
        description: An asynchronous iterable of chat completions tokens.
        type: >-
          Promise&lt;<xref uid="@azure/openai.EventStream" />&lt;<xref
          uid="@azure/openai.ChatCompletions" />&gt;&gt;
  - name: streamCompletions(string, string[], GetCompletionsOptions)
    uid: '@azure/openai.OpenAIClient.streamCompletions'
    package: '@azure/openai'
    summary: Lists the completions tokens as they become available for a given prompt.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function streamCompletions(deploymentName: string, prompt: string[],
        options?: GetCompletionsOptions): Promise<EventStream<Omit<Completions,
        "usage">>>
      parameters:
        - id: deploymentName
          type: string
          description: >-
            The name of the model deployment (when using Azure OpenAI) or model
            name (when using non-Azure OpenAI) to use for this request.
        - id: prompt
          type: string[]
          description: The prompt to use for this request.
        - id: options
          type: <xref uid="@azure/openai.GetCompletionsOptions" />
          description: The completions options for this completions request.
      return:
        description: An asynchronous iterable of completions tokens.
        type: >-
          Promise&lt;<xref uid="@azure/openai.EventStream" />&lt;Omit&lt;<xref
          uid="@azure/openai.Completions" />, "usage"&gt;&gt;&gt;
