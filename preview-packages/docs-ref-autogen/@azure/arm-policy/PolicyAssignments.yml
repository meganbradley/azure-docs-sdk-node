### YamlMime:TSType
name: PolicyAssignments
uid: '@azure/arm-policy.PolicyAssignments'
package: '@azure/arm-policy'
summary: Interface representing a PolicyAssignments.
fullName: PolicyAssignments
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: >-
      create(string, string, PolicyAssignment,
      PolicyAssignmentsCreateOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.create'
    package: '@azure/arm-policy'
    summary: >-
      This operation creates or updates a policy assignment with the given scope
      and name. Policy

      assignments apply to all resources contained within their scope. For
      example, when you assign a

      policy at resource group scope, that policy applies to all resources in
      the group.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(scope: string, policyAssignmentName: string, parameters:
        PolicyAssignment, options?: PolicyAssignmentsCreateOptionalParams):
        Promise<PolicyAssignment>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:
                         '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         '/subscriptions/{subscriptionId}'), resource group (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment.
        - id: parameters
          type: <xref uid="@azure/arm-policy.PolicyAssignment" />
          description: Parameters for the policy assignment.
        - id: options
          type: >-
            <xref uid="@azure/arm-policy.PolicyAssignmentsCreateOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-policy.PolicyAssignment" />&gt;
  - name: >-
      createById(string, PolicyAssignment,
      PolicyAssignmentsCreateByIdOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.createById'
    package: '@azure/arm-policy'
    summary: >-
      This operation creates or updates the policy assignment with the given ID.
      Policy assignments made

      on a scope apply to all resources contained in that scope. For example,
      when you assign a policy to

      a resource group that policy applies to all resources in the group. Policy
      assignment IDs have this

      format:
      '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
      Valid

      scopes are: management group (format:

      '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
      subscription (format:

      '/subscriptions/{subscriptionId}'), resource group (format:

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
      resource (format:

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createById(policyAssignmentId: string, parameters:
        PolicyAssignment, options?: PolicyAssignmentsCreateByIdOptionalParams):
        Promise<PolicyAssignment>
      parameters:
        - id: policyAssignmentId
          type: string
          description: |-
            The ID of the policy assignment to create. Use the format
                                      '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: parameters
          type: <xref uid="@azure/arm-policy.PolicyAssignment" />
          description: Parameters for policy assignment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-policy.PolicyAssignmentsCreateByIdOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-policy.PolicyAssignment" />&gt;
  - name: delete(string, string, PolicyAssignmentsDeleteOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.delete'
    package: '@azure/arm-policy'
    summary: >-
      This operation deletes a policy assignment, given its name and the scope
      it was created in. The

      scope of a policy assignment is the part of its ID preceding

      '/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function delete(scope: string, policyAssignmentName: string, options?:
        PolicyAssignmentsDeleteOptionalParams): Promise<PolicyAssignment>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:
                         '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         '/subscriptions/{subscriptionId}'), resource group (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment to delete.
        - id: options
          type: >-
            <xref uid="@azure/arm-policy.PolicyAssignmentsDeleteOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-policy.PolicyAssignment" />&gt;
  - name: deleteById(string, PolicyAssignmentsDeleteByIdOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.deleteById'
    package: '@azure/arm-policy'
    summary: >-
      This operation deletes the policy with the given ID. Policy assignment IDs
      have this format:

      '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
      Valid formats

      for {scope} are:
      '/providers/Microsoft.Management/managementGroups/{managementGroup}'
      (management

      group), '/subscriptions/{subscriptionId}' (subscription),

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}'
      (resource group), or

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'

      (resource).
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteById(policyAssignmentId: string, options?:
        PolicyAssignmentsDeleteByIdOptionalParams): Promise<PolicyAssignment>
      parameters:
        - id: policyAssignmentId
          type: string
          description: |-
            The ID of the policy assignment to delete. Use the format
                                      '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-policy.PolicyAssignmentsDeleteByIdOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-policy.PolicyAssignment" />&gt;
  - name: get(string, string, PolicyAssignmentsGetOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.get'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves a single policy assignment, given its name and
      the scope it was created at.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(scope: string, policyAssignmentName: string, options?:
        PolicyAssignmentsGetOptionalParams): Promise<PolicyAssignment>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:
                         '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         '/subscriptions/{subscriptionId}'), resource group (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment to get.
        - id: options
          type: <xref uid="@azure/arm-policy.PolicyAssignmentsGetOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-policy.PolicyAssignment" />&gt;
  - name: getById(string, PolicyAssignmentsGetByIdOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.getById'
    package: '@azure/arm-policy'
    summary: >-
      The operation retrieves the policy assignment with the given ID. Policy
      assignment IDs have this

      format:
      '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
      Valid

      scopes are: management group (format:

      '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
      subscription (format:

      '/subscriptions/{subscriptionId}'), resource group (format:

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
      resource (format:

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getById(policyAssignmentId: string, options?:
        PolicyAssignmentsGetByIdOptionalParams): Promise<PolicyAssignment>
      parameters:
        - id: policyAssignmentId
          type: string
          description: |-
            The ID of the policy assignment to get. Use the format
                                      '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: options
          type: >-
            <xref uid="@azure/arm-policy.PolicyAssignmentsGetByIdOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-policy.PolicyAssignment" />&gt;
  - name: list(PolicyAssignmentsListOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.list'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy assignments associated
      with the given subscription

      that match the optional given $filter. Valid values for $filter are:
      'atScope()', 'atExactScope()'

      or 'policyDefinitionId eq '{value}''. If $filter is not provided, the
      unfiltered list includes all

      policy assignments associated with the subscription, including those that
      apply directly or from

      management groups that contain the given subscription, as well as any
      applied to objects contained

      within the subscription. If $filter=atScope() is provided, the returned
      list includes all policy

      assignments that apply to the subscription, which is everything in the
      unfiltered list except those

      applied to objects contained within the subscription. If
      $filter=atExactScope() is provided, the

      returned list only includes all policy assignments that at the
      subscription. If

      $filter=policyDefinitionId eq '{value}' is provided, the returned list
      includes all policy

      assignments of the policy definition whose id is {value}.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function list(options?: PolicyAssignmentsListOptionalParams):
        PagedAsyncIterableIterator<PolicyAssignment, PolicyAssignment[],
        PageSettings>
      parameters:
        - id: options
          type: <xref uid="@azure/arm-policy.PolicyAssignmentsListOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-policy.PolicyAssignment" />, <xref
          uid="@azure/arm-policy.PolicyAssignment" />[], PageSettings&gt;
  - name: >-
      listForManagementGroup(string,
      PolicyAssignmentsListForManagementGroupOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.listForManagementGroup'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy assignments applicable to
      the management group that

      match the given $filter. Valid values for $filter are: 'atScope()',
      'atExactScope()' or

      'policyDefinitionId eq '{value}''. If $filter=atScope() is provided, the
      returned list includes all

      policy assignments that are assigned to the management group or the
      management group's ancestors. If

      $filter=atExactScope() is provided, the returned list only includes all
      policy assignments that at

      the management group. If $filter=policyDefinitionId eq '{value}' is
      provided, the returned list

      includes all policy assignments of the policy definition whose id is
      {value} that apply to the

      management group.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listForManagementGroup(managementGroupId: string, options?:
        PolicyAssignmentsListForManagementGroupOptionalParams):
        PagedAsyncIterableIterator<PolicyAssignment, PolicyAssignment[],
        PageSettings>
      parameters:
        - id: managementGroupId
          type: string
          description: The ID of the management group.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-policy.PolicyAssignmentsListForManagementGroupOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-policy.PolicyAssignment" />, <xref
          uid="@azure/arm-policy.PolicyAssignment" />[], PageSettings&gt;
  - name: >-
      listForResource(string, string, string, string, string,
      PolicyAssignmentsListForResourceOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.listForResource'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy assignments associated
      with the specified resource

      in the given resource group and subscription that match the optional given
      $filter. Valid values for

      $filter are: 'atScope()', 'atExactScope()' or 'policyDefinitionId eq
      '{value}''. If $filter is not

      provided, the unfiltered list includes all policy assignments associated
      with the resource,

      including those that apply directly or from all containing scopes, as well
      as any applied to

      resources contained within the resource. If $filter=atScope() is provided,
      the returned list

      includes all policy assignments that apply to the resource, which is
      everything in the unfiltered

      list except those applied to resources contained within the resource. If
      $filter=atExactScope() is

      provided, the returned list only includes all policy assignments that at
      the resource level. If

      $filter=policyDefinitionId eq '{value}' is provided, the returned list
      includes all policy

      assignments of the policy definition whose id is {value} that apply to the
      resource. Three

      parameters plus the resource name are used to identify a specific
      resource. If the resource is not

      part of a parent resource (the more common case), the parent resource path
      should not be provided

      (or provided as ''). For example a web app could be specified as
      ({resourceProviderNamespace} ==

      'Microsoft.Web', {parentResourcePath} == '', {resourceType} == 'sites',
      {resourceName} ==

      'MyWebApp'). If the resource is part of a parent resource, then all
      parameters should be provided.

      For example a virtual machine DNS name could be specified as
      ({resourceProviderNamespace} ==

      'Microsoft.Compute', {parentResourcePath} ==
      'virtualMachines/MyVirtualMachine', {resourceType} ==

      'domainNames', {resourceName} == 'MyComputerName'). A convenient
      alternative to providing the

      namespace and type name separately is to provide both in the
      {resourceType} parameter, format:

      ({resourceProviderNamespace} == '', {parentResourcePath} == '',
      {resourceType} ==

      'Microsoft.Web/sites', {resourceName} == 'MyWebApp').
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listForResource(resourceGroupName: string,
        resourceProviderNamespace: string, parentResourcePath: string,
        resourceType: string, resourceName: string, options?:
        PolicyAssignmentsListForResourceOptionalParams):
        PagedAsyncIterableIterator<PolicyAssignment, PolicyAssignment[],
        PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group containing the resource.
        - id: resourceProviderNamespace
          type: string
          description: |-
            The namespace of the resource provider. For example, the namespace
                                             of a virtual machine is Microsoft.Compute (from Microsoft.Compute/virtualMachines)
        - id: parentResourcePath
          type: string
          description: The parent resource path. Use empty string if there is none.
        - id: resourceType
          type: string
          description: >-
            The resource type name. For example the type name of a web app is
            'sites' (from
                                Microsoft.Web/sites).
        - id: resourceName
          type: string
          description: The name of the resource.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-policy.PolicyAssignmentsListForResourceOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-policy.PolicyAssignment" />, <xref
          uid="@azure/arm-policy.PolicyAssignment" />[], PageSettings&gt;
  - name: >-
      listForResourceGroup(string,
      PolicyAssignmentsListForResourceGroupOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.listForResourceGroup'
    package: '@azure/arm-policy'
    summary: >-
      This operation retrieves the list of all policy assignments associated
      with the given resource group

      in the given subscription that match the optional given $filter. Valid
      values for $filter are:

      'atScope()', 'atExactScope()' or 'policyDefinitionId eq '{value}''. If
      $filter is not provided, the

      unfiltered list includes all policy assignments associated with the
      resource group, including those

      that apply directly or apply from containing scopes, as well as any
      applied to resources contained

      within the resource group. If $filter=atScope() is provided, the returned
      list includes all policy

      assignments that apply to the resource group, which is everything in the
      unfiltered list except

      those applied to resources contained within the resource group. If
      $filter=atExactScope() is

      provided, the returned list only includes all policy assignments that at
      the resource group. If

      $filter=policyDefinitionId eq '{value}' is provided, the returned list
      includes all policy

      assignments of the policy definition whose id is {value} that apply to the
      resource group.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listForResourceGroup(resourceGroupName: string, options?:
        PolicyAssignmentsListForResourceGroupOptionalParams):
        PagedAsyncIterableIterator<PolicyAssignment, PolicyAssignment[],
        PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group that contains policy assignments.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-policy.PolicyAssignmentsListForResourceGroupOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          PagedAsyncIterableIterator&lt;<xref
          uid="@azure/arm-policy.PolicyAssignment" />, <xref
          uid="@azure/arm-policy.PolicyAssignment" />[], PageSettings&gt;
  - name: >-
      update(string, string, PolicyAssignmentUpdate,
      PolicyAssignmentsUpdateOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.update'
    package: '@azure/arm-policy'
    summary: >-
      This operation updates a policy assignment with the given scope and name.
      Policy assignments apply

      to all resources contained within their scope. For example, when you
      assign a policy at resource

      group scope, that policy applies to all resources in the group.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function update(scope: string, policyAssignmentName: string, parameters:
        PolicyAssignmentUpdate, options?:
        PolicyAssignmentsUpdateOptionalParams): Promise<PolicyAssignment>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the policy assignment. Valid scopes are: management
            group (format:
                         '/providers/Microsoft.Management/managementGroups/{managementGroup}'), subscription (format:
                         '/subscriptions/{subscriptionId}'), resource group (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: policyAssignmentName
          type: string
          description: The name of the policy assignment.
        - id: parameters
          type: <xref uid="@azure/arm-policy.PolicyAssignmentUpdate" />
          description: Parameters for policy assignment patch request.
        - id: options
          type: >-
            <xref uid="@azure/arm-policy.PolicyAssignmentsUpdateOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-policy.PolicyAssignment" />&gt;
  - name: >-
      updateById(string, PolicyAssignmentUpdate,
      PolicyAssignmentsUpdateByIdOptionalParams)
    uid: '@azure/arm-policy.PolicyAssignments.updateById'
    package: '@azure/arm-policy'
    summary: >-
      This operation updates the policy assignment with the given ID. Policy
      assignments made on a scope

      apply to all resources contained in that scope. For example, when you
      assign a policy to a resource

      group that policy applies to all resources in the group. Policy assignment
      IDs have this format:

      '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
      Valid scopes

      are: management group (format:

      '/providers/Microsoft.Management/managementGroups/{managementGroup}'),
      subscription (format:

      '/subscriptions/{subscriptionId}'), resource group (format:

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or
      resource (format:

      '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateById(policyAssignmentId: string, parameters:
        PolicyAssignmentUpdate, options?:
        PolicyAssignmentsUpdateByIdOptionalParams): Promise<PolicyAssignment>
      parameters:
        - id: policyAssignmentId
          type: string
          description: |-
            The ID of the policy assignment to update. Use the format
                                      '{scope}/providers/Microsoft.Authorization/policyAssignments/{policyAssignmentName}'.
        - id: parameters
          type: <xref uid="@azure/arm-policy.PolicyAssignmentUpdate" />
          description: Parameters for policy assignment patch request.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-policy.PolicyAssignmentsUpdateByIdOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-policy.PolicyAssignment" />&gt;
