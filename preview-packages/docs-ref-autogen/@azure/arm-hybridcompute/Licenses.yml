### YamlMime:TSType
name: Licenses
uid: '@azure/arm-hybridcompute.Licenses'
package: '@azure/arm-hybridcompute'
summary: Interface representing a Licenses.
fullName: Licenses
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: >-
      beginCreateOrUpdate(string, string, License,
      LicensesCreateOrUpdateOptionalParams)
    uid: '@azure/arm-hybridcompute.Licenses.beginCreateOrUpdate'
    package: '@azure/arm-hybridcompute'
    summary: The operation to create or update a license.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdate(resourceGroupName: string, licenseName:
        string, parameters: License, options?:
        LicensesCreateOrUpdateOptionalParams):
        Promise<SimplePollerLike<OperationState<License>, License>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: licenseName
          type: string
          description: The name of the license.
        - id: parameters
          type: <xref uid="@azure/arm-hybridcompute.License" />
          description: Parameters supplied to the Create license operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-hybridcompute.LicensesCreateOrUpdateOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-hybridcompute.License" />&gt;, <xref
          uid="@azure/arm-hybridcompute.License" />&gt;&gt;
  - name: >-
      beginCreateOrUpdateAndWait(string, string, License,
      LicensesCreateOrUpdateOptionalParams)
    uid: '@azure/arm-hybridcompute.Licenses.beginCreateOrUpdateAndWait'
    package: '@azure/arm-hybridcompute'
    summary: The operation to create or update a license.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateOrUpdateAndWait(resourceGroupName: string,
        licenseName: string, parameters: License, options?:
        LicensesCreateOrUpdateOptionalParams): Promise<License>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: licenseName
          type: string
          description: The name of the license.
        - id: parameters
          type: <xref uid="@azure/arm-hybridcompute.License" />
          description: Parameters supplied to the Create license operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-hybridcompute.LicensesCreateOrUpdateOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-hybridcompute.License" />&gt;
  - name: beginDelete(string, string, LicensesDeleteOptionalParams)
    uid: '@azure/arm-hybridcompute.Licenses.beginDelete'
    package: '@azure/arm-hybridcompute'
    summary: The operation to delete a license.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDelete(resourceGroupName: string, licenseName: string,
        options?: LicensesDeleteOptionalParams):
        Promise<SimplePollerLike<OperationState<void>, void>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: licenseName
          type: string
          description: The name of the license.
        - id: options
          type: <xref uid="@azure/arm-hybridcompute.LicensesDeleteOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;void&gt;, void&gt;&gt;
  - name: beginDeleteAndWait(string, string, LicensesDeleteOptionalParams)
    uid: '@azure/arm-hybridcompute.Licenses.beginDeleteAndWait'
    package: '@azure/arm-hybridcompute'
    summary: The operation to delete a license.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginDeleteAndWait(resourceGroupName: string, licenseName:
        string, options?: LicensesDeleteOptionalParams): Promise<void>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: licenseName
          type: string
          description: The name of the license.
        - id: options
          type: <xref uid="@azure/arm-hybridcompute.LicensesDeleteOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: beginUpdate(string, string, LicenseUpdate, LicensesUpdateOptionalParams)
    uid: '@azure/arm-hybridcompute.Licenses.beginUpdate'
    package: '@azure/arm-hybridcompute'
    summary: The operation to update a license.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdate(resourceGroupName: string, licenseName: string,
        parameters: LicenseUpdate, options?: LicensesUpdateOptionalParams):
        Promise<SimplePollerLike<OperationState<License>, License>>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: licenseName
          type: string
          description: The name of the license.
        - id: parameters
          type: <xref uid="@azure/arm-hybridcompute.LicenseUpdate" />
          description: Parameters supplied to the Update license operation.
        - id: options
          type: <xref uid="@azure/arm-hybridcompute.LicensesUpdateOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-hybridcompute.License" />&gt;, <xref
          uid="@azure/arm-hybridcompute.License" />&gt;&gt;
  - name: >-
      beginUpdateAndWait(string, string, LicenseUpdate,
      LicensesUpdateOptionalParams)
    uid: '@azure/arm-hybridcompute.Licenses.beginUpdateAndWait'
    package: '@azure/arm-hybridcompute'
    summary: The operation to update a license.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateAndWait(resourceGroupName: string, licenseName:
        string, parameters: LicenseUpdate, options?:
        LicensesUpdateOptionalParams): Promise<License>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: licenseName
          type: string
          description: The name of the license.
        - id: parameters
          type: <xref uid="@azure/arm-hybridcompute.LicenseUpdate" />
          description: Parameters supplied to the Update license operation.
        - id: options
          type: <xref uid="@azure/arm-hybridcompute.LicensesUpdateOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-hybridcompute.License" />&gt;
  - name: beginValidateLicense(License, LicensesValidateLicenseOptionalParams)
    uid: '@azure/arm-hybridcompute.Licenses.beginValidateLicense'
    package: '@azure/arm-hybridcompute'
    summary: The operation to validate a license.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateLicense(parameters: License, options?:
        LicensesValidateLicenseOptionalParams):
        Promise<SimplePollerLike<OperationState<License>, License>>
      parameters:
        - id: parameters
          type: <xref uid="@azure/arm-hybridcompute.License" />
          description: Parameters supplied to the license validation operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-hybridcompute.LicensesValidateLicenseOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-hybridcompute.License" />&gt;, <xref
          uid="@azure/arm-hybridcompute.License" />&gt;&gt;
  - name: >-
      beginValidateLicenseAndWait(License,
      LicensesValidateLicenseOptionalParams)
    uid: '@azure/arm-hybridcompute.Licenses.beginValidateLicenseAndWait'
    package: '@azure/arm-hybridcompute'
    summary: The operation to validate a license.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginValidateLicenseAndWait(parameters: License, options?:
        LicensesValidateLicenseOptionalParams): Promise<License>
      parameters:
        - id: parameters
          type: <xref uid="@azure/arm-hybridcompute.License" />
          description: Parameters supplied to the license validation operation.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-hybridcompute.LicensesValidateLicenseOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-hybridcompute.License" />&gt;
  - name: get(string, string, LicensesGetOptionalParams)
    uid: '@azure/arm-hybridcompute.Licenses.get'
    package: '@azure/arm-hybridcompute'
    summary: Retrieves information about the view of a license.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(resourceGroupName: string, licenseName: string, options?:
        LicensesGetOptionalParams): Promise<License>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: licenseName
          type: string
          description: The name of the license.
        - id: options
          type: <xref uid="@azure/arm-hybridcompute.LicensesGetOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-hybridcompute.License" />&gt;
  - name: listByResourceGroup(string, LicensesListByResourceGroupOptionalParams)
    uid: '@azure/arm-hybridcompute.Licenses.listByResourceGroup'
    package: '@azure/arm-hybridcompute'
    summary: The operation to get all licenses of a non-Azure machine
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listByResourceGroup(resourceGroupName: string, options?:
        LicensesListByResourceGroupOptionalParams):
        PagedAsyncIterableIterator<License, License[], PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-hybridcompute.LicensesListByResourceGroupOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-hybridcompute.License" />, <xref
          uid="@azure/arm-hybridcompute.License" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: listBySubscription(LicensesListBySubscriptionOptionalParams)
    uid: '@azure/arm-hybridcompute.Licenses.listBySubscription'
    package: '@azure/arm-hybridcompute'
    summary: The operation to get all licenses of a non-Azure machine
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listBySubscription(options?:
        LicensesListBySubscriptionOptionalParams):
        PagedAsyncIterableIterator<License, License[], PageSettings>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/arm-hybridcompute.LicensesListBySubscriptionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-hybridcompute.License" />, <xref
          uid="@azure/arm-hybridcompute.License" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
