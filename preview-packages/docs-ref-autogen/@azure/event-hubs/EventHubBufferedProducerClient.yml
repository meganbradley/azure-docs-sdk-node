### YamlMime:TSType
name: EventHubBufferedProducerClient
uid: '@azure/event-hubs.EventHubBufferedProducerClient'
package: '@azure/event-hubs'
summary: >-
  The `EventHubBufferedProducerClient`is used to publish events to a specific
  Event Hub.


  The `EventHubBufferedProducerClient` does not publish events immediately.

  Instead, events are buffered so they can be efficiently batched and published

  when the batch is full or the `maxWaitTimeInMs` has elapsed with no new events

  enqueued.


  Depending on the options specified when events are enqueued, they may be

  automatically assigned to a partition, grouped according to the specified
  partition key,

  or assigned a specifically requested partition.


  This model is intended to shift the burden of batch management from callers,
  at the cost of

  non-deterministic timing, for when events will be published. There are
  additional trade-offs

  to consider, as well:

  - If the application crashes, events in the buffer will not have been
  published. To prevent
    data loss, callers are encouraged to track publishing progress using the
    `onSendEventsSuccessHandler` and `onSendEventsErrorHandler` handlers.
  - Events specifying a partition key may be assigned a different partition than
  those using
    the same key with other producers.
  - In the unlikely event that a partition becomes temporarily unavailable, the
    `EventHubBufferedProducerClient` may take longer to recover than other producers.

  In scenarios where it is important to have events published immediately with a
  deterministic

  outcome, ensure that partition keys are assigned to a partition consistent
  with other

  publishers, or where maximizing availability is a requirement, using the

  `EventHubProducerClient` is recommended.
fullName: EventHubBufferedProducerClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: >-
      EventHubBufferedProducerClient(string,
      EventHubBufferedProducerClientOptions)
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.constructor'
    package: '@azure/event-hubs'
    summary: >-
      The `EventHubBufferedProducerClient` class is used to send events to an
      Event Hub.

      Use the `options` parmeter to configure retry policy or proxy settings.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new EventHubBufferedProducerClient(connectionString: string, options:
        EventHubBufferedProducerClientOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            The connection string to use for connecting to the Event Hub
            instance.

            It is expected that the shared key properties and the Event Hub path
            are contained in this connection string.

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;EntityPath=my-event-hub-name'.
        - id: options
          type: >-
            <xref uid="@azure/event-hubs.EventHubBufferedProducerClientOptions"
            />
          description: >-
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
  - name: >-
      EventHubBufferedProducerClient(string, string,
      EventHubBufferedProducerClientOptions)
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.constructor_1'
    package: '@azure/event-hubs'
    summary: >-
      The `EventHubBufferedProducerClient` class is used to send events to an
      Event Hub.

      Use the `options` parmeter to configure retry policy or proxy settings.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new EventHubBufferedProducerClient(connectionString: string,
        eventHubName: string, options: EventHubBufferedProducerClientOptions)
      parameters:
        - id: connectionString
          type: string
          description: >-
            The connection string to use for connecting to the Event Hubs
            namespace.

            It is expected that the shared key properties are contained in this
            connection string, but not the Event Hub path,

            e.g.
            'Endpoint=sb://my-servicebus-namespace.servicebus.windows.net/;SharedAccessKeyName=my-SA-name;SharedAccessKey=my-SA-key;'.
        - id: eventHubName
          type: string
          description: The name of the specific Event Hub to connect the client to.
        - id: options
          type: >-
            <xref uid="@azure/event-hubs.EventHubBufferedProducerClientOptions"
            />
          description: >-
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
  - name: >-
      EventHubBufferedProducerClient(string, string, TokenCredential |
      NamedKeyCredential | SASCredential, EventHubBufferedProducerClientOptions)
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.constructor_2'
    package: '@azure/event-hubs'
    summary: >-
      The `EventHubBufferedProducerClient` class is used to send events to an
      Event Hub.

      Use the `options` parmeter to configure retry policy or proxy settings.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new EventHubBufferedProducerClient(fullyQualifiedNamespace: string,
        eventHubName: string, credential: TokenCredential | NamedKeyCredential |
        SASCredential, options: EventHubBufferedProducerClientOptions)
      parameters:
        - id: fullyQualifiedNamespace
          type: string
          description: |-
            The full namespace which is likely to be similar to
            <yournamespace>.servicebus.windows.net
        - id: eventHubName
          type: string
          description: The name of the specific Event Hub to connect the client to.
        - id: credential
          type: >-
            <xref uid="@azure/event-hubs.TokenCredential" /> |
            NamedKeyCredential | SASCredential
          description: >-
            An credential object used by the client to get the token to
            authenticate the connection

            with the Azure Event Hubs service.

            See &commat;azure/identity for creating credentials that support AAD
            auth.

            Use the `AzureNamedKeyCredential` from &commat;azure/core-auth if
            you want to pass in a `SharedAccessKeyName`

            and `SharedAccessKey` without using a connection string. These
            fields map to the `name` and `key` field respectively

            in `AzureNamedKeyCredential`.

            Use the `AzureSASCredential` from &commat;azure/core-auth if you
            want to pass in a `SharedAccessSignature`

            without using a connection string. This field maps to `signature` in
            `AzureSASCredential`.
        - id: options
          type: >-
            <xref uid="@azure/event-hubs.EventHubBufferedProducerClientOptions"
            />
          description: >-
            A set of options to apply when configuring the client.

            - `retryOptions`   : Configures the retry policy for all the
            operations on the client.

            For example, `{ "maxRetries": 4 }` or `{ "maxRetries": 4,
            "retryDelayInMs": 30000 }`.

            - `webSocketOptions`: Configures the channelling of the AMQP
            connection over Web Sockets.

            - `userAgent`      : A string to append to the built in user agent
            string that is passed to the service.
properties:
  - name: eventHubName
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.eventHubName'
    package: '@azure/event-hubs'
    summary: The name of the Event Hub instance for which this client is created.
    fullName: eventHubName
    remarks: ''
    isDeprecated: false
    syntax:
      content: string eventHubName
      return:
        description: ''
        type: string
  - name: fullyQualifiedNamespace
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.fullyQualifiedNamespace'
    package: '@azure/event-hubs'
    summary: >-
      The fully qualified namespace of the Event Hub instance for which this
      client is created.

      This is likely to be similar to <yournamespace>.servicebus.windows.net.
    fullName: fullyQualifiedNamespace
    remarks: ''
    isDeprecated: false
    syntax:
      content: string fullyQualifiedNamespace
      return:
        description: ''
        type: string
  - name: identifier
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.identifier'
    package: '@azure/event-hubs'
    summary: |-
      The name used to identify this EventHubBufferedProducerClient.
      If not specified or empty, a random unique one will be generated.
    fullName: identifier
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'identifier: string'
      return:
        description: ''
        type: string
methods:
  - name: close(BufferedCloseOptions)
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.close'
    package: '@azure/event-hubs'
    summary: >-
      Closes the AMQP connection to the Event Hub instance,

      returning a promise that will be resolved when disconnection is completed.


      This will wait for enqueued events to be flushed to the service before
      closing

      the connection.

      To close without flushing, set the `flush` option to `false`.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function close(options?: BufferedCloseOptions): Promise<void>'
      parameters:
        - id: options
          type: <xref uid="@azure/event-hubs.BufferedCloseOptions" />
          description: The set of options to apply to the operation call.
      return:
        description: Promise<void>
        type: Promise&lt;void&gt;
  - name: enqueueEvent(EventData | AmqpAnnotatedMessage, EnqueueEventOptions)
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.enqueueEvent'
    package: '@azure/event-hubs'
    summary: >-
      Enqueues an event into the buffer to be published to the Event Hub.

      If there is no capacity in the buffer when this method is invoked,

      it will wait for space to become available and ensure that the event

      has been enqueued.


      When this call returns, the event has been accepted into the buffer,

      but it may not have been published yet.

      Publishing will take place at a nondeterministic point in the future as
      the buffer is processed.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enqueueEvent(event: EventData | AmqpAnnotatedMessage, options?:
        EnqueueEventOptions): Promise<number>
      parameters:
        - id: event
          type: <xref uid="@azure/event-hubs.EventData" /> | AmqpAnnotatedMessage
          description: ''
        - id: options
          type: <xref uid="@azure/event-hubs.EnqueueEventOptions" />
          description: >-
            A set of options that can be specified to influence the way in which

            the event is sent to the associated Event Hub.

            - `abortSignal`  : A signal used to cancel the enqueueEvent
            operation.

            - `partitionId`  : The partition this set of events will be sent to.
            If set, `partitionKey` can not be set.

            - `partitionKey` : A value that is hashed to produce a partition
            assignment. If set, `partitionId` can not be set.
      return:
        description: >-
          The total number of events that are currently buffered and waiting to
          be published, across all partitions.
        type: Promise&lt;number&gt;
  - name: enqueueEvents(EventData[] | AmqpAnnotatedMessage[], EnqueueEventOptions)
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.enqueueEvents'
    package: '@azure/event-hubs'
    summary: >-
      Enqueues events into the buffer to be published to the Event Hub.

      If there is no capacity in the buffer when this method is invoked,

      it will wait for space to become available and ensure that the events

      have been enqueued.


      When this call returns, the events have been accepted into the buffer,

      but it may not have been published yet.

      Publishing will take place at a nondeterministic point in the future as
      the buffer is processed.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function enqueueEvents(events: EventData[] | AmqpAnnotatedMessage[],
        options?: EnqueueEventOptions): Promise<number>
      parameters:
        - id: events
          type: >-
            <xref uid="@azure/event-hubs.EventData" />[] |
            AmqpAnnotatedMessage[]
          description: >-
            An array of [EventData](xref:@azure/event-hubs.EventData) or
            `AmqpAnnotatedMessage`.
        - id: options
          type: <xref uid="@azure/event-hubs.EnqueueEventOptions" />
          description: >-
            A set of options that can be specified to influence the way in which

            events are sent to the associated Event Hub.

            - `abortSignal`  : A signal used to cancel the enqueueEvents
            operation.

            - `partitionId`  : The partition this set of events will be sent to.
            If set, `partitionKey` can not be set.

            - `partitionKey` : A value that is hashed to produce a partition
            assignment. If set, `partitionId` can not be set.
      return:
        description: >-
          The total number of events that are currently buffered and waiting to
          be published, across all partitions.
        type: Promise&lt;number&gt;
  - name: flush(BufferedFlushOptions)
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.flush'
    package: '@azure/event-hubs'
    summary: |-
      Attempts to publish all events in the buffer immediately.
      This may result in multiple batches being published,
      the outcome of each of which will be individually reported by
      the `onSendEventsSuccessHandler` and `onSendEventsErrorHandler` handlers.
    remarks: ''
    isDeprecated: false
    syntax:
      content: 'function flush(options?: BufferedFlushOptions): Promise<void>'
      parameters:
        - id: options
          type: <xref uid="@azure/event-hubs.BufferedFlushOptions" />
          description: The set of options to apply to the operation call.
      return:
        description: ''
        type: Promise&lt;void&gt;
  - name: getEventHubProperties(GetEventHubPropertiesOptions)
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.getEventHubProperties'
    package: '@azure/event-hubs'
    summary: Provides the Event Hub runtime information.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getEventHubProperties(options?: GetEventHubPropertiesOptions):
        Promise<EventHubProperties>
      parameters:
        - id: options
          type: <xref uid="@azure/event-hubs.GetEventHubPropertiesOptions" />
          description: The set of options to apply to the operation call.
      return:
        description: A promise that resolves with information about the Event Hub instance.
        type: Promise&lt;<xref uid="@azure/event-hubs.EventHubProperties" />&gt;
  - name: getPartitionIds(GetPartitionIdsOptions)
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.getPartitionIds'
    package: '@azure/event-hubs'
    summary: Provides the id for each partition associated with the Event Hub.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionIds(options?: GetPartitionIdsOptions):
        Promise<string[]>
      parameters:
        - id: options
          type: <xref uid="@azure/event-hubs.GetPartitionIdsOptions" />
          description: The set of options to apply to the operation call.
      return:
        description: >-
          A promise that resolves with an Array of strings representing the id
          for

          each partition associated with the Event Hub.
        type: Promise&lt;string[]&gt;
  - name: getPartitionProperties(string, GetPartitionPropertiesOptions)
    uid: '@azure/event-hubs.EventHubBufferedProducerClient.getPartitionProperties'
    package: '@azure/event-hubs'
    summary: Provides information about the state of the specified partition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getPartitionProperties(partitionId: string, options?:
        GetPartitionPropertiesOptions): Promise<PartitionProperties>
      parameters:
        - id: partitionId
          type: string
          description: The id of the partition for which information is required.
        - id: options
          type: <xref uid="@azure/event-hubs.GetPartitionPropertiesOptions" />
          description: The set of options to apply to the operation call.
      return:
        description: >-
          A promise that resolves with information about the state of the
          partition .
        type: Promise&lt;<xref uid="@azure/event-hubs.PartitionProperties" />&gt;
