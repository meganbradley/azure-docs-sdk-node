### YamlMime:TSType
name: RoleAssignments
uid: '@azure/arm-authorization.RoleAssignments'
package: '@azure/arm-authorization'
summary: Interface representing a RoleAssignments.
fullName: RoleAssignments
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: >-
      create(string, string, RoleAssignmentCreateParameters,
      RoleAssignmentsCreateOptionalParams)
    uid: '@azure/arm-authorization.RoleAssignments.create'
    package: '@azure/arm-authorization'
    summary: Create or update a role assignment by scope and name.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function create(scope: string, roleAssignmentName: string, parameters:
        RoleAssignmentCreateParameters, options?:
        RoleAssignmentsCreateOptionalParams): Promise<RoleAssignment>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the operation or resource. Valid scopes are:
            subscription (format:
                         '/subscriptions/{subscriptionId}'), resource group (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: roleAssignmentName
          type: string
          description: The name of the role assignment. It can be any valid GUID.
        - id: parameters
          type: >-
            <xref uid="@azure/arm-authorization.RoleAssignmentCreateParameters"
            />
          description: Parameters for the role assignment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-authorization.RoleAssignmentsCreateOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-authorization.RoleAssignment" />&gt;
  - name: >-
      createById(string, RoleAssignmentCreateParameters,
      RoleAssignmentsCreateByIdOptionalParams)
    uid: '@azure/arm-authorization.RoleAssignments.createById'
    package: '@azure/arm-authorization'
    summary: Create or update a role assignment by ID.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createById(roleAssignmentId: string, parameters:
        RoleAssignmentCreateParameters, options?:
        RoleAssignmentsCreateByIdOptionalParams): Promise<RoleAssignment>
      parameters:
        - id: roleAssignmentId
          type: string
          description: >-
            The fully qualified ID of the role assignment including scope,
            resource
                                    name, and resource type. Format:
                                    /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example:
                                    /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>
        - id: parameters
          type: >-
            <xref uid="@azure/arm-authorization.RoleAssignmentCreateParameters"
            />
          description: Parameters for the role assignment.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-authorization.RoleAssignmentsCreateByIdOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-authorization.RoleAssignment" />&gt;
  - name: delete(string, string, RoleAssignmentsDeleteOptionalParams)
    uid: '@azure/arm-authorization.RoleAssignments.delete'
    package: '@azure/arm-authorization'
    summary: Delete a role assignment by scope and name.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function delete(scope: string, roleAssignmentName: string, options?:
        RoleAssignmentsDeleteOptionalParams): Promise<RoleAssignment>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the operation or resource. Valid scopes are:
            subscription (format:
                         '/subscriptions/{subscriptionId}'), resource group (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: roleAssignmentName
          type: string
          description: The name of the role assignment. It can be any valid GUID.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-authorization.RoleAssignmentsDeleteOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-authorization.RoleAssignment" />&gt;
  - name: deleteById(string, RoleAssignmentsDeleteByIdOptionalParams)
    uid: '@azure/arm-authorization.RoleAssignments.deleteById'
    package: '@azure/arm-authorization'
    summary: Delete a role assignment by ID.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteById(roleAssignmentId: string, options?:
        RoleAssignmentsDeleteByIdOptionalParams): Promise<RoleAssignment>
      parameters:
        - id: roleAssignmentId
          type: string
          description: >-
            The fully qualified ID of the role assignment including scope,
            resource
                                    name, and resource type. Format:
                                    /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example:
                                    /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>
        - id: options
          type: >-
            <xref
            uid="@azure/arm-authorization.RoleAssignmentsDeleteByIdOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-authorization.RoleAssignment" />&gt;
  - name: get(string, string, RoleAssignmentsGetOptionalParams)
    uid: '@azure/arm-authorization.RoleAssignments.get'
    package: '@azure/arm-authorization'
    summary: Get a role assignment by scope and name.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(scope: string, roleAssignmentName: string, options?:
        RoleAssignmentsGetOptionalParams): Promise<RoleAssignment>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the operation or resource. Valid scopes are:
            subscription (format:
                         '/subscriptions/{subscriptionId}'), resource group (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: roleAssignmentName
          type: string
          description: The name of the role assignment. It can be any valid GUID.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-authorization.RoleAssignmentsGetOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-authorization.RoleAssignment" />&gt;
  - name: getById(string, RoleAssignmentsGetByIdOptionalParams)
    uid: '@azure/arm-authorization.RoleAssignments.getById'
    package: '@azure/arm-authorization'
    summary: Get a role assignment by ID.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getById(roleAssignmentId: string, options?:
        RoleAssignmentsGetByIdOptionalParams): Promise<RoleAssignment>
      parameters:
        - id: roleAssignmentId
          type: string
          description: >-
            The fully qualified ID of the role assignment including scope,
            resource
                                    name, and resource type. Format:
                                    /{scope}/providers/Microsoft.Authorization/roleAssignments/{roleAssignmentName}. Example:
                                    /subscriptions/<SUB_ID>/resourcegroups/<RESOURCE_GROUP>/providers/Microsoft.Authorization/roleAssignments/<ROLE_ASSIGNMENT_NAME>
        - id: options
          type: >-
            <xref
            uid="@azure/arm-authorization.RoleAssignmentsGetByIdOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-authorization.RoleAssignment" />&gt;
  - name: >-
      listForResource(string, string, string, string,
      RoleAssignmentsListForResourceOptionalParams)
    uid: '@azure/arm-authorization.RoleAssignments.listForResource'
    package: '@azure/arm-authorization'
    summary: List all role assignments that apply to a resource.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listForResource(resourceGroupName: string,
        resourceProviderNamespace: string, resourceType: string, resourceName:
        string, options?: RoleAssignmentsListForResourceOptionalParams):
        PagedAsyncIterableIterator<RoleAssignment, RoleAssignment[],
        PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: resourceProviderNamespace
          type: string
          description: The namespace of the resource provider.
        - id: resourceType
          type: string
          description: >-
            The resource type name. For example the type name of a web app is
            'sites' (from
                                Microsoft.Web/sites).
        - id: resourceName
          type: string
          description: The resource name.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-authorization.RoleAssignmentsListForResourceOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-authorization.RoleAssignment" />, <xref
          uid="@azure/arm-authorization.RoleAssignment" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      listForResourceGroup(string,
      RoleAssignmentsListForResourceGroupOptionalParams)
    uid: '@azure/arm-authorization.RoleAssignments.listForResourceGroup'
    package: '@azure/arm-authorization'
    summary: List all role assignments that apply to a resource group.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listForResourceGroup(resourceGroupName: string, options?:
        RoleAssignmentsListForResourceGroupOptionalParams):
        PagedAsyncIterableIterator<RoleAssignment, RoleAssignment[],
        PageSettings>
      parameters:
        - id: resourceGroupName
          type: string
          description: The name of the resource group. The name is case insensitive.
        - id: options
          type: >-
            <xref
            uid="@azure/arm-authorization.RoleAssignmentsListForResourceGroupOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-authorization.RoleAssignment" />, <xref
          uid="@azure/arm-authorization.RoleAssignment" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: listForScope(string, RoleAssignmentsListForScopeOptionalParams)
    uid: '@azure/arm-authorization.RoleAssignments.listForScope'
    package: '@azure/arm-authorization'
    summary: List all role assignments that apply to a scope.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listForScope(scope: string, options?:
        RoleAssignmentsListForScopeOptionalParams):
        PagedAsyncIterableIterator<RoleAssignment, RoleAssignment[],
        PageSettings>
      parameters:
        - id: scope
          type: string
          description: >-
            The scope of the operation or resource. Valid scopes are:
            subscription (format:
                         '/subscriptions/{subscriptionId}'), resource group (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}', or resource (format:
                         '/subscriptions/{subscriptionId}/resourceGroups/{resourceGroupName}/providers/{resourceProviderNamespace}/[{parentResourcePath}/]{resourceType}/{resourceName}'
        - id: options
          type: >-
            <xref
            uid="@azure/arm-authorization.RoleAssignmentsListForScopeOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-authorization.RoleAssignment" />, <xref
          uid="@azure/arm-authorization.RoleAssignment" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: listForSubscription(RoleAssignmentsListForSubscriptionOptionalParams)
    uid: '@azure/arm-authorization.RoleAssignments.listForSubscription'
    package: '@azure/arm-authorization'
    summary: List all role assignments that apply to a subscription.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listForSubscription(options?:
        RoleAssignmentsListForSubscriptionOptionalParams):
        PagedAsyncIterableIterator<RoleAssignment, RoleAssignment[],
        PageSettings>
      parameters:
        - id: options
          type: >-
            <xref
            uid="@azure/arm-authorization.RoleAssignmentsListForSubscriptionOptionalParams"
            />
          description: The options parameters.
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/arm-authorization.RoleAssignment" />, <xref
          uid="@azure/arm-authorization.RoleAssignment" />[], <xref
          uid="@azure/core-paging.PageSettings" />&gt;
