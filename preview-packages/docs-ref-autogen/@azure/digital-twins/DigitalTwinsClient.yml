### YamlMime:TSType
name: DigitalTwinsClient
uid: '@azure/digital-twins.DigitalTwinsClient'
package: '@azure/digital-twins'
summary: Client for Azure IoT DigitalTwins API.
fullName: DigitalTwinsClient
remarks: ''
isDeprecated: false
type: class
constructors:
  - name: DigitalTwinsClient(string, TokenCredential, DigitalTwinsClientOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.constructor'
    package: '@azure/digital-twins'
    summary: >-
      Creates an instance of AzureDigitalTwinsAPI.


      Example usage:

      ```ts

      const { DigitalTwinsClient, ServiceClientCredentials } =
      require("@azure/digital-twins");


      const client = new DigitalTwinsClient(
        "<endpoint>",
        new DefaultAzureCredential();
      );

      ```
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        new DigitalTwinsClient(endpointUrl: string, credential: TokenCredential,
        options?: DigitalTwinsClientOptions)
      parameters:
        - id: endpointUrl
          type: string
          description: The endpoint URL of the service.
        - id: credential
          type: <xref uid="@azure/core-auth.TokenCredential" />
          description: Used to authenticate requests to the service.
        - id: options
          type: <xref uid="@azure/digital-twins.DigitalTwinsClientOptions" />
          description: Used to configure the service client.
methods:
  - name: createModels(any[], OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.createModels'
    package: '@azure/digital-twins'
    summary: Create one or many
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function createModels(models: any[], options?: OperationOptions):
        Promise<DigitalTwinModelsAddResponse>
      parameters:
        - id: models
          type: any[]
          description: >-
            The set of models to create. Each string corresponds to exactly one
            model.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The created application/json models and the http response.
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins.DigitalTwinModelsAddResponse" />&gt;
  - name: decomissionModel(string, any[], OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.decomissionModel'
    package: '@azure/digital-twins'
    summary: Decommission a model using a json patch.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function decomissionModel(modelId: string, updateModel: any[], options?:
        OperationOptions): Promise<RestResponse>
      parameters:
        - id: modelId
          type: string
          description: The Id of the model to decommission.
        - id: updateModel
          type: any[]
          description: >-
            An update specification described by JSON Patch. Only the
            decommissioned

            property can be replaced.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The http response.
        type: Promise&lt;<xref uid="@azure/core-http.RestResponse" />&gt;
  - name: deleteDigitalTwin(string, string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.deleteDigitalTwin'
    package: '@azure/digital-twins'
    summary: Delete a digital twin
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteDigitalTwin(digitalTwinId: string, etag?: string,
        options?: OperationOptions): Promise<RestResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to delete.
        - id: etag
          type: string
          description: >-
            Only perform the operation if the entity's etag matches one of the
            etags provided or * is

            provided
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The http response.
        type: Promise&lt;<xref uid="@azure/core-http.RestResponse" />&gt;
  - name: deleteEventRoute(string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.deleteEventRoute'
    package: '@azure/digital-twins'
    summary: Delete an event route.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteEventRoute(eventRouteId: string, options?:
        OperationOptions): Promise<RestResponse>
      parameters:
        - id: eventRouteId
          type: string
          description: The Id of the model to delete.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The http response.
        type: Promise&lt;<xref uid="@azure/core-http.RestResponse" />&gt;
  - name: deleteModel(string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.deleteModel'
    package: '@azure/digital-twins'
    summary: Delete a model.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteModel(modelId: string, options?: OperationOptions):
        Promise<RestResponse>
      parameters:
        - id: modelId
          type: string
          description: The Id of the model to delete.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The http response.
        type: Promise&lt;<xref uid="@azure/core-http.RestResponse" />&gt;
  - name: deleteRelationship(string, string, string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.deleteRelationship'
    package: '@azure/digital-twins'
    summary: Delete a relationship on a digital twin.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function deleteRelationship(digitalTwinId: string, relationshipId:
        string, etag?: string, options?: OperationOptions):
        Promise<RestResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the source digital twin.
        - id: relationshipId
          type: string
          description: The Id of the relationship to delete.
        - id: etag
          type: string
          description: >-
            Only perform the operation if the entity's etag matches one of the
            etags provided or * is
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The http response.
        type: Promise&lt;<xref uid="@azure/core-http.RestResponse" />&gt;
  - name: getComponent(string, string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.getComponent'
    package: '@azure/digital-twins'
    summary: Get a component on a digital twin.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getComponent(digitalTwinId: string, componentPath: string,
        options?: OperationOptions): Promise<DigitalTwinsGetComponentResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: componentPath
          type: string
          description: The component being retrieved.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: >-
          Json string representation of the component corresponding to the
          provided componentPath and the HTTP response.
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins.DigitalTwinsGetComponentResponse" />&gt;
  - name: getDigitalTwin(string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.getDigitalTwin'
    package: '@azure/digital-twins'
    summary: Get a digital twin
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getDigitalTwin(digitalTwinId: string, options?:
        OperationOptions): Promise<DigitalTwinsGetByIdResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The application/json digital twin and the http response.
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins.DigitalTwinsGetByIdResponse" />&gt;
  - name: getEventRoute(string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.getEventRoute'
    package: '@azure/digital-twins'
    summary: Get an event route.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getEventRoute(eventRouteId: string, options?:
        OperationOptions): Promise<EventRoutesGetByIdResponse>
      parameters:
        - id: eventRouteId
          type: string
          description: ''
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The application/json event route and the http response.
        type: >-
          Promise&lt;<xref uid="@azure/digital-twins.EventRoutesGetByIdResponse"
          />&gt;
  - name: getModel(string, boolean, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.getModel'
    package: '@azure/digital-twins'
    summary: Get a model, including the model metadata and the model definition.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getModel(modelId: string, includeModelDefinition?: boolean,
        options?: OperationOptions): Promise<DigitalTwinModelsGetByIdResponse>
      parameters:
        - id: modelId
          type: string
          description: The Id of the model.
        - id: includeModelDefinition
          type: boolean
          description: >-
            When true the model definition will be returned as part of the
            result. Default value: false.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The application/json model and the http response.
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins.DigitalTwinModelsGetByIdResponse" />&gt;
  - name: getRelationship(string, string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.getRelationship'
    package: '@azure/digital-twins'
    summary: Get a relationship on a digital twin.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function getRelationship(digitalTwinId: string, relationshipId: string,
        options?: OperationOptions): Promise<DigitalTwinsGetByIdResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the source digital twin.
        - id: relationshipId
          type: string
          description: The Id of the relationship to retrieve.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: >-
          The pageable list of application/json relationships belonging to the
          specified digital twin and the http response.
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins.DigitalTwinsGetByIdResponse" />&gt;
  - name: listEventRoutes(number)
    uid: '@azure/digital-twins.DigitalTwinsClient.listEventRoutes'
    package: '@azure/digital-twins'
    summary: List the event routes in a digital twins instance.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listEventRoutes(maxItemCount?: number):
        PagedAsyncIterableIterator<EventRoute, EventRoutesListNextResponse,
        PageSettings>
      parameters:
        - id: maxItemCount
          type: number
          description: >-
            The maximum number of items to retrieve per request. The server may
            choose to return less than

            the requested max. Default value: -1.
      return:
        description: The application/json event route and the http response.
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/digital-twins.EventRoute" />, <xref
          uid="@azure/digital-twins.EventRoutesListNextResponse" />, <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: listIncomingRelationships(string, RequestOptionsBase & PageSettings)
    uid: '@azure/digital-twins.DigitalTwinsClient.listIncomingRelationships'
    package: '@azure/digital-twins'
    summary: Retrieve all incoming relationships for a digital twin.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listIncomingRelationships(digitalTwinId: string, options?:
        RequestOptionsBase & PageSettings):
        PagedAsyncIterableIterator<IncomingRelationship,
        DigitalTwinsListIncomingRelationshipsResponse, PageSettings>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: options
          type: >-
            <xref uid="@azure/core-http.RequestOptionsBase" /> & <xref
            uid="@azure/core-paging.PageSettings" />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/digital-twins.IncomingRelationship" />, <xref
          uid="@azure/digital-twins.DigitalTwinsListIncomingRelationshipsResponse"
          />, <xref uid="@azure/core-paging.PageSettings" />&gt;
  - name: listModels(string[], boolean, number)
    uid: '@azure/digital-twins.DigitalTwinsClient.listModels'
    package: '@azure/digital-twins'
    summary: Get the list of models
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listModels(dependeciesFor?: string[], includeModelDefinition?:
        boolean, maxItemCount?: number): PagedAsyncIterableIterator<ModelData,
        DigitalTwinModelsListResponse, PageSettings>
      parameters:
        - id: dependeciesFor
          type: string[]
          description: >-
            The model Ids to have dependencies retrieved. If omitted, all models
            are retrieved.
        - id: includeModelDefinition
          type: boolean
          description: >-
            Whether to include the model definition in the result. If false,
            only the model metadata will be returned.
        - id: maxItemCount
          type: number
          description: >-
            The maximum number of items to retrieve per request. The server may
            choose to return less than the requested max. Default value: -1.
      return:
        description: A pageable set of application/json models and the http response.
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;<xref
          uid="@azure/digital-twins.ModelData" />, <xref
          uid="@azure/digital-twins.DigitalTwinModelsListResponse" />, <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: listRelationships(string, RequestOptionsBase & PageSettings)
    uid: '@azure/digital-twins.DigitalTwinsClient.listRelationships'
    package: '@azure/digital-twins'
    summary: Retrieve relationships for a digital twin.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function listRelationships(digitalTwinId: string, options?:
        RequestOptionsBase & PageSettings): PagedAsyncIterableIterator<any,
        DigitalTwinsListRelationshipsResponse, PageSettings>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: options
          type: >-
            <xref uid="@azure/core-http.RequestOptionsBase" /> & <xref
            uid="@azure/core-paging.PageSettings" />
          description: ''
      return:
        description: ''
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;any,
          <xref uid="@azure/digital-twins.DigitalTwinsListRelationshipsResponse"
          />, <xref uid="@azure/core-paging.PageSettings" />&gt;
  - name: >-
      publishComponentTelemetry(string, string, string, string,
      OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.publishComponentTelemetry'
    package: '@azure/digital-twins'
    summary: >-
      Publish telemetry from a digital twin's component, which is then consumed
      by one or many destination endpoints (subscribers) defined under.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function publishComponentTelemetry(digitalTwinId: string, componentPath:
        string, payload: string, messageId?: string, options?:
        OperationOptions): Promise<RestResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to delete.
        - id: componentPath
          type: string
          description: The name of the DTDL component.
        - id: payload
          type: string
          description: The application/json telemetry payload to be sent.
        - id: messageId
          type: string
          description: The message Id.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The http response.
        type: Promise&lt;<xref uid="@azure/core-http.RestResponse" />&gt;
  - name: publishTelemetry(string, any, string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.publishTelemetry'
    package: '@azure/digital-twins'
    summary: >-
      Publish telemetry from a digital twin, which is then consumed by one or
      many destination endpoints (subscribers) defined under.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function publishTelemetry(digitalTwinId: string, payload: any,
        messageId?: string, options?: OperationOptions): Promise<RestResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to delete.
        - id: payload
          type: any
          description: The application/json telemetry payload to be sent.
        - id: messageId
          type: string
          description: The message Id.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The http response.
        type: Promise&lt;<xref uid="@azure/core-http.RestResponse" />&gt;
  - name: queryTwins(string)
    uid: '@azure/digital-twins.DigitalTwinsClient.queryTwins'
    package: '@azure/digital-twins'
    summary: Query for digital twins.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function queryTwins(query?: string): PagedAsyncIterableIterator<any,
        QueryQueryTwinsResponse, PageSettings>
      parameters:
        - id: query
          type: string
          description: The query string, in SQL-like syntax.
      return:
        description: The pageable list of query results.
        type: >-
          <xref uid="@azure/core-paging.PagedAsyncIterableIterator" />&lt;any,
          <xref uid="@azure/digital-twins.QueryQueryTwinsResponse" />, <xref
          uid="@azure/core-paging.PageSettings" />&gt;
  - name: updateComponent(string, string, any[], string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.updateComponent'
    package: '@azure/digital-twins'
    summary: Update properties of a component on a digital twin using a JSON patch.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateComponent(digitalTwinId: string, componentPath: string,
        componentPatch?: any[], etag?: string, options?: OperationOptions):
        Promise<DigitalTwinsUpdateComponentResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: componentPath
          type: string
          description: The component being updated.
        - id: componentPatch
          type: any[]
          description: >-
            The application/json-patch+json operations to be performed on the
            specified digital twin's component.
        - id: etag
          type: string
          description: >-
            The etag of the component to update. Only perform the operation if
            the entity's etag matches one of the etags provided or * is
            provided.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The http response.
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins.DigitalTwinsUpdateComponentResponse" />&gt;
  - name: updateDigitalTwin(string, any, string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.updateDigitalTwin'
    package: '@azure/digital-twins'
    summary: Update a digital twin using a json patch.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateDigitalTwin(digitalTwinId: string, twinPatch: any, etag?:
        string, options?: OperationOptions): Promise<DigitalTwinsUpdateResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin.
        - id: twinPatch
          type: any
          description: >-
            An update specification described by JSON Patch. Updates to property
            values

            and $model elements may happen in the same request. Operations are
            limited to add, replace and

            remove.
        - id: etag
          type: string
          description: >-
            Only perform the operation if the entity's etag matches one of the
            etags provided or * is

            provided
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The http response.
        type: >-
          Promise&lt;<xref uid="@azure/digital-twins.DigitalTwinsUpdateResponse"
          />&gt;
  - name: updateRelationship(string, string, any[], string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.updateRelationship'
    package: '@azure/digital-twins'
    summary: >-
      Updates the properties of a relationship on a digital twin using a JSON
      patch.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function updateRelationship(digitalTwinId: string, relationshipId:
        string, relationshipPatch: any[], etag?: string, options?:
        OperationOptions): Promise<DigitalTwinsUpdateRelationshipResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to delete.
        - id: relationshipId
          type: string
          description: The Id of the relationship to be updated.
        - id: relationshipPatch
          type: any[]
          description: >-
            The application/json-patch+json operations to be performed on the
            specified digital twin's relationship.
        - id: etag
          type: string
          description: >-
            Only perform the operation if the entity's etag matches one of the
            etags provided or * is
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: |-
            The operation options
            provided
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins.DigitalTwinsUpdateRelationshipResponse"
          />&gt;
  - name: upsertDigitalTwin(string, string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.upsertDigitalTwin'
    package: '@azure/digital-twins'
    summary: Create or update a digital twin
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function upsertDigitalTwin(digitalTwinId: string, digitalTwinJson:
        string, options?: OperationOptions): Promise<DigitalTwinsAddResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the digital twin to create or update.
        - id: digitalTwinJson
          type: string
          description: The application/json digital twin to create.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The created application/json digital twin and the http response.
        type: >-
          Promise&lt;<xref uid="@azure/digital-twins.DigitalTwinsAddResponse"
          />&gt;
  - name: upsertEventRoute(string, string, string, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.upsertEventRoute'
    package: '@azure/digital-twins'
    summary: Create or update an event route.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function upsertEventRoute(eventRouteId: string, endpointId: string,
        filter?: string, options?: OperationOptions): Promise<RestResponse>
      parameters:
        - id: eventRouteId
          type: string
          description: The Id of the event route to create or update.
        - id: endpointId
          type: string
          description: The id of the endpoint this event route is bound to.
        - id: filter
          type: string
          description: >-
            An expression which describes the events which are routed to the
            endpoint.
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: The http response.
        type: Promise&lt;<xref uid="@azure/core-http.RestResponse" />&gt;
  - name: upsertRelationship(string, string, any, OperationOptions)
    uid: '@azure/digital-twins.DigitalTwinsClient.upsertRelationship'
    package: '@azure/digital-twins'
    summary: Create or update a relationship on a digital twin.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function upsertRelationship(digitalTwinId: string, relationshipId:
        string, relationship: any, options?: OperationOptions):
        Promise<DigitalTwinsAddRelationshipResponse>
      parameters:
        - id: digitalTwinId
          type: string
          description: The Id of the source digital twin.
        - id: relationshipId
          type: string
          description: The Id of the relationship to create.
        - id: relationship
          type: any
          description: ''
        - id: options
          type: <xref uid="@azure/core-http.OperationOptions" />
          description: The operation options
      return:
        description: ''
        type: >-
          Promise&lt;<xref
          uid="@azure/digital-twins.DigitalTwinsAddRelationshipResponse" />&gt;
