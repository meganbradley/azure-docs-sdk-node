### YamlMime:TSType
name: Solution
uid: '@azure/arm-selfhelp.Solution'
package: '@azure/arm-selfhelp'
summary: Interface representing a Solution.
fullName: Solution
remarks: ''
isDeprecated: false
type: interface
methods:
  - name: beginCreate(string, string, SolutionCreateOptionalParams)
    uid: '@azure/arm-selfhelp.Solution.beginCreate'
    package: '@azure/arm-selfhelp'
    summary: >-
      Creates a solution for the specific Azure resource or subscription using
      the inputs ‘solutionId and

      requiredInputs’ from discovery solutions. <br/> Azure solutions comprise a
      comprehensive library of

      self-help resources that have been thoughtfully curated by Azure engineers
      to aid customers in

      resolving typical troubleshooting issues. These solutions encompass (1.)
      dynamic and context-aware

      diagnostics, guided troubleshooting wizards, and data visualizations, (2.)
      rich instructional video

      tutorials and illustrative diagrams and images, and (3.) thoughtfully
      assembled textual

      troubleshooting instructions. All these components are seamlessly
      converged into unified solutions

      tailored to address a specific support problem area. Each solution type
      may require one or more

      ‘requiredParameters’ that are required to execute the individual solution
      component. In the absence

      of the ‘requiredParameters’ it is likely that some of the solutions might
      fail execution, and you

      might see an empty response. <br/><br/> <b>Note:</b>  <br/>1.
      ‘requiredInputs’ from Discovery

      solutions response must be passed via ‘parameters’ in the request body of
      Solutions API. <br/>2.

      ‘requiredParameters’ from the Solutions response is the same as ‘
      additionalParameters’ in the

      request for diagnostics <br/>3. ‘requiredParameters’ from the Solutions
      response is the same as

      ‘properties.parameters’ in the request for Troubleshooters
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreate(scope: string, solutionResourceName: string,
        options?: SolutionCreateOptionalParams):
        Promise<SimplePollerLike<OperationState<SolutionResource>,
        SolutionResource>>
      parameters:
        - id: scope
          type: string
          description: |-
            scope = resourceUri of affected resource.<br/> For example:
                         /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
        - id: solutionResourceName
          type: string
          description: Solution resource Name.
        - id: options
          type: <xref uid="@azure/arm-selfhelp.SolutionCreateOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-selfhelp.SolutionResource" />&gt;, <xref
          uid="@azure/arm-selfhelp.SolutionResource" />&gt;&gt;
  - name: beginCreateAndWait(string, string, SolutionCreateOptionalParams)
    uid: '@azure/arm-selfhelp.Solution.beginCreateAndWait'
    package: '@azure/arm-selfhelp'
    summary: >-
      Creates a solution for the specific Azure resource or subscription using
      the inputs ‘solutionId and

      requiredInputs’ from discovery solutions. <br/> Azure solutions comprise a
      comprehensive library of

      self-help resources that have been thoughtfully curated by Azure engineers
      to aid customers in

      resolving typical troubleshooting issues. These solutions encompass (1.)
      dynamic and context-aware

      diagnostics, guided troubleshooting wizards, and data visualizations, (2.)
      rich instructional video

      tutorials and illustrative diagrams and images, and (3.) thoughtfully
      assembled textual

      troubleshooting instructions. All these components are seamlessly
      converged into unified solutions

      tailored to address a specific support problem area. Each solution type
      may require one or more

      ‘requiredParameters’ that are required to execute the individual solution
      component. In the absence

      of the ‘requiredParameters’ it is likely that some of the solutions might
      fail execution, and you

      might see an empty response. <br/><br/> <b>Note:</b>  <br/>1.
      ‘requiredInputs’ from Discovery

      solutions response must be passed via ‘parameters’ in the request body of
      Solutions API. <br/>2.

      ‘requiredParameters’ from the Solutions response is the same as ‘
      additionalParameters’ in the

      request for diagnostics <br/>3. ‘requiredParameters’ from the Solutions
      response is the same as

      ‘properties.parameters’ in the request for Troubleshooters
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginCreateAndWait(scope: string, solutionResourceName: string,
        options?: SolutionCreateOptionalParams): Promise<SolutionResource>
      parameters:
        - id: scope
          type: string
          description: |-
            scope = resourceUri of affected resource.<br/> For example:
                         /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
        - id: solutionResourceName
          type: string
          description: Solution resource Name.
        - id: options
          type: <xref uid="@azure/arm-selfhelp.SolutionCreateOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-selfhelp.SolutionResource" />&gt;
  - name: beginUpdate(string, string, SolutionUpdateOptionalParams)
    uid: '@azure/arm-selfhelp.Solution.beginUpdate'
    package: '@azure/arm-selfhelp'
    summary: >-
      Update the requiredInputs or additional information needed to execute the
      solution
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdate(scope: string, solutionResourceName: string,
        options?: SolutionUpdateOptionalParams):
        Promise<SimplePollerLike<OperationState<SolutionUpdateResponse>,
        SolutionUpdateResponse>>
      parameters:
        - id: scope
          type: string
          description: |-
            scope = resourceUri of affected resource.<br/> For example:
                         /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
        - id: solutionResourceName
          type: string
          description: Solution resource Name.
        - id: options
          type: <xref uid="@azure/arm-selfhelp.SolutionUpdateOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/core-lro.SimplePollerLike" />&lt;<xref
          uid="@azure/core-lro.OperationState" />&lt;<xref
          uid="@azure/arm-selfhelp.SolutionUpdateResponse" />&gt;, <xref
          uid="@azure/arm-selfhelp.SolutionUpdateResponse" />&gt;&gt;
  - name: beginUpdateAndWait(string, string, SolutionUpdateOptionalParams)
    uid: '@azure/arm-selfhelp.Solution.beginUpdateAndWait'
    package: '@azure/arm-selfhelp'
    summary: >-
      Update the requiredInputs or additional information needed to execute the
      solution
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function beginUpdateAndWait(scope: string, solutionResourceName: string,
        options?: SolutionUpdateOptionalParams): Promise<SolutionUpdateResponse>
      parameters:
        - id: scope
          type: string
          description: |-
            scope = resourceUri of affected resource.<br/> For example:
                         /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
        - id: solutionResourceName
          type: string
          description: Solution resource Name.
        - id: options
          type: <xref uid="@azure/arm-selfhelp.SolutionUpdateOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: >-
          Promise&lt;<xref uid="@azure/arm-selfhelp.SolutionUpdateResponse"
          />&gt;
  - name: get(string, string, SolutionGetOptionalParams)
    uid: '@azure/arm-selfhelp.Solution.get'
    package: '@azure/arm-selfhelp'
    summary: >-
      Get the solution using the applicable solutionResourceName while creating
      the solution.
    remarks: ''
    isDeprecated: false
    syntax:
      content: >-
        function get(scope: string, solutionResourceName: string, options?:
        SolutionGetOptionalParams): Promise<SolutionResource>
      parameters:
        - id: scope
          type: string
          description: |-
            scope = resourceUri of affected resource.<br/> For example:
                         /subscriptions/0d0fcd2e-c4fd-4349-8497-200edb3923c6/resourcegroups/myresourceGroup/providers/Microsoft.KeyVault/vaults/test-keyvault-non-read
        - id: solutionResourceName
          type: string
          description: Solution resource Name.
        - id: options
          type: <xref uid="@azure/arm-selfhelp.SolutionGetOptionalParams" />
          description: The options parameters.
      return:
        description: ''
        type: Promise&lt;<xref uid="@azure/arm-selfhelp.SolutionResource" />&gt;
